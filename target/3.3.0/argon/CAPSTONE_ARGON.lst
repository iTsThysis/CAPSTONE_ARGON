
/Users/darwinwang/Documents/IoT/CAPSTONE_ARGON/target/3.3.0/argon/CAPSTONE_ARGON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006e24  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bae40  000bae40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bae64  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e274  000bae68  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000050c  2003e2e4  2003e2e4  0002e2e4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000baed8  000baed8  0002aed8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000baf00  000baf00  0002af00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0014fbe9  00000000  00000000  0002af04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000175cf  00000000  00000000  0017aaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003f010  00000000  00000000  001920bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000035a0  00000000  00000000  001d10cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b468  00000000  00000000  001d466c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042842  00000000  00000000  001dfad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004ece1  00000000  00000000  00222316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013b293  00000000  00000000  00270ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009660  00000000  00000000  003ac28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f005 fe1f 	bl	b9c70 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f005 fe41 	bl	b9cc0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e274 	.word	0x2003e274
   b4048:	000bae68 	.word	0x000bae68
   b404c:	2003e2e4 	.word	0x2003e2e4
   b4050:	2003e2e4 	.word	0x2003e2e4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f005 fb6b 	bl	b9738 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000bae1c 	.word	0x000bae1c
   b407c:	000bae40 	.word	0x000bae40

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bebe 	b.w	b4e00 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fd95 	bl	b4bb4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f005 bb0b 	b.w	b96a8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bf01 	b.w	b5e98 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 beff 	b.w	b5e98 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bf05 	b.w	b5ea8 <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fe52 	bl	b5d50 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5971 	.word	0x000b5971
   b40b4:	000b9f98 	.word	0x000b9f98

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40c8:	4770      	bx	lr
	...

000b40cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const unsigned long PRINT_SAMPLE_PERIOD = 100;
LIS3DHSPI accel(SPI, D3, WKP);
unsigned long lastPrintSample = 0;
// receiving data
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
   b40cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  for (size_t i = 0; i < len; i++)
  {
    if (String(data[i]).equals("49"))
   b40d0:	f8df 8040 	ldr.w	r8, [pc, #64]	; b4114 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
    {
      Serial.println("1 received");
   b40d4:	4f0e      	ldr	r7, [pc, #56]	; (b4110 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   b40d6:	4604      	mov	r4, r0
   b40d8:	1845      	adds	r5, r0, r1
  for (size_t i = 0; i < len; i++)
   b40da:	42ac      	cmp	r4, r5
   b40dc:	d015      	beq.n	b410a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3e>
    if (String(data[i]).equals("49"))
   b40de:	f814 1b01 	ldrb.w	r1, [r4], #1
   b40e2:	220a      	movs	r2, #10
   b40e4:	4668      	mov	r0, sp
   b40e6:	f004 fdee 	bl	b8cc6 <_ZN6StringC1Ehh>
   b40ea:	4641      	mov	r1, r8
   b40ec:	4668      	mov	r0, sp
   b40ee:	f004 fe42 	bl	b8d76 <_ZNK6String6equalsEPKc>
   b40f2:	4606      	mov	r6, r0
   b40f4:	4668      	mov	r0, sp
   b40f6:	f004 fd33 	bl	b8b60 <_ZN6StringD1Ev>
   b40fa:	2e00      	cmp	r6, #0
   b40fc:	d0ed      	beq.n	b40da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe>
      Serial.println("1 received");
   b40fe:	f005 fa11 	bl	b9524 <_Z16_fetch_usbserialv>
   b4102:	4639      	mov	r1, r7
   b4104:	f004 fbcd 	bl	b88a2 <_ZN5Print7printlnEPKc>
  for (size_t i = 0; i < len; i++)
   b4108:	e7e7      	b.n	b40da <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe>
    }
  }
}
   b410a:	b004      	add	sp, #16
   b410c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4110:	000b9fb0 	.word	0x000b9fb0
   b4114:	000b9fad 	.word	0x000b9fad

000b4118 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4118:	b510      	push	{r4, lr}
  }
   b411a:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b411c:	4604      	mov	r4, r0
  }
   b411e:	f7ff ffbc 	bl	b409a <_ZdlPvj>
   b4122:	4620      	mov	r0, r4
   b4124:	bd10      	pop	{r4, pc}

000b4126 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4126:	b40e      	push	{r1, r2, r3}
   b4128:	b503      	push	{r0, r1, lr}
   b412a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b412c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b412e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4132:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4134:	f004 fbdd 	bl	b88f2 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4138:	b002      	add	sp, #8
   b413a:	f85d eb04 	ldr.w	lr, [sp], #4
   b413e:	b003      	add	sp, #12
   b4140:	4770      	bx	lr
	...

000b4144 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4144:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b414a:	7922      	ldrb	r2, [r4, #4]
   b414c:	68a3      	ldr	r3, [r4, #8]
   b414e:	b132      	cbz	r2, b415e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4150:	b9a3      	cbnz	r3, b417c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4152:	490b      	ldr	r1, [pc, #44]	; (b4180 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4154:	b002      	add	sp, #8
   b4156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b415a:	f004 bb8f 	b.w	b887c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b415e:	4a09      	ldr	r2, [pc, #36]	; (b4184 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4160:	7b26      	ldrb	r6, [r4, #12]
   b4162:	4d09      	ldr	r5, [pc, #36]	; (b4188 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4164:	4909      	ldr	r1, [pc, #36]	; (b418c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4166:	7b64      	ldrb	r4, [r4, #13]
   b4168:	2e01      	cmp	r6, #1
   b416a:	bf18      	it	ne
   b416c:	4629      	movne	r1, r5
   b416e:	e9cd 1400 	strd	r1, r4, [sp]
   b4172:	4907      	ldr	r1, [pc, #28]	; (b4190 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4174:	f7ff ffd7 	bl	b4126 <_ZN5Print6printfEPKcz>
  }
   b4178:	b002      	add	sp, #8
   b417a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b417c:	4a05      	ldr	r2, [pc, #20]	; (b4194 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b417e:	e7ef      	b.n	b4160 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4180:	000b9fcc 	.word	0x000b9fcc
   b4184:	000ba0cd 	.word	0x000ba0cd
   b4188:	000b9fc8 	.word	0x000b9fc8
   b418c:	000b9fc4 	.word	0x000b9fc4
   b4190:	000b9fe2 	.word	0x000b9fe2
   b4194:	000b9fbb 	.word	0x000b9fbb

000b4198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4198:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b419a:	6843      	ldr	r3, [r0, #4]
   b419c:	3b01      	subs	r3, #1
    {
   b419e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b41a0:	6043      	str	r3, [r0, #4]
   b41a2:	b963      	cbnz	r3, b41be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b41a4:	6803      	ldr	r3, [r0, #0]
   b41a6:	689b      	ldr	r3, [r3, #8]
   b41a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b41aa:	68a3      	ldr	r3, [r4, #8]
   b41ac:	3b01      	subs	r3, #1
   b41ae:	60a3      	str	r3, [r4, #8]
   b41b0:	b92b      	cbnz	r3, b41be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b41b2:	6823      	ldr	r3, [r4, #0]
   b41b4:	4620      	mov	r0, r4
   b41b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   b41b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b41bc:	4718      	bx	r3
    }
   b41be:	bd10      	pop	{r4, pc}

000b41c0 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b41c0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b41c2:	f001 fbdd 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b41c6:	4b03      	ldr	r3, [pc, #12]	; (b41d4 <_ZN10CloudClass7processEv+0x14>)
   b41c8:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b41ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b41ce:	f001 bdf3 	b.w	b5db8 <spark_process>
   b41d2:	bf00      	nop
   b41d4:	2003e728 	.word	0x2003e728

000b41d8 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41d8:	6803      	ldr	r3, [r0, #0]
   b41da:	b12b      	cbz	r3, b41e8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b41dc:	6842      	ldr	r2, [r0, #4]
   b41de:	4293      	cmp	r3, r2
   b41e0:	d202      	bcs.n	b41e8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b41e2:	4618      	mov	r0, r3
   b41e4:	f005 bd2c 	b.w	b9c40 <atoi>
   b41e8:	2000      	movs	r0, #0
   b41ea:	4770      	bx	lr

000b41ec <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b41ec:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41ee:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b41f0:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41f2:	b145      	cbz	r5, b4206 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b41f4:	6843      	ldr	r3, [r0, #4]
   b41f6:	429d      	cmp	r5, r3
   b41f8:	d205      	bcs.n	b4206 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b41fa:	4628      	mov	r0, r5
   b41fc:	f005 fda8 	bl	b9d50 <strlen>
   b4200:	3001      	adds	r0, #1
   b4202:	4405      	add	r5, r0
   b4204:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4206:	4620      	mov	r0, r4
   b4208:	bd38      	pop	{r3, r4, r5, pc}

000b420a <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b420a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b420c:	4604      	mov	r4, r0
   b420e:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4210:	460d      	mov	r5, r1
   b4212:	b921      	cbnz	r1, b421e <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4214:	6803      	ldr	r3, [r0, #0]
   b4216:	1c7a      	adds	r2, r7, #1
   b4218:	6042      	str	r2, [r0, #4]
   b421a:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b421e:	4608      	mov	r0, r1
   b4220:	f005 fd96 	bl	b9d50 <strlen>
    if (len + l > buff_size)
   b4224:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4226:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4228:	19f2      	adds	r2, r6, r7
   b422a:	429a      	cmp	r2, r3
   b422c:	d8f6      	bhi.n	b421c <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b422e:	6820      	ldr	r0, [r4, #0]
   b4230:	4632      	mov	r2, r6
   b4232:	4629      	mov	r1, r5
   b4234:	4438      	add	r0, r7
   b4236:	f005 fd1b 	bl	b9c70 <memcpy>
    len += l;
   b423a:	6860      	ldr	r0, [r4, #4]
   b423c:	4430      	add	r0, r6
   b423e:	6060      	str	r0, [r4, #4]
   b4240:	e7ec      	b.n	b421c <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4244 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4244:	b538      	push	{r3, r4, r5, lr}
   b4246:	4604      	mov	r4, r0
   b4248:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b424a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b424e:	6825      	ldr	r5, [r4, #0]
   b4250:	4a04      	ldr	r2, [pc, #16]	; (b4264 <_ZN10BlynkParam3addEi+0x20>)
   b4252:	1a09      	subs	r1, r1, r0
   b4254:	4428      	add	r0, r5
   b4256:	f001 fe37 	bl	b5ec8 <snprintf>
   b425a:	6863      	ldr	r3, [r4, #4]
   b425c:	3001      	adds	r0, #1
   b425e:	4403      	add	r3, r0
   b4260:	6063      	str	r3, [r4, #4]
    }
   b4262:	bd38      	pop	{r3, r4, r5, pc}
   b4264:	000b9fff 	.word	0x000b9fff

000b4268 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4268:	b538      	push	{r3, r4, r5, lr}
   b426a:	4604      	mov	r4, r0
   b426c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b426e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4272:	6825      	ldr	r5, [r4, #0]
   b4274:	4a04      	ldr	r2, [pc, #16]	; (b4288 <_ZN10BlynkParam3addEl+0x20>)
   b4276:	1a09      	subs	r1, r1, r0
   b4278:	4428      	add	r0, r5
   b427a:	f001 fe25 	bl	b5ec8 <snprintf>
   b427e:	6863      	ldr	r3, [r4, #4]
   b4280:	3001      	adds	r0, #1
   b4282:	4403      	add	r3, r0
   b4284:	6063      	str	r3, [r4, #4]
    }
   b4286:	bd38      	pop	{r3, r4, r5, pc}
   b4288:	000ba002 	.word	0x000ba002

000b428c <BlynkWidgetWrite0>:
{
   b428c:	b508      	push	{r3, lr}
    int         asInt() const       { return atoi(buff); }
   b428e:	6808      	ldr	r0, [r1, #0]
   b4290:	f005 fcd6 	bl	b9c40 <atoi>
  if (buttonState == 1)
   b4294:	2801      	cmp	r0, #1
   b4296:	4b0a      	ldr	r3, [pc, #40]	; (b42c0 <BlynkWidgetWrite0+0x34>)
   b4298:	d105      	bne.n	b42a6 <BlynkWidgetWrite0+0x1a>
    currentState = OPEN;
   b429a:	2200      	movs	r2, #0
   b429c:	701a      	strb	r2, [r3, #0]
    authetification = false;
   b429e:	4b09      	ldr	r3, [pc, #36]	; (b42c4 <BlynkWidgetWrite0+0x38>)
   b42a0:	2200      	movs	r2, #0
    authetification = true;
   b42a2:	701a      	strb	r2, [r3, #0]
}
   b42a4:	e00a      	b.n	b42bc <BlynkWidgetWrite0+0x30>
  else if (buttonState == 0)
   b42a6:	b920      	cbnz	r0, b42b2 <BlynkWidgetWrite0+0x26>
    currentState = LOCKED;
   b42a8:	2201      	movs	r2, #1
   b42aa:	701a      	strb	r2, [r3, #0]
    authetification = true;
   b42ac:	4b05      	ldr	r3, [pc, #20]	; (b42c4 <BlynkWidgetWrite0+0x38>)
   b42ae:	2201      	movs	r2, #1
   b42b0:	e7f7      	b.n	b42a2 <BlynkWidgetWrite0+0x16>
  switch (currentState)
   b42b2:	781b      	ldrb	r3, [r3, #0]
   b42b4:	2b00      	cmp	r3, #0
   b42b6:	d0f2      	beq.n	b429e <BlynkWidgetWrite0+0x12>
   b42b8:	2b01      	cmp	r3, #1
   b42ba:	d0f7      	beq.n	b42ac <BlynkWidgetWrite0+0x20>
}
   b42bc:	bd08      	pop	{r3, pc}
   b42be:	bf00      	nop
   b42c0:	2003e275 	.word	0x2003e275
   b42c4:	2003e274 	.word	0x2003e274

000b42c8 <_Z8OpenDoorv>:
{
   b42c8:	b508      	push	{r3, lr}
  digitalWrite(door, HIGH);
   b42ca:	2101      	movs	r1, #1
   b42cc:	2005      	movs	r0, #5
   b42ce:	f005 fab4 	bl	b983a <digitalWrite>
  delay(7500);
   b42d2:	f641 504c 	movw	r0, #7500	; 0x1d4c
   b42d6:	f001 fe27 	bl	b5f28 <delay>
}
   b42da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(door, LOW);
   b42de:	2100      	movs	r1, #0
   b42e0:	2005      	movs	r0, #5
   b42e2:	f005 baaa 	b.w	b983a <digitalWrite>
	...

000b42e8 <_Z18getFingerprintIDezv>:
  return p;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez()
{
   b42e8:	b570      	push	{r4, r5, r6, lr}
  uint8_t p = finger.getImage();
   b42ea:	4c1e      	ldr	r4, [pc, #120]	; (b4364 <_Z18getFingerprintIDezv+0x7c>)
   b42ec:	4620      	mov	r0, r4
   b42ee:	f001 fa2a 	bl	b5746 <_ZN20Adafruit_Fingerprint8getImageEv>
  if (p != FINGERPRINT_OK)
   b42f2:	b110      	cbz	r0, b42fa <_Z18getFingerprintIDezv+0x12>
    return -1;
   b42f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  digitalWrite(door, HIGH);
  delay(7500);
  digitalWrite(door, LOW);

  return finger.fingerID;
   b42f8:	bd70      	pop	{r4, r5, r6, pc}
  p = finger.image2Tz();
   b42fa:	2101      	movs	r1, #1
   b42fc:	4620      	mov	r0, r4
   b42fe:	f001 fa40 	bl	b5782 <_ZN20Adafruit_Fingerprint8image2TzEh>
  if (p != FINGERPRINT_OK)
   b4302:	2800      	cmp	r0, #0
   b4304:	d1f6      	bne.n	b42f4 <_Z18getFingerprintIDezv+0xc>
  p = finger.fingerFastSearch();
   b4306:	4620      	mov	r0, r4
   b4308:	f001 fa5c 	bl	b57c4 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv>
  if (p != FINGERPRINT_OK)
   b430c:	4605      	mov	r5, r0
   b430e:	2800      	cmp	r0, #0
   b4310:	d1f0      	bne.n	b42f4 <_Z18getFingerprintIDezv+0xc>
  Serial.print("Found ID #");
   b4312:	f005 f907 	bl	b9524 <_Z16_fetch_usbserialv>
   b4316:	4914      	ldr	r1, [pc, #80]	; (b4368 <_Z18getFingerprintIDezv+0x80>)
   b4318:	f004 fab0 	bl	b887c <_ZN5Print5printEPKc>
  Serial.print(finger.fingerID);
   b431c:	f005 f902 	bl	b9524 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4320:	220a      	movs	r2, #10
   b4322:	8821      	ldrh	r1, [r4, #0]
   b4324:	f004 fac7 	bl	b88b6 <_ZN5Print11printNumberEmh>
  Serial.print(" with confidence of ");
   b4328:	f005 f8fc 	bl	b9524 <_Z16_fetch_usbserialv>
   b432c:	490f      	ldr	r1, [pc, #60]	; (b436c <_Z18getFingerprintIDezv+0x84>)
   b432e:	f004 faa5 	bl	b887c <_ZN5Print5printEPKc>
  Serial.println(finger.confidence);
   b4332:	f005 f8f7 	bl	b9524 <_Z16_fetch_usbserialv>
   b4336:	220a      	movs	r2, #10
   b4338:	8861      	ldrh	r1, [r4, #2]
   b433a:	4606      	mov	r6, r0
   b433c:	f004 fabb 	bl	b88b6 <_ZN5Print11printNumberEmh>
        n += println();
   b4340:	4630      	mov	r0, r6
   b4342:	f004 faa2 	bl	b888a <_ZN5Print7printlnEv>
  digitalWrite(door, HIGH);
   b4346:	2101      	movs	r1, #1
   b4348:	2005      	movs	r0, #5
   b434a:	f005 fa76 	bl	b983a <digitalWrite>
  delay(7500);
   b434e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   b4352:	f001 fde9 	bl	b5f28 <delay>
  digitalWrite(door, LOW);
   b4356:	2005      	movs	r0, #5
   b4358:	4629      	mov	r1, r5
   b435a:	f005 fa6e 	bl	b983a <digitalWrite>
  return finger.fingerID;
   b435e:	8820      	ldrh	r0, [r4, #0]
   b4360:	e7ca      	b.n	b42f8 <_Z18getFingerprintIDezv+0x10>
   b4362:	bf00      	nop
   b4364:	2003e3b0 	.word	0x2003e3b0
   b4368:	000ba0ae 	.word	0x000ba0ae
   b436c:	000ba0b9 	.word	0x000ba0b9

000b4370 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4370:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4372:	2300      	movs	r3, #0
   b4374:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4376:	6800      	ldr	r0, [r0, #0]
   b4378:	f004 ffb4 	bl	b92e4 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b437c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4380:	f001 ba56 	b.w	b5830 <BlynkNoOpCbk>

000b4384 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b4388:	188f      	adds	r7, r1, r2
   b438a:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b438c:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b438e:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b4392:	4606      	mov	r6, r0
   b4394:	4689      	mov	r9, r1
   b4396:	4690      	mov	r8, r2
    if (it >= param.end())
   b4398:	f080 80c2 	bcs.w	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b439c:	a805      	add	r0, sp, #20
   b439e:	880d      	ldrh	r5, [r1, #0]
   b43a0:	f7ff ff24 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
   b43a4:	6803      	ldr	r3, [r0, #0]
   b43a6:	42bb      	cmp	r3, r7
   b43a8:	f080 80ba 	bcs.w	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b43ac:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b43ae:	7803      	ldrb	r3, [r0, #0]
   b43b0:	2b41      	cmp	r3, #65	; 0x41
   b43b2:	d149      	bne.n	b4448 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b43b4:	3001      	adds	r0, #1
   b43b6:	f005 fc43 	bl	b9c40 <atoi>
   b43ba:	2805      	cmp	r0, #5
   b43bc:	dd37      	ble.n	b442e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b43be:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b43c0:	f247 2376 	movw	r3, #29302	; 0x7276
   b43c4:	429d      	cmp	r5, r3
   b43c6:	f000 80d3 	beq.w	b4570 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b43ca:	d841      	bhi.n	b4450 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b43cc:	f247 2361 	movw	r3, #29281	; 0x7261
   b43d0:	429d      	cmp	r5, r3
   b43d2:	f000 80a8 	beq.w	b4526 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b43d6:	f247 2364 	movw	r3, #29284	; 0x7264
   b43da:	429d      	cmp	r5, r3
   b43dc:	d06b      	beq.n	b44b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b43de:	f646 5370 	movw	r3, #28016	; 0x6d70
   b43e2:	429d      	cmp	r5, r3
   b43e4:	d141      	bne.n	b446a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b43e6:	4d78      	ldr	r5, [pc, #480]	; (b45c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b43e8:	4e78      	ldr	r6, [pc, #480]	; (b45cc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b43ea:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b45e0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b43ee:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b43f0:	42b8      	cmp	r0, r7
   b43f2:	f080 8095 	bcs.w	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b43f6:	7803      	ldrb	r3, [r0, #0]
   b43f8:	2b41      	cmp	r3, #65	; 0x41
   b43fa:	d14b      	bne.n	b4494 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b43fc:	3001      	adds	r0, #1
   b43fe:	f005 fc1f 	bl	b9c40 <atoi>
   b4402:	2805      	cmp	r0, #5
   b4404:	dd39      	ble.n	b447a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4406:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4408:	a805      	add	r0, sp, #20
   b440a:	f7ff feef 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b440e:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b4412:	4629      	mov	r1, r5
   b4414:	4648      	mov	r0, r9
   b4416:	f005 fc89 	bl	b9d2c <strcmp>
   b441a:	4601      	mov	r1, r0
   b441c:	2800      	cmp	r0, #0
   b441e:	d13d      	bne.n	b449c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b4420:	4620      	mov	r0, r4
   b4422:	f005 f9f9 	bl	b9818 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4426:	a805      	add	r0, sp, #20
   b4428:	f7ff fee0 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b442c:	e7df      	b.n	b43ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b442e:	9805      	ldr	r0, [sp, #20]
   b4430:	3001      	adds	r0, #1
   b4432:	f005 fc05 	bl	b9c40 <atoi>
   b4436:	2800      	cmp	r0, #0
   b4438:	dbc1      	blt.n	b43be <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b443a:	9805      	ldr	r0, [sp, #20]
   b443c:	3001      	adds	r0, #1
   b443e:	f005 fbff 	bl	b9c40 <atoi>
   b4442:	300e      	adds	r0, #14
   b4444:	b2c4      	uxtb	r4, r0
   b4446:	e7bb      	b.n	b43c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4448:	a805      	add	r0, sp, #20
   b444a:	f7ff fec5 	bl	b41d8 <_ZNK10BlynkParam8iterator5asIntEv>
   b444e:	e7f9      	b.n	b4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b4450:	f247 7364 	movw	r3, #30564	; 0x7764
   b4454:	429d      	cmp	r5, r3
   b4456:	d04f      	beq.n	b44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4458:	f247 7376 	movw	r3, #30582	; 0x7776
   b445c:	429d      	cmp	r5, r3
   b445e:	f000 8097 	beq.w	b4590 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b4462:	f247 7361 	movw	r3, #30561	; 0x7761
   b4466:	429d      	cmp	r5, r3
   b4468:	d06f      	beq.n	b454a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b446a:	2300      	movs	r3, #0
   b446c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4470:	2202      	movs	r2, #2
   b4472:	9200      	str	r2, [sp, #0]
   b4474:	8b72      	ldrh	r2, [r6, #26]
   b4476:	4619      	mov	r1, r3
   b4478:	e03a      	b.n	b44f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b447a:	9805      	ldr	r0, [sp, #20]
   b447c:	3001      	adds	r0, #1
   b447e:	f005 fbdf 	bl	b9c40 <atoi>
   b4482:	2800      	cmp	r0, #0
   b4484:	dbbf      	blt.n	b4406 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b4486:	9805      	ldr	r0, [sp, #20]
   b4488:	3001      	adds	r0, #1
   b448a:	f005 fbd9 	bl	b9c40 <atoi>
   b448e:	300e      	adds	r0, #14
   b4490:	b2c4      	uxtb	r4, r0
   b4492:	e7b9      	b.n	b4408 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b4494:	a805      	add	r0, sp, #20
   b4496:	f7ff fe9f 	bl	b41d8 <_ZNK10BlynkParam8iterator5asIntEv>
   b449a:	e7f9      	b.n	b4490 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b449c:	4631      	mov	r1, r6
   b449e:	4648      	mov	r0, r9
   b44a0:	f005 fc44 	bl	b9d2c <strcmp>
   b44a4:	b128      	cbz	r0, b44b2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b44a6:	4641      	mov	r1, r8
   b44a8:	4648      	mov	r0, r9
   b44aa:	f005 fc3f 	bl	b9d2c <strcmp>
   b44ae:	2800      	cmp	r0, #0
   b44b0:	d1b9      	bne.n	b4426 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b44b2:	2101      	movs	r1, #1
   b44b4:	e7b4      	b.n	b4420 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b44b6:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b44b8:	4945      	ldr	r1, [pc, #276]	; (b45d0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b44ba:	9307      	str	r3, [sp, #28]
   b44bc:	a807      	add	r0, sp, #28
   b44be:	2310      	movs	r3, #16
   b44c0:	2500      	movs	r5, #0
   b44c2:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b44c6:	f7ff fea0 	bl	b420a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b44ca:	a807      	add	r0, sp, #28
   b44cc:	4621      	mov	r1, r4
   b44ce:	f7ff feb9 	bl	b4244 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b44d2:	4620      	mov	r0, r4
   b44d4:	f005 f9ca 	bl	b986c <digitalRead>
        rsp.add(analogRead(pin));
   b44d8:	4601      	mov	r1, r0
   b44da:	a807      	add	r0, sp, #28
   b44dc:	f7ff fec4 	bl	b4268 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b44e0:	9b08      	ldr	r3, [sp, #32]
   b44e2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b44e6:	3b01      	subs	r3, #1
   b44e8:	9300      	str	r3, [sp, #0]
   b44ea:	9b07      	ldr	r3, [sp, #28]
   b44ec:	462a      	mov	r2, r5
   b44ee:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b44f0:	4630      	mov	r0, r6
   b44f2:	f000 fa83 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b44f6:	e013      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b44f8:	a805      	add	r0, sp, #20
   b44fa:	f7ff fe77 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
   b44fe:	6803      	ldr	r3, [r0, #0]
   b4500:	429f      	cmp	r7, r3
   b4502:	d90d      	bls.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4504:	b2a4      	uxth	r4, r4
   b4506:	2101      	movs	r1, #1
   b4508:	4620      	mov	r0, r4
   b450a:	f005 f985 	bl	b9818 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b450e:	a805      	add	r0, sp, #20
   b4510:	f7ff fe62 	bl	b41d8 <_ZNK10BlynkParam8iterator5asIntEv>
   b4514:	1e01      	subs	r1, r0, #0
   b4516:	bf18      	it	ne
   b4518:	2101      	movne	r1, #1
   b451a:	4620      	mov	r0, r4
   b451c:	f005 f98d 	bl	b983a <digitalWrite>
    }
}
   b4520:	b00f      	add	sp, #60	; 0x3c
   b4522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4526:	ab0a      	add	r3, sp, #40	; 0x28
   b4528:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b452a:	a807      	add	r0, sp, #28
   b452c:	2310      	movs	r3, #16
   b452e:	4929      	ldr	r1, [pc, #164]	; (b45d4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b4530:	2500      	movs	r5, #0
   b4532:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4536:	f7ff fe68 	bl	b420a <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b453a:	a807      	add	r0, sp, #28
   b453c:	4621      	mov	r1, r4
   b453e:	f7ff fe81 	bl	b4244 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b4542:	4620      	mov	r0, r4
   b4544:	f005 f9a5 	bl	b9892 <analogRead>
   b4548:	e7c6      	b.n	b44d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b454a:	a805      	add	r0, sp, #20
   b454c:	f7ff fe4e 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
   b4550:	6803      	ldr	r3, [r0, #0]
   b4552:	429f      	cmp	r7, r3
   b4554:	d9e4      	bls.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4556:	b2a4      	uxth	r4, r4
   b4558:	2101      	movs	r1, #1
   b455a:	4620      	mov	r0, r4
   b455c:	f005 f95c 	bl	b9818 <pinMode>
        analogWrite(pin, it.asInt());
   b4560:	a805      	add	r0, sp, #20
   b4562:	f7ff fe39 	bl	b41d8 <_ZNK10BlynkParam8iterator5asIntEv>
   b4566:	4601      	mov	r1, r0
   b4568:	4620      	mov	r0, r4
   b456a:	f005 f9a9 	bl	b98c0 <_Z11analogWritetm>
    } break;
   b456e:	e7d7      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b4570:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b4572:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4576:	f001 f95d 	bl	b5834 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b457a:	4603      	mov	r3, r0
            handler(req);
   b457c:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b457e:	b123      	cbz	r3, b458a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b4580:	4a15      	ldr	r2, [pc, #84]	; (b45d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b4582:	4293      	cmp	r3, r2
   b4584:	d001      	beq.n	b458a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b4586:	4798      	blx	r3
   b4588:	e7ca      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b458a:	f001 f94f 	bl	b582c <BlynkWidgetRead>
        }
    }
   b458e:	e7c7      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b4590:	a805      	add	r0, sp, #20
   b4592:	f7ff fe2b 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4596:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b4598:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b459c:	eba3 0109 	sub.w	r1, r3, r9
   b45a0:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b45a4:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b45a6:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b45aa:	910c      	str	r1, [sp, #48]	; 0x30
   b45ac:	f001 f94c 	bl	b5848 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b45b0:	4603      	mov	r3, r0
            handler(req, param);
   b45b2:	a90a      	add	r1, sp, #40	; 0x28
   b45b4:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b45b6:	b123      	cbz	r3, b45c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b45b8:	4a08      	ldr	r2, [pc, #32]	; (b45dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b45ba:	4293      	cmp	r3, r2
   b45bc:	d001      	beq.n	b45c2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b45be:	4798      	blx	r3
   b45c0:	e7ae      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b45c2:	f001 f934 	bl	b582e <BlynkWidgetWrite>
    } break;
   b45c6:	e7ab      	b.n	b4520 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b45c8:	000ba0e3 	.word	0x000ba0e3
   b45cc:	000ba0e6 	.word	0x000ba0e6
   b45d0:	000ba0ee 	.word	0x000ba0ee
   b45d4:	000ba0f1 	.word	0x000ba0f1
   b45d8:	000b582d 	.word	0x000b582d
   b45dc:	000b582f 	.word	0x000b582f
   b45e0:	000ba0ea 	.word	0x000ba0ea

000b45e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b45e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b45e8:	b08c      	sub	sp, #48	; 0x30
   b45ea:	af04      	add	r7, sp, #16
   b45ec:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b45ee:	2205      	movs	r2, #5
   b45f0:	6800      	ldr	r0, [r0, #0]
   b45f2:	1d39      	adds	r1, r7, #4
   b45f4:	f004 fa9f 	bl	b8b36 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b45f8:	b398      	cbz	r0, b4662 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b45fa:	2805      	cmp	r0, #5
   b45fc:	d004      	beq.n	b4608 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b45fe:	2000      	movs	r0, #0
}
   b4600:	3720      	adds	r7, #32
   b4602:	46bd      	mov	sp, r7
   b4604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4608:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b460c:	ba5b      	rev16	r3, r3
   b460e:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b4610:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4614:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4618:	ba5b      	rev16	r3, r3
   b461a:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b461e:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b4622:	2a00      	cmp	r2, #0
   b4624:	d0eb      	beq.n	b45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4626:	793b      	ldrb	r3, [r7, #4]
   b4628:	bb23      	cbnz	r3, b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b462a:	f001 f8fd 	bl	b5828 <_Z11BlynkMillisv>
   b462e:	4602      	mov	r2, r0
   b4630:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b4632:	7f60      	ldrb	r0, [r4, #29]
   b4634:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4638:	b9c0      	cbnz	r0, b466c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b463a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b463e:	2901      	cmp	r1, #1
   b4640:	d114      	bne.n	b466c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b4642:	2b09      	cmp	r3, #9
   b4644:	d00f      	beq.n	b4666 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b4646:	2bc8      	cmp	r3, #200	; 0xc8
   b4648:	d001      	beq.n	b464e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b464a:	2b04      	cmp	r3, #4
   b464c:	d1d8      	bne.n	b4600 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b464e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b4650:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b4652:	4620      	mov	r0, r4
                state = CONNECTED;
   b4654:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b4656:	f000 fa7f 	bl	b4b58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b465a:	f7ff fdb1 	bl	b41c0 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b465e:	f001 f8e7 	bl	b5830 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b4662:	2001      	movs	r0, #1
   b4664:	e7cc      	b.n	b4600 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b4666:	2303      	movs	r3, #3
   b4668:	7763      	strb	r3, [r4, #29]
                break;
   b466a:	e7c9      	b.n	b4600 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b466c:	1f58      	subs	r0, r3, #5
   b466e:	bf18      	it	ne
   b4670:	2001      	movne	r0, #1
   b4672:	e7c5      	b.n	b4600 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b4674:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b4678:	d903      	bls.n	b4682 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b467a:	4620      	mov	r0, r4
   b467c:	f7ff fe78 	bl	b4370 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b4680:	e7ef      	b.n	b4662 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b4682:	f108 0308 	add.w	r3, r8, #8
   b4686:	466e      	mov	r6, sp
   b4688:	08db      	lsrs	r3, r3, #3
   b468a:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b468e:	469d      	mov	sp, r3
   b4690:	ad04      	add	r5, sp, #16
   b4692:	6820      	ldr	r0, [r4, #0]
   b4694:	4642      	mov	r2, r8
   b4696:	4629      	mov	r1, r5
   b4698:	f004 fa4d 	bl	b8b36 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b469c:	4580      	cmp	r8, r0
   b469e:	f04f 0000 	mov.w	r0, #0
   b46a2:	d17f      	bne.n	b47a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b46a4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b46a8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b46aa:	f001 f8bd 	bl	b5828 <_Z11BlynkMillisv>
    switch (hdr.type)
   b46ae:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b46b0:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b46b2:	2b14      	cmp	r3, #20
   b46b4:	f000 80a6 	beq.w	b4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b46b8:	d848      	bhi.n	b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b46ba:	2b0f      	cmp	r3, #15
   b46bc:	f000 80a2 	beq.w	b4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b46c0:	d807      	bhi.n	b46d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b46c2:	2b02      	cmp	r3, #2
   b46c4:	d048      	beq.n	b4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b46c6:	2b06      	cmp	r3, #6
   b46c8:	d051      	beq.n	b476e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b46ca:	4620      	mov	r0, r4
   b46cc:	f7ff fe50 	bl	b4370 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b46d0:	e058      	b.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b46d2:	2b11      	cmp	r3, #17
   b46d4:	d1f9      	bne.n	b46ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b46d6:	2300      	movs	r3, #0
   b46d8:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b46da:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b46de:	442b      	add	r3, r5
        if (it >= param.end())
   b46e0:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b46e2:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b46e6:	d24d      	bcs.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b46e8:	f107 000c 	add.w	r0, r7, #12
   b46ec:	f8d5 8000 	ldr.w	r8, [r5]
   b46f0:	f7ff fd7c 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b46f4:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b46f6:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b46fa:	1b5d      	subs	r5, r3, r5
   b46fc:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b46fe:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b4702:	687b      	ldr	r3, [r7, #4]
   b4704:	61fd      	str	r5, [r7, #28]
   b4706:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b470a:	8363      	strh	r3, [r4, #26]
   b470c:	4b64      	ldr	r3, [pc, #400]	; (b48a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b470e:	4598      	cmp	r8, r3
   b4710:	f000 80bf 	beq.w	b4892 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b4714:	f200 808c 	bhi.w	b4830 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4718:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b471c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b4720:	4413      	add	r3, r2
   b4722:	4598      	cmp	r8, r3
   b4724:	f000 809d 	beq.w	b4862 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4728:	d879      	bhi.n	b481e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b472a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b472e:	3b06      	subs	r3, #6
   b4730:	4598      	cmp	r8, r3
   b4732:	f000 809c 	beq.w	b486e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b4736:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b473a:	3303      	adds	r3, #3
   b473c:	4598      	cmp	r8, r3
   b473e:	d16b      	bne.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b4740:	f107 0114 	add.w	r1, r7, #20
   b4744:	4638      	mov	r0, r7
   b4746:	f001 f872 	bl	b582e <BlynkWidgetWrite>
   b474a:	e065      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b474c:	2b29      	cmp	r3, #41	; 0x29
   b474e:	d01b      	beq.n	b4788 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b4750:	2b37      	cmp	r3, #55	; 0x37
   b4752:	d017      	beq.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4754:	2b1d      	cmp	r3, #29
   b4756:	d1b8      	bne.n	b46ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b4758:	7f63      	ldrb	r3, [r4, #29]
   b475a:	b943      	cbnz	r3, b476e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b475c:	2301      	movs	r3, #1
   b475e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b4760:	4620      	mov	r0, r4
   b4762:	f000 f9f9 	bl	b4b58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b4766:	f7ff fd2b 	bl	b41c0 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b476a:	f001 f861 	bl	b5830 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b476e:	2300      	movs	r3, #0
   b4770:	21c8      	movs	r1, #200	; 0xc8
   b4772:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b4776:	9100      	str	r1, [sp, #0]
   b4778:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b477c:	4619      	mov	r1, r3
   b477e:	4620      	mov	r0, r4
   b4780:	f000 f93c 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b4784:	2001      	movs	r0, #1
   b4786:	e00d      	b.n	b47a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b4788:	68a3      	ldr	r3, [r4, #8]
   b478a:	b91b      	cbnz	r3, b4794 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b478c:	2040      	movs	r0, #64	; 0x40
   b478e:	f001 fb83 	bl	b5e98 <malloc>
   b4792:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b4794:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b4798:	44a8      	add	r8, r5
        if (it >= param.end())
   b479a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b479c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b47a0:	d302      	bcc.n	b47a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b47a2:	2000      	movs	r0, #0
   b47a4:	46b5      	mov	sp, r6
   b47a6:	e72b      	b.n	b4600 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b47a8:	4629      	mov	r1, r5
   b47aa:	2240      	movs	r2, #64	; 0x40
   b47ac:	68a0      	ldr	r0, [r4, #8]
   b47ae:	f005 fad7 	bl	b9d60 <strncpy>
        redir_serv[63] = '\0';
   b47b2:	68a3      	ldr	r3, [r4, #8]
   b47b4:	2500      	movs	r5, #0
   b47b6:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b47ba:	f107 0014 	add.w	r0, r7, #20
   b47be:	f7ff fd15 	bl	b41ec <_ZN10BlynkParam8iteratorppEv>
   b47c2:	6803      	ldr	r3, [r0, #0]
   b47c4:	4598      	cmp	r8, r3
   b47c6:	d91b      	bls.n	b4800 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b47c8:	6978      	ldr	r0, [r7, #20]
   b47ca:	b120      	cbz	r0, b47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b47cc:	69bb      	ldr	r3, [r7, #24]
   b47ce:	4298      	cmp	r0, r3
   b47d0:	d214      	bcs.n	b47fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b47d2:	f005 fa39 	bl	b9c48 <atol>
            redir_port = it.asLong();
   b47d6:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b47d8:	6820      	ldr	r0, [r4, #0]
   b47da:	f004 fd83 	bl	b92e4 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b47de:	6823      	ldr	r3, [r4, #0]
   b47e0:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b47e2:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b47e4:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b47e6:	2300      	movs	r3, #0
   b47e8:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b47ea:	f001 f81d 	bl	b5828 <_Z11BlynkMillisv>
   b47ee:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b47f2:	3808      	subs	r0, #8
   b47f4:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b47f8:	6160      	str	r0, [r4, #20]
   b47fa:	e7c3      	b.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b47fc:	4628      	mov	r0, r5
   b47fe:	e7ea      	b.n	b47d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b4800:	2550      	movs	r5, #80	; 0x50
   b4802:	e7e9      	b.n	b47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b4804:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4806:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b480a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b480e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b4810:	4629      	mov	r1, r5
   b4812:	4620      	mov	r0, r4
   b4814:	f7ff fdb6 	bl	b4384 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4818:	2300      	movs	r3, #0
   b481a:	8363      	strh	r3, [r4, #26]
   b481c:	e7b2      	b.n	b4784 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b481e:	4b21      	ldr	r3, [pc, #132]	; (b48a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b4820:	4598      	cmp	r8, r3
   b4822:	d1f9      	bne.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4824:	f107 0114 	add.w	r1, r7, #20
   b4828:	4638      	mov	r0, r7
   b482a:	f001 f800 	bl	b582e <BlynkWidgetWrite>
   b482e:	e7f3      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b4830:	4b1d      	ldr	r3, [pc, #116]	; (b48a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b4832:	4598      	cmp	r8, r3
   b4834:	d021      	beq.n	b487a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b4836:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b483a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b483e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b4842:	4598      	cmp	r8, r3
   b4844:	d01f      	beq.n	b4886 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b4846:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b484a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b484e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b4852:	4598      	cmp	r8, r3
   b4854:	d1e0      	bne.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4856:	f107 0114 	add.w	r1, r7, #20
   b485a:	4638      	mov	r0, r7
   b485c:	f000 ffe7 	bl	b582e <BlynkWidgetWrite>
   b4860:	e7da      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b4862:	f107 0114 	add.w	r1, r7, #20
   b4866:	4638      	mov	r0, r7
   b4868:	f000 ffe1 	bl	b582e <BlynkWidgetWrite>
   b486c:	e7d4      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b486e:	f107 0114 	add.w	r1, r7, #20
   b4872:	4638      	mov	r0, r7
   b4874:	f000 ffdb 	bl	b582e <BlynkWidgetWrite>
   b4878:	e7ce      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b487a:	f107 0114 	add.w	r1, r7, #20
   b487e:	4638      	mov	r0, r7
   b4880:	f000 ffd5 	bl	b582e <BlynkWidgetWrite>
   b4884:	e7c8      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b4886:	f107 0114 	add.w	r1, r7, #20
   b488a:	4638      	mov	r0, r7
   b488c:	f000 ffcf 	bl	b582e <BlynkWidgetWrite>
   b4890:	e7c2      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b4892:	f107 0114 	add.w	r1, r7, #20
   b4896:	4638      	mov	r0, r7
   b4898:	f000 ffc9 	bl	b582e <BlynkWidgetWrite>
   b489c:	e7bc      	b.n	b4818 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b489e:	bf00      	nop
   b48a0:	00736676 	.word	0x00736676
   b48a4:	00676264 	.word	0x00676264
   b48a8:	6e6f6361 	.word	0x6e6f6361

000b48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b48ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b48b0:	4604      	mov	r4, r0
   b48b2:	b08c      	sub	sp, #48	; 0x30
   b48b4:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b48b6:	f7ff fc83 	bl	b41c0 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b48ba:	7f63      	ldrb	r3, [r4, #29]
   b48bc:	2b02      	cmp	r3, #2
   b48be:	d01e      	beq.n	b48fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b48c0:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b48c2:	8b62      	ldrh	r2, [r4, #26]
   b48c4:	3301      	adds	r3, #1
   b48c6:	b2db      	uxtb	r3, r3
   b48c8:	7723      	strb	r3, [r4, #28]
   b48ca:	b9aa      	cbnz	r2, b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b48cc:	2b02      	cmp	r3, #2
   b48ce:	d813      	bhi.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b48d0:	6820      	ldr	r0, [r4, #0]
   b48d2:	f004 fbcf 	bl	b9074 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b48d6:	b1a8      	cbz	r0, b4904 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b48d8:	b925      	cbnz	r5, b48e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b48da:	6820      	ldr	r0, [r4, #0]
   b48dc:	f004 fca8 	bl	b9230 <_ZN9TCPClient9availableEv>
   b48e0:	2800      	cmp	r0, #0
   b48e2:	dd0f      	ble.n	b4904 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b48e4:	4620      	mov	r0, r4
   b48e6:	f7ff fe7d 	bl	b45e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b48ea:	2800      	cmp	r0, #0
   b48ec:	d1f5      	bne.n	b48da <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b48ee:	6820      	ldr	r0, [r4, #0]
   b48f0:	f004 fcf8 	bl	b92e4 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b48f4:	f000 ff9c 	bl	b5830 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b48f8:	7f23      	ldrb	r3, [r4, #28]
   b48fa:	3b01      	subs	r3, #1
   b48fc:	7723      	strb	r3, [r4, #28]
}
   b48fe:	b00c      	add	sp, #48	; 0x30
   b4900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4904:	f000 ff90 	bl	b5828 <_Z11BlynkMillisv>
   b4908:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b490a:	6820      	ldr	r0, [r4, #0]
   b490c:	f004 fbb2 	bl	b9074 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b4910:	7f67      	ldrb	r7, [r4, #29]
   b4912:	2f01      	cmp	r7, #1
   b4914:	4606      	mov	r6, r0
   b4916:	d124      	bne.n	b4962 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4918:	b920      	cbnz	r0, b4924 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b491a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b491c:	4620      	mov	r0, r4
   b491e:	f7ff fd27 	bl	b4370 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b4922:	e7e9      	b.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4924:	68e3      	ldr	r3, [r4, #12]
   b4926:	f24f 6218 	movw	r2, #63000	; 0xf618
   b492a:	1aeb      	subs	r3, r5, r3
   b492c:	4293      	cmp	r3, r2
   b492e:	d8f5      	bhi.n	b491c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4930:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4934:	4293      	cmp	r3, r2
   b4936:	d803      	bhi.n	b4940 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4938:	6923      	ldr	r3, [r4, #16]
   b493a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b493c:	4293      	cmp	r3, r2
   b493e:	d9db      	bls.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4940:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4942:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4946:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4948:	4293      	cmp	r3, r2
   b494a:	d9d5      	bls.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b494c:	2300      	movs	r3, #0
   b494e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4952:	9300      	str	r3, [sp, #0]
   b4954:	461a      	mov	r2, r3
   b4956:	2106      	movs	r1, #6
   b4958:	4620      	mov	r0, r4
   b495a:	f000 f84f 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b495e:	6165      	str	r5, [r4, #20]
                return false;
   b4960:	e7ca      	b.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b4962:	2f00      	cmp	r7, #0
   b4964:	d1c8      	bne.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4966:	6963      	ldr	r3, [r4, #20]
   b4968:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b496a:	b140      	cbz	r0, b497e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b496c:	f241 7270 	movw	r2, #6000	; 0x1770
   b4970:	4293      	cmp	r3, r2
   b4972:	d9c1      	bls.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b4974:	6820      	ldr	r0, [r4, #0]
   b4976:	f004 fcb5 	bl	b92e4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b497a:	7767      	strb	r7, [r4, #29]
            return false;
   b497c:	e7bc      	b.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b497e:	f241 3288 	movw	r2, #5000	; 0x1388
   b4982:	4293      	cmp	r3, r2
   b4984:	d9b8      	bls.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b4986:	6820      	ldr	r0, [r4, #0]
   b4988:	f004 fcac 	bl	b92e4 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b498c:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b4990:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b4994:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b4998:	f1be 0f00 	cmp.w	lr, #0
   b499c:	d01b      	beq.n	b49d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b499e:	4633      	mov	r3, r6
   b49a0:	4642      	mov	r2, r8
   b49a2:	4671      	mov	r1, lr
   b49a4:	4660      	mov	r0, ip
   b49a6:	f004 fae7 	bl	b8f78 <_ZN9TCPClient7connectEPKctm>
   b49aa:	2801      	cmp	r0, #1
   b49ac:	d1d7      	bne.n	b495e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b49ae:	6863      	ldr	r3, [r4, #4]
   b49b0:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b49b2:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b49b4:	4618      	mov	r0, r3
            msgIdOut = 1;
   b49b6:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b49b8:	f005 f9ca 	bl	b9d50 <strlen>
   b49bc:	2200      	movs	r2, #0
   b49be:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b49c2:	9b05      	ldr	r3, [sp, #20]
   b49c4:	9000      	str	r0, [sp, #0]
   b49c6:	462a      	mov	r2, r5
   b49c8:	211d      	movs	r1, #29
   b49ca:	4620      	mov	r0, r4
   b49cc:	f000 f816 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b49d0:	6923      	ldr	r3, [r4, #16]
   b49d2:	6163      	str	r3, [r4, #20]
            return true;
   b49d4:	e790      	b.n	b48f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b49d6:	4b08      	ldr	r3, [pc, #32]	; (b49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b49d8:	9306      	str	r3, [sp, #24]
   b49da:	f10c 0720 	add.w	r7, ip, #32
   b49de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b49e0:	ae07      	add	r6, sp, #28
   b49e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b49e4:	683b      	ldr	r3, [r7, #0]
   b49e6:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b49e8:	4642      	mov	r2, r8
   b49ea:	4673      	mov	r3, lr
   b49ec:	a906      	add	r1, sp, #24
   b49ee:	4660      	mov	r0, ip
   b49f0:	f004 fba2 	bl	b9138 <_ZN9TCPClient7connectE9IPAddresstm>
   b49f4:	e7d9      	b.n	b49aa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b49f6:	bf00      	nop
   b49f8:	000baa28 	.word	0x000baa28

000b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b49fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a00:	b083      	sub	sp, #12
   b4a02:	af00      	add	r7, sp, #0
   b4a04:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b4a06:	6800      	ldr	r0, [r0, #0]
   b4a08:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b4a0a:	4688      	mov	r8, r1
   b4a0c:	4616      	mov	r6, r2
   b4a0e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b4a10:	46eb      	mov	fp, sp
   b4a12:	f004 fb2f 	bl	b9074 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b4a16:	2800      	cmp	r0, #0
   b4a18:	d07f      	beq.n	b4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4a1a:	f1b8 0f1d 	cmp.w	r8, #29
   b4a1e:	d804      	bhi.n	b4a2a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b4a20:	4b4c      	ldr	r3, [pc, #304]	; (b4b54 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b4a22:	fa23 f308 	lsr.w	r3, r3, r8
   b4a26:	07db      	lsls	r3, r3, #31
   b4a28:	d402      	bmi.n	b4a30 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4a2a:	7f63      	ldrb	r3, [r4, #29]
   b4a2c:	2b01      	cmp	r3, #1
   b4a2e:	d174      	bne.n	b4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4a30:	b946      	cbnz	r6, b4a44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4a32:	8b66      	ldrh	r6, [r4, #26]
   b4a34:	b936      	cbnz	r6, b4a44 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4a36:	8b23      	ldrh	r3, [r4, #24]
   b4a38:	3301      	adds	r3, #1
   b4a3a:	b29b      	uxth	r3, r3
   b4a3c:	2b00      	cmp	r3, #0
   b4a3e:	d071      	beq.n	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4a40:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4a42:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4a44:	f1a8 030c 	sub.w	r3, r8, #12
   b4a48:	2b08      	cmp	r3, #8
   b4a4a:	d816      	bhi.n	b4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4a4c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4a50:	4293      	cmp	r3, r2
   b4a52:	bf38      	it	cc
   b4a54:	4613      	movcc	r3, r2
   b4a56:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4a5a:	f000 fee5 	bl	b5828 <_Z11BlynkMillisv>
   b4a5e:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4a62:	2800      	cmp	r0, #0
   b4a64:	db60      	blt.n	b4b28 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4a66:	2100      	movs	r1, #0
   b4a68:	4620      	mov	r0, r4
   b4a6a:	f7ff ff1f 	bl	b48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4a6e:	f000 fedb 	bl	b5828 <_Z11BlynkMillisv>
   b4a72:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4a76:	2800      	cmp	r0, #0
   b4a78:	daf5      	bge.n	b4a66 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a7a:	f1b9 0f00 	cmp.w	r9, #0
   b4a7e:	d05a      	beq.n	b4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4a80:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4a82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4a84:	2a00      	cmp	r2, #0
   b4a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4a88:	bf08      	it	eq
   b4a8a:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a8c:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4a90:	f10a 0307 	add.w	r3, sl, #7
   b4a94:	f023 0307 	bic.w	r3, r3, #7
   b4a98:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4a9e:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4aa2:	18ea      	adds	r2, r5, r3
   b4aa4:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4aa8:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4aaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4aae:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4ab2:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4ab6:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4aba:	f1b9 0f00 	cmp.w	r9, #0
   b4abe:	d03c      	beq.n	b4b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4ac0:	2d00      	cmp	r5, #0
   b4ac2:	d03a      	beq.n	b4b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4ac4:	462a      	mov	r2, r5
   b4ac6:	4649      	mov	r1, r9
   b4ac8:	f10d 0005 	add.w	r0, sp, #5
   b4acc:	f005 f8d0 	bl	b9c70 <memcpy>
        pos += length;
   b4ad0:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4ad4:	b13b      	cbz	r3, b4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4ad8:	b12b      	cbz	r3, b4ae6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4ada:	461a      	mov	r2, r3
   b4adc:	687b      	ldr	r3, [r7, #4]
   b4ade:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4ae0:	4418      	add	r0, r3
   b4ae2:	f005 f8c5 	bl	b9c70 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4ae6:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4ae8:	4555      	cmp	r5, sl
   b4aea:	d22a      	bcs.n	b4b42 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4aec:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4af0:	687b      	ldr	r3, [r7, #4]
   b4af2:	6820      	ldr	r0, [r4, #0]
   b4af4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4af8:	bf28      	it	cs
   b4afa:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4afe:	1959      	adds	r1, r3, r5
   b4b00:	f004 f96b 	bl	b8dda <_ZN9TCPClient5writeEPKhj>
   b4b04:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4b06:	2000      	movs	r0, #0
   b4b08:	f000 fe8c 	bl	b5824 <_Z10BlynkDelaym>
        if (w == 0) {
   b4b0c:	b9be      	cbnz	r6, b4b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4b0e:	6820      	ldr	r0, [r4, #0]
   b4b10:	f004 fbe8 	bl	b92e4 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4b14:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4b16:	f000 fe8b 	bl	b5830 <BlynkNoOpCbk>
}
   b4b1a:	370c      	adds	r7, #12
   b4b1c:	46dd      	mov	sp, fp
   b4b1e:	46bd      	mov	sp, r7
   b4b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4b24:	2301      	movs	r3, #1
   b4b26:	e78b      	b.n	b4a40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4b28:	7f21      	ldrb	r1, [r4, #28]
   b4b2a:	2900      	cmp	r1, #0
   b4b2c:	d1a5      	bne.n	b4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4b2e:	4620      	mov	r0, r4
   b4b30:	f7ff febc 	bl	b48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4b34:	e7a1      	b.n	b4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4b36:	2305      	movs	r3, #5
   b4b38:	e7a3      	b.n	b4a82 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4b3a:	2005      	movs	r0, #5
   b4b3c:	e7c9      	b.n	b4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4b3e:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4b40:	e7d2      	b.n	b4ae8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4b42:	d003      	beq.n	b4b4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4b44:	4620      	mov	r0, r4
   b4b46:	f7ff fc13 	bl	b4370 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4b4a:	e7e6      	b.n	b4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4b4c:	f000 fe6c 	bl	b5828 <_Z11BlynkMillisv>
   b4b50:	6120      	str	r0, [r4, #16]
   b4b52:	e7e2      	b.n	b4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4b54:	20000045 	.word	0x20000045

000b4b58 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4b58:	b500      	push	{lr}
   b4b5a:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4b5c:	ab04      	add	r3, sp, #16
   b4b5e:	2200      	movs	r2, #0
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	234f      	movs	r3, #79	; 0x4f
   b4b64:	9300      	str	r3, [sp, #0]
   b4b66:	9202      	str	r2, [sp, #8]
   b4b68:	4b03      	ldr	r3, [pc, #12]	; (b4b78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4b6a:	2111      	movs	r1, #17
   b4b6c:	f7ff ff46 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4b70:	b015      	add	sp, #84	; 0x54
   b4b72:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b76:	bf00      	nop
   b4b78:	000ba280 	.word	0x000ba280

000b4b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA45_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   b4b7c:	b530      	push	{r4, r5, lr}
   b4b7e:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   b4b82:	ab08      	add	r3, sp, #32
   b4b84:	2400      	movs	r4, #0
   b4b86:	4605      	mov	r5, r0
   b4b88:	9305      	str	r3, [sp, #20]
#if defined(BLYNK_TEMPLATE_ID)
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
   b4b8a:	a805      	add	r0, sp, #20
   b4b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b4b90:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b4b94:	f7ff fb39 	bl	b420a <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   b4b98:	9b06      	ldr	r3, [sp, #24]
   b4b9a:	3b01      	subs	r3, #1
   b4b9c:	9300      	str	r3, [sp, #0]
   b4b9e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4ba2:	9b05      	ldr	r3, [sp, #20]
   b4ba4:	4622      	mov	r2, r4
   b4ba6:	210e      	movs	r1, #14
   b4ba8:	4628      	mov	r0, r5
   b4baa:	f7ff ff27 	bl	b49fc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   b4bae:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   b4bb2:	bd30      	pop	{r4, r5, pc}

000b4bb4 <loop>:
{
   b4bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  unsigned int proxValue = proximitySensor.getProximity();
   b4bb8:	487d      	ldr	r0, [pc, #500]	; (b4db0 <loop+0x1fc>)
{
   b4bba:	b08b      	sub	sp, #44	; 0x2c
  unsigned int proxValue = proximitySensor.getProximity();
   b4bbc:	f000 fbd4 	bl	b5368 <_ZN8VCNL404012getProximityEv>
  Blynk.run();
   b4bc0:	2100      	movs	r1, #0
  unsigned int proxValue = proximitySensor.getProximity();
   b4bc2:	4604      	mov	r4, r0
  Blynk.run();
   b4bc4:	487b      	ldr	r0, [pc, #492]	; (b4db4 <loop+0x200>)
   b4bc6:	f7ff fe71 	bl	b48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  if (authetification == true)
   b4bca:	4b7b      	ldr	r3, [pc, #492]	; (b4db8 <loop+0x204>)
   b4bcc:	781b      	ldrb	r3, [r3, #0]
   b4bce:	2b00      	cmp	r3, #0
   b4bd0:	f000 80e4 	beq.w	b4d9c <loop+0x1e8>
    getFingerprintIDez();
   b4bd4:	f7ff fb88 	bl	b42e8 <_Z18getFingerprintIDezv>
    if (proxValue > 4)
   b4bd8:	2c04      	cmp	r4, #4
   b4bda:	4d78      	ldr	r5, [pc, #480]	; (b4dbc <loop+0x208>)
   b4bdc:	d903      	bls.n	b4be6 <loop+0x32>
      if (lock == false)
   b4bde:	782b      	ldrb	r3, [r5, #0]
   b4be0:	b90b      	cbnz	r3, b4be6 <loop+0x32>
        OpenDoor();
   b4be2:	f7ff fb71 	bl	b42c8 <_Z8OpenDoorv>
    if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD)
   b4be6:	4c76      	ldr	r4, [pc, #472]	; (b4dc0 <loop+0x20c>)
   b4be8:	4f76      	ldr	r7, [pc, #472]	; (b4dc4 <loop+0x210>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4bea:	f000 fec9 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
   b4bee:	f000 fec7 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
   b4bf2:	6823      	ldr	r3, [r4, #0]
   b4bf4:	1ac0      	subs	r0, r0, r3
   b4bf6:	2863      	cmp	r0, #99	; 0x63
   b4bf8:	d91b      	bls.n	b4c32 <loop+0x7e>
   b4bfa:	f000 fec1 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
      if (accel.getSample(sample))
   b4bfe:	a905      	add	r1, sp, #20
      lastPrintSample = millis();
   b4c00:	6020      	str	r0, [r4, #0]
      if (accel.getSample(sample))
   b4c02:	4871      	ldr	r0, [pc, #452]	; (b4dc8 <loop+0x214>)
   b4c04:	f000 faf0 	bl	b51e8 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b4c08:	b3a8      	cbz	r0, b4c76 <loop+0xc2>
        x = sample.x;
   b4c0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   b4c0e:	603b      	str	r3, [r7, #0]
        Serial.println(x);
   b4c10:	f004 fc88 	bl	b9524 <_Z16_fetch_usbserialv>
   b4c14:	683c      	ldr	r4, [r7, #0]
        if (n < 0 && base == 10) {
   b4c16:	2c00      	cmp	r4, #0
   b4c18:	4606      	mov	r6, r0
   b4c1a:	da2a      	bge.n	b4c72 <loop+0xbe>
            t = print('-');
   b4c1c:	212d      	movs	r1, #45	; 0x2d
   b4c1e:	f003 fe31 	bl	b8884 <_ZN5Print5printEc>
            val = -n;
   b4c22:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4c24:	220a      	movs	r2, #10
   b4c26:	4630      	mov	r0, r6
   b4c28:	f003 fe45 	bl	b88b6 <_ZN5Print11printNumberEmh>
        n += println();
   b4c2c:	4630      	mov	r0, r6
   b4c2e:	f003 fe2c 	bl	b888a <_ZN5Print7printlnEv>
    if (x > 4000)
   b4c32:	683b      	ldr	r3, [r7, #0]
   b4c34:	f642 62e0 	movw	r2, #12000	; 0x2ee0
   b4c38:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
   b4c3c:	4293      	cmp	r3, r2
   b4c3e:	d920      	bls.n	b4c82 <loop+0xce>
      if (lock == true)
   b4c40:	782b      	ldrb	r3, [r5, #0]
   b4c42:	b1f3      	cbz	r3, b4c82 <loop+0xce>
        digitalWrite(light, HIGH);
   b4c44:	2101      	movs	r1, #1
   b4c46:	2007      	movs	r0, #7
   b4c48:	f004 fdf7 	bl	b983a <digitalWrite>
        Blynk.notify("Might have someone who broke into your house");
   b4c4c:	495f      	ldr	r1, [pc, #380]	; (b4dcc <loop+0x218>)
   b4c4e:	4859      	ldr	r0, [pc, #356]	; (b4db4 <loop+0x200>)
   b4c50:	f7ff ff94 	bl	b4b7c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA45_cEEvRKT_>
    if (BLE.connected())
   b4c54:	f001 fe08 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4c58:	f001 fe96 	bl	b6988 <_ZNK8particle14BleLocalDevice9connectedEv>
   b4c5c:	4604      	mov	r4, r0
   b4c5e:	b1a8      	cbz	r0, b4c8c <loop+0xd8>
      RGB.color(255, 255, 0);
   b4c60:	21ff      	movs	r1, #255	; 0xff
      lock = false;
   b4c62:	2200      	movs	r2, #0
      RGB.color(255, 255, 0);
   b4c64:	4608      	mov	r0, r1
      lock = false;
   b4c66:	702a      	strb	r2, [r5, #0]
}
   b4c68:	b00b      	add	sp, #44	; 0x2c
   b4c6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      RGB.color(255, 255, 0);
   b4c6e:	f003 be81 	b.w	b8974 <_ZN8RGBClass5colorEiii>
            val = n;
   b4c72:	4621      	mov	r1, r4
   b4c74:	e7d6      	b.n	b4c24 <loop+0x70>
        Serial.println("no sample");
   b4c76:	f004 fc55 	bl	b9524 <_Z16_fetch_usbserialv>
   b4c7a:	4955      	ldr	r1, [pc, #340]	; (b4dd0 <loop+0x21c>)
   b4c7c:	f003 fe11 	bl	b88a2 <_ZN5Print7printlnEPKc>
   b4c80:	e7d7      	b.n	b4c32 <loop+0x7e>
        digitalWrite(light, LOW);
   b4c82:	2100      	movs	r1, #0
   b4c84:	2007      	movs	r0, #7
   b4c86:	f004 fdd8 	bl	b983a <digitalWrite>
   b4c8a:	e7e3      	b.n	b4c54 <loop+0xa0>
      lock = true;
   b4c8c:	2301      	movs	r3, #1
   b4c8e:	702b      	strb	r3, [r5, #0]
      RGB.color(255, 0, 0);
   b4c90:	4602      	mov	r2, r0
   b4c92:	4601      	mov	r1, r0
      if (millis() - lastScan >= SCAN_PERIOD_MS)
   b4c94:	4d4f      	ldr	r5, [pc, #316]	; (b4dd4 <loop+0x220>)
      RGB.color(255, 0, 0);
   b4c96:	20ff      	movs	r0, #255	; 0xff
   b4c98:	f003 fe6c 	bl	b8974 <_ZN8RGBClass5colorEiii>
   b4c9c:	f000 fe70 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
      if (millis() - lastScan >= SCAN_PERIOD_MS)
   b4ca0:	682b      	ldr	r3, [r5, #0]
   b4ca2:	1ac0      	subs	r0, r0, r3
   b4ca4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b4ca8:	d346      	bcc.n	b4d38 <loop+0x184>
   b4caa:	f000 fe69 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
        lastScan = millis();
   b4cae:	6028      	str	r0, [r5, #0]
        size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b4cb0:	f001 fdda 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cb4:	4948      	ldr	r1, [pc, #288]	; (b4dd8 <loop+0x224>)
   b4cb6:	2214      	movs	r2, #20
   b4cb8:	f001 feb0 	bl	b6a1c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
        if (count > 0)
   b4cbc:	4605      	mov	r5, r0
   b4cbe:	2800      	cmp	r0, #0
   b4cc0:	d03a      	beq.n	b4d38 <loop+0x184>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4cc2:	4f45      	ldr	r7, [pc, #276]	; (b4dd8 <loop+0x224>)
            if (svcCount > 0 && foundServiceUuid == serviceUuid)
   b4cc4:	f8df 9134 	ldr.w	r9, [pc, #308]	; b4dfc <loop+0x248>
            BleUuid foundServiceUuid;
   b4cc8:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
   b4ccc:	00b6      	lsls	r6, r6, #2
   b4cce:	f106 0808 	add.w	r8, r6, #8
   b4cd2:	a805      	add	r0, sp, #20
   b4cd4:	44b8      	add	r8, r7
   b4cd6:	f001 fa91 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
            size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4cda:	2201      	movs	r2, #1
   b4cdc:	a905      	add	r1, sp, #20
   b4cde:	4640      	mov	r0, r8
   b4ce0:	f002 fd1a 	bl	b7718 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid)
   b4ce4:	b320      	cbz	r0, b4d30 <loop+0x17c>
   b4ce6:	4649      	mov	r1, r9
   b4ce8:	a805      	add	r0, sp, #20
   b4cea:	f001 fae2 	bl	b62b2 <_ZNK8particle7BleUuideqERKS0_>
   b4cee:	b1f8      	cbz	r0, b4d30 <loop+0x17c>
              if (Serial.println(String(scanResults[ii].advertisingData().deviceName()).equals("Gaming")))
   b4cf0:	f004 fc18 	bl	b9524 <_Z16_fetch_usbserialv>
   b4cf4:	4641      	mov	r1, r8
   b4cf6:	4604      	mov	r4, r0
   b4cf8:	a801      	add	r0, sp, #4
   b4cfa:	f001 fc19 	bl	b6530 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
   b4cfe:	4937      	ldr	r1, [pc, #220]	; (b4ddc <loop+0x228>)
   b4d00:	a801      	add	r0, sp, #4
   b4d02:	f004 f838 	bl	b8d76 <_ZNK6String6equalsEPKc>
        return printNumber(val, base) + t;
   b4d06:	220a      	movs	r2, #10
   b4d08:	4601      	mov	r1, r0
   b4d0a:	4620      	mov	r0, r4
   b4d0c:	f003 fdd3 	bl	b88b6 <_ZN5Print11printNumberEmh>
   b4d10:	4605      	mov	r5, r0
        n += println();
   b4d12:	4620      	mov	r0, r4
   b4d14:	f003 fdb9 	bl	b888a <_ZN5Print7printlnEv>
   b4d18:	1944      	adds	r4, r0, r5
   b4d1a:	a801      	add	r0, sp, #4
   b4d1c:	f003 ff20 	bl	b8b60 <_ZN6StringD1Ev>
   b4d20:	4d2f      	ldr	r5, [pc, #188]	; (b4de0 <loop+0x22c>)
   b4d22:	b964      	cbnz	r4, b4d3e <loop+0x18a>
                Serial.println("Device not found");
   b4d24:	f004 fbfe 	bl	b9524 <_Z16_fetch_usbserialv>
   b4d28:	492e      	ldr	r1, [pc, #184]	; (b4de4 <loop+0x230>)
   b4d2a:	f003 fdba 	bl	b88a2 <_ZN5Print7printlnEPKc>
   b4d2e:	e025      	b.n	b4d7c <loop+0x1c8>
          for (uint8_t ii = 0; ii < count; ii++)
   b4d30:	3401      	adds	r4, #1
   b4d32:	b2e4      	uxtb	r4, r4
   b4d34:	42a5      	cmp	r5, r4
   b4d36:	d8c7      	bhi.n	b4cc8 <loop+0x114>
}
   b4d38:	b00b      	add	sp, #44	; 0x2c
   b4d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                Serial.println("Device Found!");
   b4d3e:	f004 fbf1 	bl	b9524 <_Z16_fetch_usbserialv>
   b4d42:	4929      	ldr	r1, [pc, #164]	; (b4de8 <loop+0x234>)
   b4d44:	f003 fdad 	bl	b88a2 <_ZN5Print7printlnEPKc>
                peer = BLE.connect(scanResults[ii].address());
   b4d48:	f001 fd8e 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d4c:	2301      	movs	r3, #1
   b4d4e:	4601      	mov	r1, r0
   b4d50:	19ba      	adds	r2, r7, r6
   b4d52:	a801      	add	r0, sp, #4
   b4d54:	f003 f918 	bl	b7f88 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4d58:	9b01      	ldr	r3, [sp, #4]
   b4d5a:	9c02      	ldr	r4, [sp, #8]
   b4d5c:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b4d5e:	686b      	ldr	r3, [r5, #4]
   b4d60:	429c      	cmp	r4, r3
   b4d62:	d008      	beq.n	b4d76 <loop+0x1c2>
	    if (__tmp != 0)
   b4d64:	b114      	cbz	r4, b4d6c <loop+0x1b8>
    { ++_M_use_count; }
   b4d66:	6863      	ldr	r3, [r4, #4]
   b4d68:	3301      	adds	r3, #1
   b4d6a:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b4d6c:	6868      	ldr	r0, [r5, #4]
   b4d6e:	b108      	cbz	r0, b4d74 <loop+0x1c0>
	      _M_pi->_M_release();
   b4d70:	f7ff fa12 	bl	b4198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4d74:	606c      	str	r4, [r5, #4]
   b4d76:	a801      	add	r0, sp, #4
   b4d78:	f001 fec7 	bl	b6b0a <_ZN8particle13BlePeerDeviceD1Ev>
              if (peer.connected())
   b4d7c:	4818      	ldr	r0, [pc, #96]	; (b4de0 <loop+0x22c>)
   b4d7e:	f001 fce5 	bl	b674c <_ZNK8particle13BlePeerDevice9connectedEv>
   b4d82:	2800      	cmp	r0, #0
   b4d84:	d0d8      	beq.n	b4d38 <loop+0x184>
                peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b4d86:	4a19      	ldr	r2, [pc, #100]	; (b4dec <loop+0x238>)
   b4d88:	4919      	ldr	r1, [pc, #100]	; (b4df0 <loop+0x23c>)
   b4d8a:	4815      	ldr	r0, [pc, #84]	; (b4de0 <loop+0x22c>)
   b4d8c:	f002 fd90 	bl	b78b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b4d90:	4a18      	ldr	r2, [pc, #96]	; (b4df4 <loop+0x240>)
   b4d92:	4919      	ldr	r1, [pc, #100]	; (b4df8 <loop+0x244>)
   b4d94:	4812      	ldr	r0, [pc, #72]	; (b4de0 <loop+0x22c>)
   b4d96:	f002 fd8b 	bl	b78b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
              break;
   b4d9a:	e7cd      	b.n	b4d38 <loop+0x184>
    if (proxValue > 4)
   b4d9c:	2c04      	cmp	r4, #4
   b4d9e:	d901      	bls.n	b4da4 <loop+0x1f0>
      OpenDoor();
   b4da0:	f7ff fa92 	bl	b42c8 <_Z8OpenDoorv>
    delay(10);
   b4da4:	200a      	movs	r0, #10
}
   b4da6:	b00b      	add	sp, #44	; 0x2c
   b4da8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    delay(10);
   b4dac:	f001 b8bc 	b.w	b5f28 <delay>
   b4db0:	2003e3e4 	.word	0x2003e3e4
   b4db4:	2003e2f0 	.word	0x2003e2f0
   b4db8:	2003e274 	.word	0x2003e274
   b4dbc:	2003e276 	.word	0x2003e276
   b4dc0:	2003e3c4 	.word	0x2003e3c4
   b4dc4:	2003e6b8 	.word	0x2003e6b8
   b4dc8:	2003e388 	.word	0x2003e388
   b4dcc:	000ba0fe 	.word	0x000ba0fe
   b4dd0:	000ba0f4 	.word	0x000ba0f4
   b4dd4:	2003e3c8 	.word	0x2003e3c8
   b4dd8:	2003e3e8 	.word	0x2003e3e8
   b4ddc:	000ba12b 	.word	0x000ba12b
   b4de0:	2003e3cc 	.word	0x2003e3cc
   b4de4:	000ba140 	.word	0x000ba140
   b4de8:	000ba132 	.word	0x000ba132
   b4dec:	2003e374 	.word	0x2003e374
   b4df0:	2003e3dc 	.word	0x2003e3dc
   b4df4:	2003e360 	.word	0x2003e360
   b4df8:	2003e3d4 	.word	0x2003e3d4
   b4dfc:	2003e310 	.word	0x2003e310

000b4e00 <setup>:
{
   b4e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pinMode(door, OUTPUT);
   b4e04:	2101      	movs	r1, #1
{
   b4e06:	b094      	sub	sp, #80	; 0x50
  pinMode(door, OUTPUT);
   b4e08:	2005      	movs	r0, #5
   b4e0a:	f004 fd05 	bl	b9818 <pinMode>
  pinMode(light, OUTPUT);
   b4e0e:	2101      	movs	r1, #1
   b4e10:	2007      	movs	r0, #7
   b4e12:	f004 fd01 	bl	b9818 <pinMode>
  Blynk.begin("CbShEOKHpQX7fxpA0y7UI1-ilI63psIr", IPAddress(167, 172, 234, 162), 8080);
   b4e16:	23a2      	movs	r3, #162	; 0xa2
   b4e18:	22ac      	movs	r2, #172	; 0xac
   b4e1a:	21a7      	movs	r1, #167	; 0xa7
   b4e1c:	9300      	str	r3, [sp, #0]
   b4e1e:	a802      	add	r0, sp, #8
   b4e20:	23ea      	movs	r3, #234	; 0xea
   b4e22:	f003 fc2d 	bl	b8680 <_ZN9IPAddressC1Ehhhh>
   b4e26:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4e28:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4e2c:	f000 fcfa 	bl	b5824 <_Z10BlynkDelaym>
   b4e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4e32:	af09      	add	r7, sp, #36	; 0x24
   b4e34:	c70f      	stmia	r7!, {r0, r1, r2, r3}
        this->authkey = auth;
   b4e36:	4d43      	ldr	r5, [pc, #268]	; (b4f44 <setup+0x144>)
   b4e38:	6823      	ldr	r3, [r4, #0]
   b4e3a:	703b      	strb	r3, [r7, #0]
   b4e3c:	4b42      	ldr	r3, [pc, #264]	; (b4f48 <setup+0x148>)
   b4e3e:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4e40:	f000 fcf2 	bl	b5828 <_Z11BlynkMillisv>
   b4e44:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4e48:	3808      	subs	r0, #8
   b4e4a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4e4e:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4e52:	6168      	str	r0, [r5, #20]
   b4e54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4e58:	ae0f      	add	r6, sp, #60	; 0x3c
   b4e5a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4e5c:	682c      	ldr	r4, [r5, #0]
   b4e5e:	683b      	ldr	r3, [r7, #0]
   b4e60:	7033      	strb	r3, [r6, #0]
        domain = NULL;
   b4e62:	f04f 0800 	mov.w	r8, #0
        port = p;
   b4e66:	f641 7390 	movw	r3, #8080	; 0x1f90
        domain = NULL;
   b4e6a:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
        port = p;
   b4e6e:	8723      	strh	r3, [r4, #56]	; 0x38
   b4e70:	af0f      	add	r7, sp, #60	; 0x3c
   b4e72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b4e74:	3420      	adds	r4, #32
   b4e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e78:	6833      	ldr	r3, [r6, #0]
   b4e7a:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4e7c:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4e80:	6828      	ldr	r0, [r5, #0]
   b4e82:	f004 fa2f 	bl	b92e4 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4e86:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4e8a:	f000 fccd 	bl	b5828 <_Z11BlynkMillisv>
   b4e8e:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4e90:	7f6b      	ldrb	r3, [r5, #29]
   b4e92:	2b01      	cmp	r3, #1
   b4e94:	d00c      	beq.n	b4eb0 <setup+0xb0>
               (BlynkMillis() - started < timeout))
   b4e96:	f000 fcc7 	bl	b5828 <_Z11BlynkMillisv>
   b4e9a:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4e9c:	42b0      	cmp	r0, r6
   b4e9e:	d804      	bhi.n	b4eaa <setup+0xaa>
            run();
   b4ea0:	2100      	movs	r1, #0
   b4ea2:	4628      	mov	r0, r5
   b4ea4:	f7ff fd02 	bl	b48ac <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4ea8:	e7f2      	b.n	b4e90 <setup+0x90>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4eaa:	7f6b      	ldrb	r3, [r5, #29]
   b4eac:	2b01      	cmp	r3, #1
   b4eae:	d1e7      	bne.n	b4e80 <setup+0x80>
  Serial.begin(9600);
   b4eb0:	f004 fb38 	bl	b9524 <_Z16_fetch_usbserialv>
   b4eb4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4eb8:	f004 fb28 	bl	b950c <_ZN9USBSerial5beginEl>
  finger.begin(57600);
   b4ebc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   b4ec0:	4822      	ldr	r0, [pc, #136]	; (b4f4c <setup+0x14c>)
   b4ec2:	f000 fb65 	bl	b5590 <_ZN20Adafruit_Fingerprint5beginEt>
  BLE.on();
   b4ec6:	f001 fccf 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4eca:	f001 fd17 	bl	b68fc <_ZNK8particle14BleLocalDevice2onEv>
  RGB.control(true);
   b4ece:	2001      	movs	r0, #1
   b4ed0:	f003 fd40 	bl	b8954 <_ZN8RGBClass7controlEb>
  if (finger.verifyPassword())
   b4ed4:	481d      	ldr	r0, [pc, #116]	; (b4f4c <setup+0x14c>)
   b4ed6:	f000 fc08 	bl	b56ea <_ZN20Adafruit_Fingerprint14verifyPasswordEv>
   b4eda:	b328      	cbz	r0, b4f28 <setup+0x128>
    Serial.println("Found fingerprint sensor!");
   b4edc:	f004 fb22 	bl	b9524 <_Z16_fetch_usbserialv>
   b4ee0:	491b      	ldr	r1, [pc, #108]	; (b4f50 <setup+0x150>)
   b4ee2:	f003 fcde 	bl	b88a2 <_ZN5Print7printlnEPKc>
  Serial.println("Waiting for valid finger...");
   b4ee6:	f004 fb1d 	bl	b9524 <_Z16_fetch_usbserialv>
   b4eea:	491a      	ldr	r1, [pc, #104]	; (b4f54 <setup+0x154>)
   b4eec:	f003 fcd9 	bl	b88a2 <_ZN5Print7printlnEPKc>
  Wire.begin();
   b4ef0:	f004 fd24 	bl	b993c <_Z19__fetch_global_Wirev>
   b4ef4:	f003 fb08 	bl	b8508 <_ZN7TwoWire5beginEv>
  LIS3DHConfig config;
   b4ef8:	a80e      	add	r0, sp, #56	; 0x38
   b4efa:	f000 f92f 	bl	b515c <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
   b4efe:	2150      	movs	r1, #80	; 0x50
   b4f00:	a80e      	add	r0, sp, #56	; 0x38
   b4f02:	f000 f938 	bl	b5176 <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
   b4f06:	a90e      	add	r1, sp, #56	; 0x38
   b4f08:	4813      	ldr	r0, [pc, #76]	; (b4f58 <setup+0x158>)
   b4f0a:	f000 f997 	bl	b523c <_ZN6LIS3DH5setupER12LIS3DHConfig>
  if (proximitySensor.begin() == false)
   b4f0e:	f004 fd15 	bl	b993c <_Z19__fetch_global_Wirev>
   b4f12:	4601      	mov	r1, r0
   b4f14:	4811      	ldr	r0, [pc, #68]	; (b4f5c <setup+0x15c>)
   b4f16:	f000 fb08 	bl	b552a <_ZN8VCNL40405beginER7TwoWire>
   b4f1a:	b958      	cbnz	r0, b4f34 <setup+0x134>
    Serial.println("Device not found. Please check wiring.");
   b4f1c:	f004 fb02 	bl	b9524 <_Z16_fetch_usbserialv>
   b4f20:	490f      	ldr	r1, [pc, #60]	; (b4f60 <setup+0x160>)
   b4f22:	f003 fcbe 	bl	b88a2 <_ZN5Print7printlnEPKc>
    while (1)
   b4f26:	e7fe      	b.n	b4f26 <setup+0x126>
    Serial.println("Did not find fingerprint sensor :(");
   b4f28:	f004 fafc 	bl	b9524 <_Z16_fetch_usbserialv>
   b4f2c:	490d      	ldr	r1, [pc, #52]	; (b4f64 <setup+0x164>)
   b4f2e:	f003 fcb8 	bl	b88a2 <_ZN5Print7printlnEPKc>
    while (1)
   b4f32:	e7fe      	b.n	b4f32 <setup+0x132>
  peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   b4f34:	4a0c      	ldr	r2, [pc, #48]	; (b4f68 <setup+0x168>)
   b4f36:	490d      	ldr	r1, [pc, #52]	; (b4f6c <setup+0x16c>)
   b4f38:	4610      	mov	r0, r2
   b4f3a:	f002 fce3 	bl	b7904 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
}
   b4f3e:	b014      	add	sp, #80	; 0x50
   b4f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4f44:	2003e2f0 	.word	0x2003e2f0
   b4f48:	000ba151 	.word	0x000ba151
   b4f4c:	2003e3b0 	.word	0x2003e3b0
   b4f50:	000ba172 	.word	0x000ba172
   b4f54:	000ba18c 	.word	0x000ba18c
   b4f58:	2003e388 	.word	0x2003e388
   b4f5c:	2003e3e4 	.word	0x2003e3e4
   b4f60:	000ba1cb 	.word	0x000ba1cb
   b4f64:	000ba1a8 	.word	0x000ba1a8
   b4f68:	2003e3dc 	.word	0x2003e3dc
   b4f6c:	000b40cd 	.word	0x000b40cd

000b4f70 <_GLOBAL__sub_I_Blynk>:
   b4f70:	b570      	push	{r4, r5, r6, lr}
        : domain(NULL), port(0)
   b4f72:	4c36      	ldr	r4, [pc, #216]	; (b504c <_GLOBAL__sub_I_Blynk+0xdc>)
   b4f74:	4620      	mov	r0, r4
   b4f76:	f004 f9ff 	bl	b9378 <_ZN9TCPClientC1Ev>
   b4f7a:	f104 001c 	add.w	r0, r4, #28
   b4f7e:	f003 fb3b 	bl	b85f8 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4f82:	4a33      	ldr	r2, [pc, #204]	; (b5050 <_GLOBAL__sub_I_Blynk+0xe0>)
   b4f84:	2300      	movs	r3, #0
   b4f86:	e9c2 4300 	strd	r4, r3, [r2]
   b4f8a:	6363      	str	r3, [r4, #52]	; 0x34
   b4f8c:	8723      	strh	r3, [r4, #56]	; 0x38
   b4f8e:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b4f92:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b4f96:	6193      	str	r3, [r2, #24]
   b4f98:	8393      	strh	r3, [r2, #28]
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial1);
   b4f9a:	f004 fd0f 	bl	b99bc <_Z22__fetch_global_Serial1v>
   b4f9e:	4601      	mov	r1, r0
   b4fa0:	482c      	ldr	r0, [pc, #176]	; (b5054 <_GLOBAL__sub_I_Blynk+0xe4>)
   b4fa2:	4c2d      	ldr	r4, [pc, #180]	; (b5058 <_GLOBAL__sub_I_Blynk+0xe8>)
   b4fa4:	f000 faec 	bl	b5580 <_ZN20Adafruit_FingerprintC1EP11USARTSerial>
VCNL4040 proximitySensor;
   b4fa8:	482c      	ldr	r0, [pc, #176]	; (b505c <_GLOBAL__sub_I_Blynk+0xec>)
   b4faa:	f000 f9a3 	bl	b52f4 <_ZN8VCNL4040C1Ev>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fae:	492c      	ldr	r1, [pc, #176]	; (b5060 <_GLOBAL__sub_I_Blynk+0xf0>)
   b4fb0:	482c      	ldr	r0, [pc, #176]	; (b5064 <_GLOBAL__sub_I_Blynk+0xf4>)
   b4fb2:	f001 f9fd 	bl	b63b0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fb6:	492c      	ldr	r1, [pc, #176]	; (b5068 <_GLOBAL__sub_I_Blynk+0xf8>)
   b4fb8:	482c      	ldr	r0, [pc, #176]	; (b506c <_GLOBAL__sub_I_Blynk+0xfc>)
   b4fba:	f001 f9f9 	bl	b63b0 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4fbe:	492c      	ldr	r1, [pc, #176]	; (b5070 <_GLOBAL__sub_I_Blynk+0x100>)
   b4fc0:	482c      	ldr	r0, [pc, #176]	; (b5074 <_GLOBAL__sub_I_Blynk+0x104>)
   b4fc2:	f001 f9f5 	bl	b63b0 <_ZN8particle7BleUuidC1EPKc>
   b4fc6:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b4fc8:	267f      	movs	r6, #127	; 0x7f
   b4fca:	4620      	mov	r0, r4
   b4fcc:	f001 f90b 	bl	b61e6 <_ZN8particle10BleAddressC1Ev>
   b4fd0:	f104 0008 	add.w	r0, r4, #8
   b4fd4:	f002 f8b3 	bl	b713e <_ZN8particle18BleAdvertisingDataC1Ev>
   b4fd8:	f104 0014 	add.w	r0, r4, #20
   b4fdc:	f002 f8af 	bl	b713e <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b4fe0:	3d01      	subs	r5, #1
   b4fe2:	f884 6020 	strb.w	r6, [r4, #32]
   b4fe6:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b4fea:	d1ee      	bne.n	b4fca <_GLOBAL__sub_I_Blynk+0x5a>
BleCharacteristic peerTxCharacteristic;
   b4fec:	4822      	ldr	r0, [pc, #136]	; (b5078 <_GLOBAL__sub_I_Blynk+0x108>)

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   b4fee:	4c23      	ldr	r4, [pc, #140]	; (b507c <_GLOBAL__sub_I_Blynk+0x10c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4ff0:	4e23      	ldr	r6, [pc, #140]	; (b5080 <_GLOBAL__sub_I_Blynk+0x110>)
   b4ff2:	f001 fb0d 	bl	b6610 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b4ff6:	4823      	ldr	r0, [pc, #140]	; (b5084 <_GLOBAL__sub_I_Blynk+0x114>)
   b4ff8:	f001 fb0a 	bl	b6610 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b4ffc:	4822      	ldr	r0, [pc, #136]	; (b5088 <_GLOBAL__sub_I_Blynk+0x118>)
   b4ffe:	f001 fb83 	bl	b6708 <_ZN8particle13BlePeerDeviceC1Ev>
   b5002:	2108      	movs	r1, #8
   b5004:	4620      	mov	r0, r4
   b5006:	f000 f8c1 	bl	b518c <_ZN6LIS3DHC1Ei>
   b500a:	4b20      	ldr	r3, [pc, #128]	; (b508c <_GLOBAL__sub_I_Blynk+0x11c>)
   b500c:	6023      	str	r3, [r4, #0]
   b500e:	7833      	ldrb	r3, [r6, #0]
   b5010:	f3bf 8f5b 	dmb	ish
   b5014:	07db      	lsls	r3, r3, #31
   b5016:	d40a      	bmi.n	b502e <_GLOBAL__sub_I_Blynk+0xbe>
   b5018:	4630      	mov	r0, r6
   b501a:	f7ff f84d 	bl	b40b8 <__cxa_guard_acquire>
   b501e:	b130      	cbz	r0, b502e <_GLOBAL__sub_I_Blynk+0xbe>
   b5020:	481b      	ldr	r0, [pc, #108]	; (b5090 <_GLOBAL__sub_I_Blynk+0x120>)
   b5022:	4629      	mov	r1, r5
   b5024:	f003 fcc6 	bl	b89b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5028:	4630      	mov	r0, r6
   b502a:	f7ff f84a 	bl	b40c2 <__cxa_guard_release>
   b502e:	4b18      	ldr	r3, [pc, #96]	; (b5090 <_GLOBAL__sub_I_Blynk+0x120>)
   b5030:	60e3      	str	r3, [r4, #12]
   b5032:	2303      	movs	r3, #3
   b5034:	6123      	str	r3, [r4, #16]
   b5036:	2300      	movs	r3, #0
   b5038:	7523      	strb	r3, [r4, #20]
      dataMode_{dataMode}
   b503a:	7723      	strb	r3, [r4, #28]
   b503c:	4b15      	ldr	r3, [pc, #84]	; (b5094 <_GLOBAL__sub_I_Blynk+0x124>)
   b503e:	4a16      	ldr	r2, [pc, #88]	; (b5098 <_GLOBAL__sub_I_Blynk+0x128>)
   b5040:	6223      	str	r3, [r4, #32]
   b5042:	2301      	movs	r3, #1
   b5044:	61a2      	str	r2, [r4, #24]
   b5046:	84a3      	strh	r3, [r4, #36]	; 0x24
   b5048:	bd70      	pop	{r4, r5, r6, pc}
   b504a:	bf00      	nop
   b504c:	2003e324 	.word	0x2003e324
   b5050:	2003e2f0 	.word	0x2003e2f0
   b5054:	2003e3b0 	.word	0x2003e3b0
   b5058:	2003e3e8 	.word	0x2003e3e8
   b505c:	2003e3e4 	.word	0x2003e3e4
   b5060:	000ba1f2 	.word	0x000ba1f2
   b5064:	2003e310 	.word	0x2003e310
   b5068:	000ba217 	.word	0x000ba217
   b506c:	2003e360 	.word	0x2003e360
   b5070:	000ba23c 	.word	0x000ba23c
   b5074:	2003e374 	.word	0x2003e374
   b5078:	2003e3dc 	.word	0x2003e3dc
   b507c:	2003e388 	.word	0x2003e388
   b5080:	2003e2e4 	.word	0x2003e2e4
   b5084:	2003e3d4 	.word	0x2003e3d4
   b5088:	2003e3cc 	.word	0x2003e3cc
   b508c:	000ba308 	.word	0x000ba308
   b5090:	2003e2e8 	.word	0x2003e2e8
   b5094:	00989680 	.word	0x00989680
   b5098:	000ba26c 	.word	0x000ba26c

000b509c <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   b509c:	4770      	bx	lr

000b509e <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   b509e:	b510      	push	{r4, lr}
}
   b50a0:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   b50a2:	4604      	mov	r4, r0
}
   b50a4:	f7fe fff9 	bl	b409a <_ZdlPvj>
   b50a8:	4620      	mov	r0, r4
   b50aa:	bd10      	pop	{r4, pc}

000b50ac <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   b50ac:	b510      	push	{r4, lr}
   b50ae:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   b50b0:	f100 0118 	add.w	r1, r0, #24
   b50b4:	68c0      	ldr	r0, [r0, #12]
   b50b6:	f003 fcb5 	bl	b8a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   b50ba:	8a20      	ldrh	r0, [r4, #16]
   b50bc:	2100      	movs	r1, #0
}
   b50be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   b50c2:	f004 bbba 	b.w	b983a <digitalWrite>

000b50c6 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   b50c6:	b510      	push	{r4, lr}
   b50c8:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   b50ca:	2101      	movs	r1, #1
   b50cc:	8a00      	ldrh	r0, [r0, #16]
   b50ce:	f004 fbb4 	bl	b983a <digitalWrite>

	spi.endTransaction();
   b50d2:	68e0      	ldr	r0, [r4, #12]
}
   b50d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   b50d8:	f003 bc8a 	b.w	b89f0 <_ZN8SPIClass14endTransactionEv>

000b50dc <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b50dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50de:	461e      	mov	r6, r3
	beginTransaction();
   b50e0:	6803      	ldr	r3, [r0, #0]
   b50e2:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b50e4:	460f      	mov	r7, r1
   b50e6:	4614      	mov	r4, r2
   b50e8:	4605      	mov	r5, r0
	beginTransaction();
   b50ea:	4798      	blx	r3

	if (numBytes > 1) {
   b50ec:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b50ee:	bf88      	it	hi
   b50f0:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   b50f4:	68e8      	ldr	r0, [r5, #12]
   b50f6:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b50fa:	f003 fd01 	bl	b8b00 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   b50fe:	4426      	add	r6, r4
   b5100:	42b4      	cmp	r4, r6
   b5102:	d006      	beq.n	b5112 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   b5104:	68e8      	ldr	r0, [r5, #12]
   b5106:	2100      	movs	r1, #0
   b5108:	f003 fcfa 	bl	b8b00 <_ZN8SPIClass8transferEh>
   b510c:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   b5110:	e7f6      	b.n	b5100 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   b5112:	682b      	ldr	r3, [r5, #0]
   b5114:	4628      	mov	r0, r5
   b5116:	699b      	ldr	r3, [r3, #24]
   b5118:	4798      	blx	r3

	return true;
}
   b511a:	2001      	movs	r0, #1
   b511c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b511e <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b511e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5120:	461e      	mov	r6, r3
	beginTransaction();
   b5122:	6803      	ldr	r3, [r0, #0]
   b5124:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b5126:	460f      	mov	r7, r1
   b5128:	4614      	mov	r4, r2
   b512a:	4605      	mov	r5, r0
	beginTransaction();
   b512c:	4798      	blx	r3

	if (numBytes > 1) {
   b512e:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b5130:	bf88      	it	hi
   b5132:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   b5136:	68e8      	ldr	r0, [r5, #12]
   b5138:	4639      	mov	r1, r7
   b513a:	f003 fce1 	bl	b8b00 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b513e:	4426      	add	r6, r4
   b5140:	42b4      	cmp	r4, r6
   b5142:	d005      	beq.n	b5150 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   b5144:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5148:	68e8      	ldr	r0, [r5, #12]
   b514a:	f003 fcd9 	bl	b8b00 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b514e:	e7f7      	b.n	b5140 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   b5150:	682b      	ldr	r3, [r5, #0]
   b5152:	4628      	mov	r0, r5
   b5154:	699b      	ldr	r3, [r3, #24]
   b5156:	4798      	blx	r3

	return true;
}
   b5158:	2001      	movs	r0, #1
   b515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b515c <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b515c:	2200      	movs	r2, #0
   b515e:	7002      	strb	r2, [r0, #0]
   b5160:	7042      	strb	r2, [r0, #1]
   b5162:	7082      	strb	r2, [r0, #2]
   b5164:	70c2      	strb	r2, [r0, #3]
   b5166:	7102      	strb	r2, [r0, #4]
   b5168:	7142      	strb	r2, [r0, #5]
   b516a:	7182      	strb	r2, [r0, #6]
   b516c:	71c2      	strb	r2, [r0, #7]
   b516e:	7202      	strb	r2, [r0, #8]
   b5170:	7242      	strb	r2, [r0, #9]
   b5172:	7282      	strb	r2, [r0, #10]
}
   b5174:	4770      	bx	lr

000b5176 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b5176:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b5178:	f041 0107 	orr.w	r1, r1, #7
   b517c:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b517e:	7102      	strb	r2, [r0, #4]
   b5180:	7082      	strb	r2, [r0, #2]
   b5182:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b5184:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b5186:	7242      	strb	r2, [r0, #9]
}
   b5188:	4770      	bx	lr
	...

000b518c <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b518c:	4a02      	ldr	r2, [pc, #8]	; (b5198 <_ZN6LIS3DHC1Ei+0xc>)
   b518e:	e9c0 2100 	strd	r2, r1, [r0]
   b5192:	2200      	movs	r2, #0
   b5194:	7202      	strb	r2, [r0, #8]
}
   b5196:	4770      	bx	lr
   b5198:	000ba2ec 	.word	0x000ba2ec

000b519c <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b519c:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b519e:	6803      	ldr	r3, [r0, #0]
   b51a0:	aa01      	add	r2, sp, #4
   b51a2:	68dc      	ldr	r4, [r3, #12]
   b51a4:	2301      	movs	r3, #1
   b51a6:	47a0      	blx	r4
}
   b51a8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b51ac:	b002      	add	sp, #8
   b51ae:	bd10      	pop	{r4, pc}

000b51b0 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b51b0:	b538      	push	{r3, r4, r5, lr}
   b51b2:	4605      	mov	r5, r0
   b51b4:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b51b6:	210f      	movs	r1, #15
   b51b8:	4628      	mov	r0, r5
   b51ba:	f7ff ffef 	bl	b519c <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b51be:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b51c0:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b51c4:	d004      	beq.n	b51d0 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b51c6:	f000 feaf 	bl	b5f28 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b51ca:	3c01      	subs	r4, #1
   b51cc:	d1f3      	bne.n	b51b6 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b51ce:	4620      	mov	r0, r4
}
   b51d0:	bd38      	pop	{r3, r4, r5, pc}

000b51d2 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   b51d2:	b510      	push	{r4, lr}
   b51d4:	4604      	mov	r4, r0
	spi.begin(ss);
   b51d6:	8a01      	ldrh	r1, [r0, #16]
   b51d8:	68c0      	ldr	r0, [r0, #12]
   b51da:	f003 fbf5 	bl	b89c8 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   b51de:	4620      	mov	r0, r4
}
   b51e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   b51e4:	f7ff bfe4 	b.w	b51b0 <_ZN6LIS3DH9hasDeviceEv>

000b51e8 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b51e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b51ea:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b51ec:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b51ee:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b51f0:	f7ff ffd4 	bl	b519c <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b51f4:	f000 0008 	and.w	r0, r0, #8
   b51f8:	2800      	cmp	r0, #0
   b51fa:	bf14      	ite	ne
   b51fc:	2601      	movne	r6, #1
   b51fe:	2600      	moveq	r6, #0
	if (hasData) {
   b5200:	d00f      	beq.n	b5222 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b5202:	682b      	ldr	r3, [r5, #0]
   b5204:	466a      	mov	r2, sp
   b5206:	68df      	ldr	r7, [r3, #12]
   b5208:	2128      	movs	r1, #40	; 0x28
   b520a:	2306      	movs	r3, #6
   b520c:	4628      	mov	r0, r5
   b520e:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b5210:	f8bd 3000 	ldrh.w	r3, [sp]
   b5214:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b5216:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b521a:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b521c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b5220:	80a3      	strh	r3, [r4, #4]
}
   b5222:	4630      	mov	r0, r6
   b5224:	b003      	add	sp, #12
   b5226:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5228 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b5228:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b522a:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b522c:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b5230:	691c      	ldr	r4, [r3, #16]
   b5232:	aa01      	add	r2, sp, #4
   b5234:	2301      	movs	r3, #1
   b5236:	47a0      	blx	r4
}
   b5238:	b002      	add	sp, #8
   b523a:	bd10      	pop	{r4, pc}

000b523c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b523c:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b523e:	6803      	ldr	r3, [r0, #0]
   b5240:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b5242:	4604      	mov	r4, r0
   b5244:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b5246:	4798      	blx	r3
   b5248:	4606      	mov	r6, r0
   b524a:	b930      	cbnz	r0, b525a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b524c:	f004 f96a 	bl	b9524 <_Z16_fetch_usbserialv>
   b5250:	4927      	ldr	r1, [pc, #156]	; (b52f0 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b5252:	f003 fb26 	bl	b88a2 <_ZN5Print7printlnEPKc>
}
   b5256:	4630      	mov	r0, r6
   b5258:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b525a:	782a      	ldrb	r2, [r5, #0]
   b525c:	2120      	movs	r1, #32
   b525e:	4620      	mov	r0, r4
   b5260:	f7ff ffe2 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b5264:	786a      	ldrb	r2, [r5, #1]
   b5266:	2121      	movs	r1, #33	; 0x21
   b5268:	4620      	mov	r0, r4
   b526a:	f7ff ffdd 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b526e:	78aa      	ldrb	r2, [r5, #2]
   b5270:	2122      	movs	r1, #34	; 0x22
   b5272:	4620      	mov	r0, r4
   b5274:	f7ff ffd8 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b5278:	78ea      	ldrb	r2, [r5, #3]
   b527a:	2123      	movs	r1, #35	; 0x23
   b527c:	4620      	mov	r0, r4
   b527e:	f7ff ffd3 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b5282:	792a      	ldrb	r2, [r5, #4]
   b5284:	2124      	movs	r1, #36	; 0x24
   b5286:	4620      	mov	r0, r4
   b5288:	f7ff ffce 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b528c:	796a      	ldrb	r2, [r5, #5]
   b528e:	2125      	movs	r1, #37	; 0x25
   b5290:	4620      	mov	r0, r4
   b5292:	f7ff ffc9 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b5296:	79ab      	ldrb	r3, [r5, #6]
   b5298:	b11b      	cbz	r3, b52a2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b529a:	2126      	movs	r1, #38	; 0x26
   b529c:	4620      	mov	r0, r4
   b529e:	f7ff ff7d 	bl	b519c <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b52a2:	7aaa      	ldrb	r2, [r5, #10]
   b52a4:	212e      	movs	r1, #46	; 0x2e
   b52a6:	4620      	mov	r0, r4
   b52a8:	f7ff ffbe 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b52ac:	78ab      	ldrb	r3, [r5, #2]
   b52ae:	065b      	lsls	r3, r3, #25
   b52b0:	d5d1      	bpl.n	b5256 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b52b2:	79ea      	ldrb	r2, [r5, #7]
   b52b4:	2132      	movs	r1, #50	; 0x32
   b52b6:	4620      	mov	r0, r4
   b52b8:	f7ff ffb6 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b52bc:	7a2a      	ldrb	r2, [r5, #8]
   b52be:	2133      	movs	r1, #51	; 0x33
   b52c0:	4620      	mov	r0, r4
   b52c2:	f7ff ffb1 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b52c6:	6863      	ldr	r3, [r4, #4]
   b52c8:	2b00      	cmp	r3, #0
   b52ca:	db0a      	blt.n	b52e2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b52cc:	7a6a      	ldrb	r2, [r5, #9]
   b52ce:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b52d0:	4620      	mov	r0, r4
   b52d2:	2130      	movs	r1, #48	; 0x30
   b52d4:	f7ff ffa8 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b52d8:	2131      	movs	r1, #49	; 0x31
   b52da:	4620      	mov	r0, r4
   b52dc:	f7ff ff5e 	bl	b519c <_ZN6LIS3DH13readRegister8Eh>
   b52e0:	e7b9      	b.n	b5256 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b52e2:	2200      	movs	r2, #0
   b52e4:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b52e6:	2130      	movs	r1, #48	; 0x30
   b52e8:	4620      	mov	r0, r4
   b52ea:	f7ff ff9d 	bl	b5228 <_ZN6LIS3DH14writeRegister8Ehh>
   b52ee:	e7b2      	b.n	b5256 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b52f0:	000ba2d1 	.word	0x000ba2d1

000b52f4 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   b52f4:	4770      	bx	lr

000b52f6 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   b52f6:	b510      	push	{r4, lr}
   b52f8:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   b52fa:	2160      	movs	r1, #96	; 0x60
   b52fc:	6800      	ldr	r0, [r0, #0]
   b52fe:	f003 f935 	bl	b856c <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   b5302:	6820      	ldr	r0, [r4, #0]
   b5304:	f003 f93a 	bl	b857c <_ZN7TwoWire15endTransmissionEv>
}
   b5308:	fab0 f080 	clz	r0, r0
   b530c:	0940      	lsrs	r0, r0, #5
   b530e:	bd10      	pop	{r4, pc}

000b5310 <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   b5310:	b538      	push	{r3, r4, r5, lr}
   b5312:	4605      	mov	r5, r0
   b5314:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5316:	6800      	ldr	r0, [r0, #0]
   b5318:	2160      	movs	r1, #96	; 0x60
   b531a:	f003 f927 	bl	b856c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b531e:	6828      	ldr	r0, [r5, #0]
   b5320:	6803      	ldr	r3, [r0, #0]
   b5322:	4621      	mov	r1, r4
   b5324:	689b      	ldr	r3, [r3, #8]
   b5326:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   b5328:	6828      	ldr	r0, [r5, #0]
   b532a:	2100      	movs	r1, #0
   b532c:	f003 f922 	bl	b8574 <_ZN7TwoWire15endTransmissionEh>
   b5330:	b108      	cbz	r0, b5336 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   b5332:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   b5334:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   b5336:	6828      	ldr	r0, [r5, #0]
   b5338:	2202      	movs	r2, #2
   b533a:	2160      	movs	r1, #96	; 0x60
   b533c:	f003 f913 	bl	b8566 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   b5340:	6828      	ldr	r0, [r5, #0]
   b5342:	6803      	ldr	r3, [r0, #0]
   b5344:	691b      	ldr	r3, [r3, #16]
   b5346:	4798      	blx	r3
   b5348:	2800      	cmp	r0, #0
   b534a:	d0f2      	beq.n	b5332 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   b534c:	6828      	ldr	r0, [r5, #0]
   b534e:	6803      	ldr	r3, [r0, #0]
   b5350:	695b      	ldr	r3, [r3, #20]
   b5352:	4798      	blx	r3
   b5354:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   b5356:	6828      	ldr	r0, [r5, #0]
   b5358:	6803      	ldr	r3, [r0, #0]
   b535a:	695b      	ldr	r3, [r3, #20]
   b535c:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   b535e:	b2e4      	uxtb	r4, r4
   b5360:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   b5364:	b280      	uxth	r0, r0
   b5366:	e7e5      	b.n	b5334 <_ZN8VCNL404011readCommandEh+0x24>

000b5368 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   b5368:	2108      	movs	r1, #8
   b536a:	f7ff bfd1 	b.w	b5310 <_ZN8VCNL404011readCommandEh>

000b536e <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   b536e:	210c      	movs	r1, #12
   b5370:	f7ff bfce 	b.w	b5310 <_ZN8VCNL404011readCommandEh>

000b5374 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   b5374:	b570      	push	{r4, r5, r6, lr}
   b5376:	4604      	mov	r4, r0
   b5378:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b537a:	6800      	ldr	r0, [r0, #0]
   b537c:	2160      	movs	r1, #96	; 0x60
{
   b537e:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   b5380:	f003 f8f4 	bl	b856c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   b5384:	6820      	ldr	r0, [r4, #0]
   b5386:	6803      	ldr	r3, [r0, #0]
   b5388:	4631      	mov	r1, r6
   b538a:	689b      	ldr	r3, [r3, #8]
   b538c:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   b538e:	6820      	ldr	r0, [r4, #0]
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5390:	6803      	ldr	r3, [r0, #0]
   b5392:	b2e9      	uxtb	r1, r5
   b5394:	689b      	ldr	r3, [r3, #8]
   b5396:	4798      	blx	r3
  _i2cPort->write(value >> 8); //MSB
   b5398:	6820      	ldr	r0, [r4, #0]
   b539a:	6803      	ldr	r3, [r0, #0]
   b539c:	0a29      	lsrs	r1, r5, #8
   b539e:	689b      	ldr	r3, [r3, #8]
   b53a0:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   b53a2:	6820      	ldr	r0, [r4, #0]
   b53a4:	f003 f8ea 	bl	b857c <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   b53a8:	fab0 f080 	clz	r0, r0
   b53ac:	0940      	lsrs	r0, r0, #5
   b53ae:	bd70      	pop	{r4, r5, r6, pc}

000b53b0 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   b53b0:	b570      	push	{r4, r5, r6, lr}
   b53b2:	4604      	mov	r4, r0
   b53b4:	460d      	mov	r5, r1
   b53b6:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b53b8:	f7ff ffaa 	bl	b5310 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   b53bc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   b53c0:	ea40 0206 	orr.w	r2, r0, r6
   b53c4:	4629      	mov	r1, r5
   b53c6:	4620      	mov	r0, r4
}
   b53c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b53cc:	f7ff bfd2 	b.w	b5374 <_ZN8VCNL404012writeCommandEht>

000b53d0 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   b53d0:	b570      	push	{r4, r5, r6, lr}
   b53d2:	4604      	mov	r4, r0
   b53d4:	460d      	mov	r5, r1
   b53d6:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   b53d8:	f7ff ff9a 	bl	b5310 <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   b53dc:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   b53de:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   b53e2:	4629      	mov	r1, r5
   b53e4:	4620      	mov	r0, r4
}
   b53e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   b53ea:	f7ff bfc3 	b.w	b5374 <_ZN8VCNL404012writeCommandEht>

000b53ee <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   b53ee:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   b53f0:	f7ff ff8e 	bl	b5310 <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   b53f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
   b53f8:	bd08      	pop	{r3, pc}

000b53fa <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   b53fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b53fe:	4604      	mov	r4, r0
   b5400:	f89d 7018 	ldrb.w	r7, [sp, #24]
   b5404:	460d      	mov	r5, r1
   b5406:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   b5408:	4616      	mov	r6, r2
   b540a:	b16a      	cbz	r2, b5428 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   b540c:	f7ff ff80 	bl	b5310 <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   b5410:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   b5412:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   b5416:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b541a:	4629      	mov	r1, r5
   b541c:	4620      	mov	r0, r4
   b541e:	b136      	cbz	r6, b542e <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   b5420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   b5424:	f7ff bfc4 	b.w	b53b0 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   b5428:	f7ff ffe1 	bl	b53ee <_ZN8VCNL404016readCommandUpperEh>
   b542c:	e7f1      	b.n	b5412 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   b542e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   b5432:	f7ff bfcd 	b.w	b53d0 <_ZN8VCNL404017writeCommandUpperEhh>

000b5436 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b5436:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   b543a:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b543c:	d20e      	bcs.n	b545c <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b543e:	299f      	cmp	r1, #159	; 0x9f
   b5440:	d80e      	bhi.n	b5460 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else dutyValue = VCNL4040_PS_DUTY_40;
   b5442:	294f      	cmp	r1, #79	; 0x4f
   b5444:	bf8c      	ite	hi
   b5446:	2340      	movhi	r3, #64	; 0x40
   b5448:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   b544a:	9300      	str	r3, [sp, #0]
   b544c:	2201      	movs	r2, #1
   b544e:	233f      	movs	r3, #63	; 0x3f
   b5450:	2103      	movs	r1, #3
   b5452:	f7ff ffd2 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b5456:	b003      	add	sp, #12
   b5458:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   b545c:	23c0      	movs	r3, #192	; 0xc0
   b545e:	e7f4      	b.n	b544a <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   b5460:	2380      	movs	r3, #128	; 0x80
   b5462:	e7f2      	b.n	b544a <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000b5464 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5464:	2907      	cmp	r1, #7
{
   b5466:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b5468:	d80f      	bhi.n	b548a <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b546a:	2903      	cmp	r1, #3
   b546c:	d80f      	bhi.n	b548e <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b546e:	d010      	beq.n	b5492 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else timeValue = VCNL4040_PS_IT_1T;
   b5470:	2902      	cmp	r1, #2
   b5472:	bf0c      	ite	eq
   b5474:	2304      	moveq	r3, #4
   b5476:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   b5478:	9300      	str	r3, [sp, #0]
   b547a:	2201      	movs	r2, #1
   b547c:	23f1      	movs	r3, #241	; 0xf1
   b547e:	2103      	movs	r1, #3
   b5480:	f7ff ffbb 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b5484:	b003      	add	sp, #12
   b5486:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   b548a:	230e      	movs	r3, #14
   b548c:	e7f4      	b.n	b5478 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   b548e:	230c      	movs	r3, #12
   b5490:	e7f2      	b.n	b5478 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   b5492:	2308      	movs	r3, #8
   b5494:	e7f0      	b.n	b5478 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000b5496 <_ZN8VCNL404016powerOnProximityEv>:
{
   b5496:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   b5498:	2300      	movs	r3, #0
   b549a:	9300      	str	r3, [sp, #0]
   b549c:	2201      	movs	r2, #1
   b549e:	23fe      	movs	r3, #254	; 0xfe
   b54a0:	2103      	movs	r1, #3
   b54a2:	f7ff ffaa 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b54a6:	b003      	add	sp, #12
   b54a8:	f85d fb04 	ldr.w	pc, [sp], #4

000b54ac <_ZN8VCNL404017setProxResolutionEh>:
{
   b54ac:	b507      	push	{r0, r1, r2, lr}
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   b54ae:	290f      	cmp	r1, #15
   b54b0:	bf8c      	ite	hi
   b54b2:	2308      	movhi	r3, #8
   b54b4:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   b54b6:	9300      	str	r3, [sp, #0]
   b54b8:	2200      	movs	r2, #0
   b54ba:	23f7      	movs	r3, #247	; 0xf7
   b54bc:	2103      	movs	r1, #3
   b54be:	f7ff ff9c 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b54c2:	b003      	add	sp, #12
   b54c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b54c8 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   b54c8:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   b54ca:	2302      	movs	r3, #2
   b54cc:	9300      	str	r3, [sp, #0]
   b54ce:	2201      	movs	r2, #1
   b54d0:	23ef      	movs	r3, #239	; 0xef
   b54d2:	2104      	movs	r1, #4
   b54d4:	f7ff ff91 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b54d8:	b003      	add	sp, #12
   b54da:	f85d fb04 	ldr.w	pc, [sp], #4

000b54de <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b54de:	29c7      	cmp	r1, #199	; 0xc7
{
   b54e0:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b54e2:	d816      	bhi.n	b5512 <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b54e4:	29b3      	cmp	r1, #179	; 0xb3
   b54e6:	d816      	bhi.n	b5516 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b54e8:	299f      	cmp	r1, #159	; 0x9f
   b54ea:	d816      	bhi.n	b551a <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b54ec:	298b      	cmp	r1, #139	; 0x8b
   b54ee:	d816      	bhi.n	b551e <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b54f0:	2977      	cmp	r1, #119	; 0x77
   b54f2:	d816      	bhi.n	b5522 <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b54f4:	2963      	cmp	r1, #99	; 0x63
   b54f6:	d816      	bhi.n	b5526 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b54f8:	294a      	cmp	r1, #74	; 0x4a
   b54fa:	bf94      	ite	ls
   b54fc:	2100      	movls	r1, #0
   b54fe:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   b5500:	9100      	str	r1, [sp, #0]
   b5502:	23f8      	movs	r3, #248	; 0xf8
   b5504:	2200      	movs	r2, #0
   b5506:	2104      	movs	r1, #4
   b5508:	f7ff ff77 	bl	b53fa <_ZN8VCNL40407bitMaskEhbhh>
}
   b550c:	b003      	add	sp, #12
   b550e:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   b5512:	2107      	movs	r1, #7
   b5514:	e7f4      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   b5516:	2106      	movs	r1, #6
   b5518:	e7f2      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   b551a:	2105      	movs	r1, #5
   b551c:	e7f0      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   b551e:	2104      	movs	r1, #4
   b5520:	e7ee      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   b5522:	2103      	movs	r1, #3
   b5524:	e7ec      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   b5526:	2102      	movs	r1, #2
   b5528:	e7ea      	b.n	b5500 <_ZN8VCNL404013setLEDCurrentEh+0x22>

000b552a <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   b552a:	b538      	push	{r3, r4, r5, lr}
   b552c:	4604      	mov	r4, r0
   b552e:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b5530:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   b5532:	f002 ffe9 	bl	b8508 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   b5536:	4620      	mov	r0, r4
   b5538:	f7ff fedd 	bl	b52f6 <_ZN8VCNL404011isConnectedEv>
   b553c:	4605      	mov	r5, r0
   b553e:	b910      	cbnz	r0, b5546 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   b5540:	2500      	movs	r5, #0
}
   b5542:	4628      	mov	r0, r5
   b5544:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   b5546:	4620      	mov	r0, r4
   b5548:	f7ff ff11 	bl	b536e <_ZN8VCNL40405getIDEv>
   b554c:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   b5550:	d1f6      	bne.n	b5540 <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   b5552:	4620      	mov	r0, r4
   b5554:	21c8      	movs	r1, #200	; 0xc8
   b5556:	f7ff ffc2 	bl	b54de <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   b555a:	4620      	mov	r0, r4
   b555c:	2128      	movs	r1, #40	; 0x28
   b555e:	f7ff ff6a 	bl	b5436 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   b5562:	4620      	mov	r0, r4
   b5564:	2108      	movs	r1, #8
   b5566:	f7ff ff7d 	bl	b5464 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   b556a:	2110      	movs	r1, #16
   b556c:	4620      	mov	r0, r4
   b556e:	f7ff ff9d 	bl	b54ac <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   b5572:	4620      	mov	r0, r4
   b5574:	f7ff ffa8 	bl	b54c8 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   b5578:	4620      	mov	r0, r4
   b557a:	f7ff ff8c 	bl	b5496 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   b557e:	e7e0      	b.n	b5542 <_ZN8VCNL40405beginER7TwoWire+0x18>

000b5580 <_ZN20Adafruit_FingerprintC1EP11USARTSerial>:
Adafruit_Fingerprint::Adafruit_Fingerprint(NewSoftSerial *ss) {
#endif
#endif

  thePassword = 0;
  theAddress = 0xFFFFFFFF;
   b5580:	f04f 0c00 	mov.w	ip, #0
   b5584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5588:	e9c0 c202 	strd	ip, r2, [r0, #8]

  mySerial = ss;
   b558c:	6101      	str	r1, [r0, #16]
}
   b558e:	4770      	bx	lr

000b5590 <_ZN20Adafruit_Fingerprint5beginEt>:

void Adafruit_Fingerprint::begin(uint16_t baudrate) {
  mySerial->begin(baudrate);
   b5590:	6900      	ldr	r0, [r0, #16]
   b5592:	f003 bf65 	b.w	b9460 <_ZN11USARTSerial5beginEm>

000b5596 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh>:
}



void Adafruit_Fingerprint::writePacket(uint32_t addr, uint8_t packettype, 
				       uint16_t len, uint8_t *packet) {
   b5596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b559a:	4604      	mov	r4, r0
  Serial.print(" 0x");
  Serial.print((uint8_t)(len), HEX);
#endif

#if ((ARDUINO >= 100) || defined (PARTICLE))
  mySerial->write((uint8_t)(FINGERPRINT_STARTCODE >> 8));
   b559c:	6900      	ldr	r0, [r0, #16]
				       uint16_t len, uint8_t *packet) {
   b559e:	9f08      	ldr	r7, [sp, #32]
   b55a0:	4698      	mov	r8, r3
  mySerial->write((uint8_t)(FINGERPRINT_STARTCODE >> 8));
   b55a2:	6803      	ldr	r3, [r0, #0]
				       uint16_t len, uint8_t *packet) {
   b55a4:	460e      	mov	r6, r1
  mySerial->write((uint8_t)(FINGERPRINT_STARTCODE >> 8));
   b55a6:	689b      	ldr	r3, [r3, #8]
   b55a8:	21ef      	movs	r1, #239	; 0xef
				       uint16_t len, uint8_t *packet) {
   b55aa:	4615      	mov	r5, r2
  mySerial->write((uint8_t)(FINGERPRINT_STARTCODE >> 8));
   b55ac:	4798      	blx	r3
  mySerial->write((uint8_t)FINGERPRINT_STARTCODE);
   b55ae:	6920      	ldr	r0, [r4, #16]
   b55b0:	6803      	ldr	r3, [r0, #0]
   b55b2:	2101      	movs	r1, #1
   b55b4:	689b      	ldr	r3, [r3, #8]
   b55b6:	4798      	blx	r3
  mySerial->write((uint8_t)(addr >> 24));
   b55b8:	6920      	ldr	r0, [r4, #16]
   b55ba:	6803      	ldr	r3, [r0, #0]
   b55bc:	0e31      	lsrs	r1, r6, #24
   b55be:	689b      	ldr	r3, [r3, #8]
   b55c0:	4798      	blx	r3
  mySerial->write((uint8_t)(addr >> 16));
   b55c2:	6920      	ldr	r0, [r4, #16]
   b55c4:	6803      	ldr	r3, [r0, #0]
   b55c6:	f3c6 4107 	ubfx	r1, r6, #16, #8
   b55ca:	689b      	ldr	r3, [r3, #8]
   b55cc:	4798      	blx	r3
  mySerial->write((uint8_t)(addr >> 8));
   b55ce:	6920      	ldr	r0, [r4, #16]
   b55d0:	6803      	ldr	r3, [r0, #0]
   b55d2:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b55d6:	689b      	ldr	r3, [r3, #8]
   b55d8:	4798      	blx	r3
  mySerial->write((uint8_t)(addr));
   b55da:	6920      	ldr	r0, [r4, #16]
   b55dc:	6803      	ldr	r3, [r0, #0]
   b55de:	b2f1      	uxtb	r1, r6
   b55e0:	689b      	ldr	r3, [r3, #8]
   b55e2:	4798      	blx	r3
  mySerial->write((uint8_t)packettype);
   b55e4:	6920      	ldr	r0, [r4, #16]
   b55e6:	6803      	ldr	r3, [r0, #0]
   b55e8:	4629      	mov	r1, r5
   b55ea:	689b      	ldr	r3, [r3, #8]
   b55ec:	4798      	blx	r3
  mySerial->write((uint8_t)(len >> 8));
   b55ee:	6920      	ldr	r0, [r4, #16]
   b55f0:	6803      	ldr	r3, [r0, #0]
   b55f2:	ea4f 2618 	mov.w	r6, r8, lsr #8
   b55f6:	4631      	mov	r1, r6
   b55f8:	689b      	ldr	r3, [r3, #8]
   b55fa:	4798      	blx	r3
  mySerial->write((uint8_t)(len));
   b55fc:	6920      	ldr	r0, [r4, #16]
   b55fe:	6803      	ldr	r3, [r0, #0]
   b5600:	fa5f f988 	uxtb.w	r9, r8
   b5604:	689b      	ldr	r3, [r3, #8]
   b5606:	4649      	mov	r1, r9
   b5608:	4798      	blx	r3
  mySerial->print((uint8_t)packettype, BYTE);
  mySerial->print((uint8_t)(len >> 8), BYTE);
  mySerial->print((uint8_t)(len), BYTE);
#endif
 
  uint16_t sum = (len>>8) + (len&0xFF) + packettype;
   b560a:	444e      	add	r6, r9
   b560c:	4435      	add	r5, r6
  for (uint8_t i=0; i< len-2; i++) {
   b560e:	f1a8 0802 	sub.w	r8, r8, #2
  uint16_t sum = (len>>8) + (len&0xFF) + packettype;
   b5612:	2600      	movs	r6, #0

#if ((ARDUINO >= 100) || defined (PARTICLE))
    mySerial->write((uint8_t)(packet[i]));
   b5614:	6920      	ldr	r0, [r4, #16]
  for (uint8_t i=0; i< len-2; i++) {
   b5616:	f106 0901 	add.w	r9, r6, #1
    mySerial->write((uint8_t)(packet[i]));
   b561a:	6803      	ldr	r3, [r0, #0]
  for (uint8_t i=0; i< len-2; i++) {
   b561c:	b2f6      	uxtb	r6, r6
   b561e:	4546      	cmp	r6, r8
    mySerial->write((uint8_t)(packet[i]));
   b5620:	689b      	ldr	r3, [r3, #8]
  for (uint8_t i=0; i< len-2; i++) {
   b5622:	da06      	bge.n	b5632 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh+0x9c>
    mySerial->write((uint8_t)(packet[i]));
   b5624:	5db9      	ldrb	r1, [r7, r6]
   b5626:	4798      	blx	r3
    mySerial->print((uint8_t)(packet[i]), BYTE);
#endif
#ifdef FINGERPRINT_DEBUG
    Serial.print(" 0x"); Serial.print(packet[i], HEX);
#endif
    sum += packet[i];
   b5628:	5dba      	ldrb	r2, [r7, r6]
   b562a:	4415      	add	r5, r2
   b562c:	b2ad      	uxth	r5, r5
  for (uint8_t i=0; i< len-2; i++) {
   b562e:	464e      	mov	r6, r9
   b5630:	e7f0      	b.n	b5614 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh+0x7e>
  Serial.print(" 0x"); Serial.print((uint8_t)(sum>>8), HEX);
  Serial.print(" 0x"); Serial.println((uint8_t)(sum), HEX);
#endif

#if ((ARDUINO >= 100) || defined (PARTICLE))
  mySerial->write((uint8_t)(sum>>8));
   b5632:	0a29      	lsrs	r1, r5, #8
   b5634:	4798      	blx	r3
  mySerial->write((uint8_t)sum);
   b5636:	6920      	ldr	r0, [r4, #16]
   b5638:	6803      	ldr	r3, [r0, #0]
   b563a:	b2e9      	uxtb	r1, r5
   b563c:	689b      	ldr	r3, [r3, #8]
#else
  mySerial->print((uint8_t)(sum>>8), BYTE);
  mySerial->print((uint8_t)sum, BYTE);
#endif
}
   b563e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  mySerial->write((uint8_t)sum);
   b5642:	4718      	bx	r3

000b5644 <_ZN20Adafruit_Fingerprint8getReplyEPht>:


uint8_t Adafruit_Fingerprint::getReply(uint8_t packet[], uint16_t timeout) {
   b5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t reply[20], idx;
  uint16_t timer=0;
   b5648:	2400      	movs	r4, #0
uint8_t Adafruit_Fingerprint::getReply(uint8_t packet[], uint16_t timeout) {
   b564a:	b086      	sub	sp, #24
   b564c:	4606      	mov	r6, r0
   b564e:	460d      	mov	r5, r1
   b5650:	4617      	mov	r7, r2
  
  idx = 0;
   b5652:	46a0      	mov	r8, r4
#ifdef FINGERPRINT_DEBUG
  Serial.print("<--- ");
#endif
while (true) {
    while (!mySerial->available()) {
   b5654:	6930      	ldr	r0, [r6, #16]
   b5656:	6803      	ldr	r3, [r0, #0]
   b5658:	691b      	ldr	r3, [r3, #16]
   b565a:	4798      	blx	r3
   b565c:	b940      	cbnz	r0, b5670 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x2c>
      delay(1);
      timer++;
   b565e:	3401      	adds	r4, #1
      delay(1);
   b5660:	2001      	movs	r0, #1
      timer++;
   b5662:	b2a4      	uxth	r4, r4
      delay(1);
   b5664:	f000 fc60 	bl	b5f28 <delay>
      if (timer >= timeout) return FINGERPRINT_TIMEOUT;
   b5668:	42bc      	cmp	r4, r7
   b566a:	d3f3      	bcc.n	b5654 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x10>
   b566c:	20ff      	movs	r0, #255	; 0xff
   b566e:	e037      	b.n	b56e0 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x9c>
    }
    // something to read!
    reply[idx] = mySerial->read();
   b5670:	6930      	ldr	r0, [r6, #16]
   b5672:	6803      	ldr	r3, [r0, #0]
   b5674:	695b      	ldr	r3, [r3, #20]
   b5676:	4798      	blx	r3
   b5678:	ab06      	add	r3, sp, #24
   b567a:	4443      	add	r3, r8
   b567c:	f803 0c14 	strb.w	r0, [r3, #-20]
#ifdef FINGERPRINT_DEBUG
    Serial.print(" 0x"); Serial.print(reply[idx], HEX);
#endif
    if ((idx == 0) && (reply[0] != (FINGERPRINT_STARTCODE >> 8)))
   b5680:	f1b8 0f00 	cmp.w	r8, #0
   b5684:	d103      	bne.n	b568e <_ZN20Adafruit_Fingerprint8getReplyEPht+0x4a>
   b5686:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b568a:	2bef      	cmp	r3, #239	; 0xef
   b568c:	d1e2      	bne.n	b5654 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x10>
      continue;
    idx++;
   b568e:	f108 0801 	add.w	r8, r8, #1
   b5692:	fa5f f888 	uxtb.w	r8, r8
    
    // check packet!
    if (idx >= 9) {
   b5696:	f1b8 0f08 	cmp.w	r8, #8
   b569a:	d9db      	bls.n	b5654 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x10>
      if ((reply[0] != (FINGERPRINT_STARTCODE >> 8)) ||
   b569c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b56a0:	2bef      	cmp	r3, #239	; 0xef
   b56a2:	d120      	bne.n	b56e6 <_ZN20Adafruit_Fingerprint8getReplyEPht+0xa2>
   b56a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b56a8:	2b01      	cmp	r3, #1
   b56aa:	d11c      	bne.n	b56e6 <_ZN20Adafruit_Fingerprint8getReplyEPht+0xa2>
      uint8_t packettype = reply[6];
      //Serial.print("Packet type"); Serial.println(packettype);
      uint16_t len = reply[7];
      len <<= 8;
      len |= reply[8];
      len -= 2;
   b56ac:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   b56b0:	ba5b      	rev16	r3, r3
   b56b2:	3b02      	subs	r3, #2
   b56b4:	b29b      	uxth	r3, r3
      //Serial.print("Packet len"); Serial.println(len);
      if (idx <= (len+10)) continue;
   b56b6:	f103 020a 	add.w	r2, r3, #10
   b56ba:	4590      	cmp	r8, r2
   b56bc:	ddca      	ble.n	b5654 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x10>
      packet[0] = packettype;      
   b56be:	f89d 200a 	ldrb.w	r2, [sp, #10]
   b56c2:	702a      	strb	r2, [r5, #0]
   b56c4:	2100      	movs	r1, #0
      for (uint8_t i=0; i<len; i++) {
   b56c6:	b2ca      	uxtb	r2, r1
   b56c8:	4293      	cmp	r3, r2
   b56ca:	f101 0101 	add.w	r1, r1, #1
   b56ce:	dd06      	ble.n	b56de <_ZN20Adafruit_Fingerprint8getReplyEPht+0x9a>
        packet[1+i] = reply[9+i];
   b56d0:	ac06      	add	r4, sp, #24
   b56d2:	18a8      	adds	r0, r5, r2
   b56d4:	4422      	add	r2, r4
   b56d6:	f812 2c0b 	ldrb.w	r2, [r2, #-11]
   b56da:	7042      	strb	r2, [r0, #1]
      for (uint8_t i=0; i<len; i++) {
   b56dc:	e7f3      	b.n	b56c6 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x82>
      }
#ifdef FINGERPRINT_DEBUG
      Serial.println();
#endif
      return len;
   b56de:	b2d8      	uxtb	r0, r3
    }
  }
}
   b56e0:	b006      	add	sp, #24
   b56e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return FINGERPRINT_BADPACKET;
   b56e6:	20fe      	movs	r0, #254	; 0xfe
   b56e8:	e7fa      	b.n	b56e0 <_ZN20Adafruit_Fingerprint8getReplyEPht+0x9c>

000b56ea <_ZN20Adafruit_Fingerprint14verifyPasswordEv>:
boolean Adafruit_Fingerprint::verifyPassword(void) {
   b56ea:	b530      	push	{r4, r5, lr}
   b56ec:	b085      	sub	sp, #20
  uint8_t packet[] = {FINGERPRINT_VERIFYPASSWORD, 
   b56ee:	2313      	movs	r3, #19
   b56f0:	f88d 3008 	strb.w	r3, [sp, #8]
                      (thePassword >> 24), (thePassword >> 16),
   b56f4:	6883      	ldr	r3, [r0, #8]
                      (thePassword >> 8), thePassword};
   b56f6:	f88d 300c 	strb.w	r3, [sp, #12]
                      (thePassword >> 24), (thePassword >> 16),
   b56fa:	0e1a      	lsrs	r2, r3, #24
                      (thePassword >> 8), thePassword};
   b56fc:	f88d 2009 	strb.w	r2, [sp, #9]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 7, packet);
   b5700:	ad02      	add	r5, sp, #8
                      (thePassword >> 24), (thePassword >> 16),
   b5702:	0c1a      	lsrs	r2, r3, #16
                      (thePassword >> 8), thePassword};
   b5704:	f88d 200a 	strb.w	r2, [sp, #10]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 7, packet);
   b5708:	9500      	str	r5, [sp, #0]
                      (thePassword >> 8), thePassword};
   b570a:	0a1a      	lsrs	r2, r3, #8
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 7, packet);
   b570c:	68c1      	ldr	r1, [r0, #12]
                      (thePassword >> 8), thePassword};
   b570e:	f88d 200b 	strb.w	r2, [sp, #11]
boolean Adafruit_Fingerprint::verifyPassword(void) {
   b5712:	4604      	mov	r4, r0
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 7, packet);
   b5714:	2307      	movs	r3, #7
   b5716:	2201      	movs	r2, #1
   b5718:	f7ff ff3d 	bl	b5596 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh>
  uint8_t len = getReply(packet);
   b571c:	f241 3288 	movw	r2, #5000	; 0x1388
   b5720:	4629      	mov	r1, r5
   b5722:	4620      	mov	r0, r4
   b5724:	f7ff ff8e 	bl	b5644 <_ZN20Adafruit_Fingerprint8getReplyEPht>
  if ((len == 1) && (packet[0] == FINGERPRINT_ACKPACKET) && (packet[1] == FINGERPRINT_OK))
   b5728:	2801      	cmp	r0, #1
   b572a:	d10a      	bne.n	b5742 <_ZN20Adafruit_Fingerprint14verifyPasswordEv+0x58>
   b572c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b5730:	2b07      	cmp	r3, #7
   b5732:	d106      	bne.n	b5742 <_ZN20Adafruit_Fingerprint14verifyPasswordEv+0x58>
   b5734:	f89d 0009 	ldrb.w	r0, [sp, #9]
   b5738:	fab0 f080 	clz	r0, r0
   b573c:	0940      	lsrs	r0, r0, #5
}
   b573e:	b005      	add	sp, #20
   b5740:	bd30      	pop	{r4, r5, pc}
  return false;
   b5742:	2000      	movs	r0, #0
   b5744:	e7fb      	b.n	b573e <_ZN20Adafruit_Fingerprint14verifyPasswordEv+0x54>

000b5746 <_ZN20Adafruit_Fingerprint8getImageEv>:
uint8_t Adafruit_Fingerprint::getImage(void) {
   b5746:	b530      	push	{r4, r5, lr}
   b5748:	b085      	sub	sp, #20
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 3, packet);
   b574a:	ad03      	add	r5, sp, #12
   b574c:	9500      	str	r5, [sp, #0]
   b574e:	68c1      	ldr	r1, [r0, #12]
  uint8_t packet[] = {FINGERPRINT_GETIMAGE};
   b5750:	2201      	movs	r2, #1
uint8_t Adafruit_Fingerprint::getImage(void) {
   b5752:	4604      	mov	r4, r0
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 3, packet);
   b5754:	2303      	movs	r3, #3
  uint8_t packet[] = {FINGERPRINT_GETIMAGE};
   b5756:	f88d 200c 	strb.w	r2, [sp, #12]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, 3, packet);
   b575a:	f7ff ff1c 	bl	b5596 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh>
  uint8_t len = getReply(packet);
   b575e:	f241 3288 	movw	r2, #5000	; 0x1388
   b5762:	4629      	mov	r1, r5
   b5764:	4620      	mov	r0, r4
   b5766:	f7ff ff6d 	bl	b5644 <_ZN20Adafruit_Fingerprint8getReplyEPht>
  if ((len != 1) && (packet[0] != FINGERPRINT_ACKPACKET))
   b576a:	2801      	cmp	r0, #1
   b576c:	d003      	beq.n	b5776 <_ZN20Adafruit_Fingerprint8getImageEv+0x30>
   b576e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b5772:	2b07      	cmp	r3, #7
   b5774:	d103      	bne.n	b577e <_ZN20Adafruit_Fingerprint8getImageEv+0x38>
  return packet[1];
   b5776:	f89d 000d 	ldrb.w	r0, [sp, #13]
}
   b577a:	b005      	add	sp, #20
   b577c:	bd30      	pop	{r4, r5, pc}
   return -1;
   b577e:	20ff      	movs	r0, #255	; 0xff
   b5780:	e7fb      	b.n	b577a <_ZN20Adafruit_Fingerprint8getImageEv+0x34>

000b5782 <_ZN20Adafruit_Fingerprint8image2TzEh>:
uint8_t Adafruit_Fingerprint::image2Tz(uint8_t slot) {
   b5782:	b530      	push	{r4, r5, lr}
   b5784:	b085      	sub	sp, #20
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
   b5786:	ad03      	add	r5, sp, #12
  uint8_t packet[] = {FINGERPRINT_IMAGE2TZ, slot};
   b5788:	2302      	movs	r3, #2
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
   b578a:	9500      	str	r5, [sp, #0]
uint8_t Adafruit_Fingerprint::image2Tz(uint8_t slot) {
   b578c:	4604      	mov	r4, r0
  uint8_t packet[] = {FINGERPRINT_IMAGE2TZ, slot};
   b578e:	f88d 300c 	strb.w	r3, [sp, #12]
   b5792:	f88d 100d 	strb.w	r1, [sp, #13]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
   b5796:	2304      	movs	r3, #4
   b5798:	68c1      	ldr	r1, [r0, #12]
   b579a:	2201      	movs	r2, #1
   b579c:	f7ff fefb 	bl	b5596 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh>
  uint8_t len = getReply(packet);
   b57a0:	f241 3288 	movw	r2, #5000	; 0x1388
   b57a4:	4629      	mov	r1, r5
   b57a6:	4620      	mov	r0, r4
   b57a8:	f7ff ff4c 	bl	b5644 <_ZN20Adafruit_Fingerprint8getReplyEPht>
  if ((len != 1) && (packet[0] != FINGERPRINT_ACKPACKET))
   b57ac:	2801      	cmp	r0, #1
   b57ae:	d003      	beq.n	b57b8 <_ZN20Adafruit_Fingerprint8image2TzEh+0x36>
   b57b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b57b4:	2b07      	cmp	r3, #7
   b57b6:	d103      	bne.n	b57c0 <_ZN20Adafruit_Fingerprint8image2TzEh+0x3e>
  return packet[1];
   b57b8:	f89d 000d 	ldrb.w	r0, [sp, #13]
}
   b57bc:	b005      	add	sp, #20
   b57be:	bd30      	pop	{r4, r5, pc}
   return -1;
   b57c0:	20ff      	movs	r0, #255	; 0xff
   b57c2:	e7fb      	b.n	b57bc <_ZN20Adafruit_Fingerprint8image2TzEh+0x3a>

000b57c4 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv>:
uint8_t Adafruit_Fingerprint::fingerFastSearch(void) {
   b57c4:	b530      	push	{r4, r5, lr}
  fingerID = 0xFFFF;
   b57c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b57ca:	6003      	str	r3, [r0, #0]
  uint8_t packet[] = {FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3};
   b57cc:	4b14      	ldr	r3, [pc, #80]	; (b5820 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x5c>)
uint8_t Adafruit_Fingerprint::fingerFastSearch(void) {
   b57ce:	b085      	sub	sp, #20
   b57d0:	4604      	mov	r4, r0
  uint8_t packet[] = {FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3};
   b57d2:	ad02      	add	r5, sp, #8
   b57d4:	6818      	ldr	r0, [r3, #0]
   b57d6:	889b      	ldrh	r3, [r3, #4]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
   b57d8:	68e1      	ldr	r1, [r4, #12]
  uint8_t packet[] = {FINGERPRINT_HISPEEDSEARCH, 0x01, 0x00, 0x00, 0x00, 0xA3};
   b57da:	9002      	str	r0, [sp, #8]
   b57dc:	f8ad 300c 	strh.w	r3, [sp, #12]
  writePacket(theAddress, FINGERPRINT_COMMANDPACKET, sizeof(packet)+2, packet);
   b57e0:	2201      	movs	r2, #1
   b57e2:	2308      	movs	r3, #8
   b57e4:	4620      	mov	r0, r4
   b57e6:	9500      	str	r5, [sp, #0]
   b57e8:	f7ff fed5 	bl	b5596 <_ZN20Adafruit_Fingerprint11writePacketEmhtPh>
  uint8_t len = getReply(packet);
   b57ec:	f241 3288 	movw	r2, #5000	; 0x1388
   b57f0:	4629      	mov	r1, r5
   b57f2:	4620      	mov	r0, r4
   b57f4:	f7ff ff26 	bl	b5644 <_ZN20Adafruit_Fingerprint8getReplyEPht>
  if ((len != 1) && (packet[0] != FINGERPRINT_ACKPACKET))
   b57f8:	2801      	cmp	r0, #1
   b57fa:	d003      	beq.n	b5804 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x40>
   b57fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b5800:	2b07      	cmp	r3, #7
   b5802:	d10b      	bne.n	b581c <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x58>
  fingerID |= packet[3];
   b5804:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  return packet[1];
   b5808:	f89d 0009 	ldrb.w	r0, [sp, #9]
  fingerID |= packet[3];
   b580c:	ba5b      	rev16	r3, r3
   b580e:	8023      	strh	r3, [r4, #0]
  confidence |= packet[5];
   b5810:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5814:	ba5b      	rev16	r3, r3
   b5816:	8063      	strh	r3, [r4, #2]
}
   b5818:	b005      	add	sp, #20
   b581a:	bd30      	pop	{r4, r5, pc}
   return -1;
   b581c:	20ff      	movs	r0, #255	; 0xff
   b581e:	e7fb      	b.n	b5818 <_ZN20Adafruit_Fingerprint16fingerFastSearchEv+0x54>
   b5820:	000ba324 	.word	0x000ba324

000b5824 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b5824:	f000 bb80 	b.w	b5f28 <delay>

000b5828 <_Z11BlynkMillisv>:
   b5828:	f000 b8aa 	b.w	b5980 <HAL_Timer_Get_Milli_Seconds>

000b582c <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b582c:	4770      	bx	lr

000b582e <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b582e:	4770      	bx	lr

000b5830 <BlynkNoOpCbk>:
{}
   b5830:	4770      	bx	lr
	...

000b5834 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b5834:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b5836:	bf5a      	itte	pl
   b5838:	4b02      	ldrpl	r3, [pc, #8]	; (b5844 <GetReadHandler+0x10>)
   b583a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b583e:	2000      	movmi	r0, #0
#endif
}
   b5840:	4770      	bx	lr
   b5842:	bf00      	nop
   b5844:	000ba32c 	.word	0x000ba32c

000b5848 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b5848:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b584a:	bf5a      	itte	pl
   b584c:	4b02      	ldrpl	r3, [pc, #8]	; (b5858 <GetWriteHandler+0x10>)
   b584e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b5852:	2000      	movmi	r0, #0
#endif
}
   b5854:	4770      	bx	lr
   b5856:	bf00      	nop
   b5858:	000ba52c 	.word	0x000ba52c

000b585c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b585c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b585e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5860:	4604      	mov	r4, r0
      if (_M_manager)
   b5862:	b113      	cbz	r3, b586a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5864:	2203      	movs	r2, #3
   b5866:	4601      	mov	r1, r0
   b5868:	4798      	blx	r3
    }
   b586a:	4620      	mov	r0, r4
   b586c:	bd10      	pop	{r4, pc}
	...

000b5870 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5870:	b508      	push	{r3, lr}
   b5872:	4b02      	ldr	r3, [pc, #8]	; (b587c <hal_ble_stack_init+0xc>)
   b5874:	681b      	ldr	r3, [r3, #0]
   b5876:	689b      	ldr	r3, [r3, #8]
   b5878:	9301      	str	r3, [sp, #4]
   b587a:	bd08      	pop	{r3, pc}
   b587c:	00030278 	.word	0x00030278

000b5880 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b5880:	b508      	push	{r3, lr}
   b5882:	4b02      	ldr	r3, [pc, #8]	; (b588c <hal_ble_gap_start_scan+0xc>)
   b5884:	681b      	ldr	r3, [r3, #0]
   b5886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b5888:	9301      	str	r3, [sp, #4]
   b588a:	bd08      	pop	{r3, pc}
   b588c:	00030278 	.word	0x00030278

000b5890 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b5890:	b508      	push	{r3, lr}
   b5892:	4b03      	ldr	r3, [pc, #12]	; (b58a0 <hal_ble_gap_stop_scan+0x10>)
   b5894:	681b      	ldr	r3, [r3, #0]
   b5896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b589a:	9301      	str	r3, [sp, #4]
   b589c:	bd08      	pop	{r3, pc}
   b589e:	0000      	.short	0x0000
   b58a0:	00030278 	.word	0x00030278

000b58a4 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b03      	ldr	r3, [pc, #12]	; (b58b4 <hal_ble_gap_disconnect+0x10>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b58ae:	9301      	str	r3, [sp, #4]
   b58b0:	bd08      	pop	{r3, pc}
   b58b2:	0000      	.short	0x0000
   b58b4:	00030278 	.word	0x00030278

000b58b8 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b03      	ldr	r3, [pc, #12]	; (b58c8 <hal_ble_gatt_client_discover_all_services+0x10>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b58c2:	9301      	str	r3, [sp, #4]
   b58c4:	bd08      	pop	{r3, pc}
   b58c6:	0000      	.short	0x0000
   b58c8:	00030278 	.word	0x00030278

000b58cc <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b03      	ldr	r3, [pc, #12]	; (b58dc <hal_ble_gatt_client_discover_characteristics+0x10>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b58d6:	9301      	str	r3, [sp, #4]
   b58d8:	bd08      	pop	{r3, pc}
   b58da:	0000      	.short	0x0000
   b58dc:	00030278 	.word	0x00030278

000b58e0 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b58e0:	b508      	push	{r3, lr}
   b58e2:	4b03      	ldr	r3, [pc, #12]	; (b58f0 <hal_ble_gatt_client_read+0x10>)
   b58e4:	681b      	ldr	r3, [r3, #0]
   b58e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b58ea:	9301      	str	r3, [sp, #4]
   b58ec:	bd08      	pop	{r3, pc}
   b58ee:	0000      	.short	0x0000
   b58f0:	00030278 	.word	0x00030278

000b58f4 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b58f4:	b508      	push	{r3, lr}
   b58f6:	4b03      	ldr	r3, [pc, #12]	; (b5904 <hal_ble_gap_connect+0x10>)
   b58f8:	681b      	ldr	r3, [r3, #0]
   b58fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b58fe:	9301      	str	r3, [sp, #4]
   b5900:	bd08      	pop	{r3, pc}
   b5902:	0000      	.short	0x0000
   b5904:	00030278 	.word	0x00030278

000b5908 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b03      	ldr	r3, [pc, #12]	; (b5918 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b5912:	9301      	str	r3, [sp, #4]
   b5914:	bd08      	pop	{r3, pc}
   b5916:	0000      	.short	0x0000
   b5918:	00030278 	.word	0x00030278

000b591c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b591c:	b508      	push	{r3, lr}
   b591e:	4b03      	ldr	r3, [pc, #12]	; (b592c <hal_ble_gatt_client_configure_cccd+0x10>)
   b5920:	681b      	ldr	r3, [r3, #0]
   b5922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b5926:	9301      	str	r3, [sp, #4]
   b5928:	bd08      	pop	{r3, pc}
   b592a:	0000      	.short	0x0000
   b592c:	00030278 	.word	0x00030278

000b5930 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5930:	b508      	push	{r3, lr}
   b5932:	4b02      	ldr	r3, [pc, #8]	; (b593c <os_mutex_recursive_create+0xc>)
   b5934:	681b      	ldr	r3, [r3, #0]
   b5936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5938:	9301      	str	r3, [sp, #4]
   b593a:	bd08      	pop	{r3, pc}
   b593c:	00030248 	.word	0x00030248

000b5940 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5940:	b508      	push	{r3, lr}
   b5942:	4b02      	ldr	r3, [pc, #8]	; (b594c <os_mutex_recursive_lock+0xc>)
   b5944:	681b      	ldr	r3, [r3, #0]
   b5946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5948:	9301      	str	r3, [sp, #4]
   b594a:	bd08      	pop	{r3, pc}
   b594c:	00030248 	.word	0x00030248

000b5950 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5950:	b508      	push	{r3, lr}
   b5952:	4b02      	ldr	r3, [pc, #8]	; (b595c <os_mutex_recursive_unlock+0xc>)
   b5954:	681b      	ldr	r3, [r3, #0]
   b5956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5958:	9301      	str	r3, [sp, #4]
   b595a:	bd08      	pop	{r3, pc}
   b595c:	00030248 	.word	0x00030248

000b5960 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5960:	b508      	push	{r3, lr}
   b5962:	4b02      	ldr	r3, [pc, #8]	; (b596c <HAL_RNG_GetRandomNumber+0xc>)
   b5964:	681b      	ldr	r3, [r3, #0]
   b5966:	685b      	ldr	r3, [r3, #4]
   b5968:	9301      	str	r3, [sp, #4]
   b596a:	bd08      	pop	{r3, pc}
   b596c:	00030218 	.word	0x00030218

000b5970 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5970:	b508      	push	{r3, lr}
   b5972:	4b02      	ldr	r3, [pc, #8]	; (b597c <HAL_Delay_Microseconds+0xc>)
   b5974:	681b      	ldr	r3, [r3, #0]
   b5976:	68db      	ldr	r3, [r3, #12]
   b5978:	9301      	str	r3, [sp, #4]
   b597a:	bd08      	pop	{r3, pc}
   b597c:	00030218 	.word	0x00030218

000b5980 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5980:	b508      	push	{r3, lr}
   b5982:	4b02      	ldr	r3, [pc, #8]	; (b598c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5984:	681b      	ldr	r3, [r3, #0]
   b5986:	695b      	ldr	r3, [r3, #20]
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	bd08      	pop	{r3, pc}
   b598c:	00030218 	.word	0x00030218

000b5990 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5990:	b508      	push	{r3, lr}
   b5992:	4b02      	ldr	r3, [pc, #8]	; (b599c <HAL_Validate_Pin_Function+0xc>)
   b5994:	681b      	ldr	r3, [r3, #0]
   b5996:	685b      	ldr	r3, [r3, #4]
   b5998:	9301      	str	r3, [sp, #4]
   b599a:	bd08      	pop	{r3, pc}
   b599c:	0003022c 	.word	0x0003022c

000b59a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b59a0:	b508      	push	{r3, lr}
   b59a2:	4b02      	ldr	r3, [pc, #8]	; (b59ac <HAL_Pin_Mode+0xc>)
   b59a4:	681b      	ldr	r3, [r3, #0]
   b59a6:	689b      	ldr	r3, [r3, #8]
   b59a8:	9301      	str	r3, [sp, #4]
   b59aa:	bd08      	pop	{r3, pc}
   b59ac:	0003022c 	.word	0x0003022c

000b59b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b59b0:	b508      	push	{r3, lr}
   b59b2:	4b02      	ldr	r3, [pc, #8]	; (b59bc <HAL_Get_Pin_Mode+0xc>)
   b59b4:	681b      	ldr	r3, [r3, #0]
   b59b6:	68db      	ldr	r3, [r3, #12]
   b59b8:	9301      	str	r3, [sp, #4]
   b59ba:	bd08      	pop	{r3, pc}
   b59bc:	0003022c 	.word	0x0003022c

000b59c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b59c0:	b508      	push	{r3, lr}
   b59c2:	4b02      	ldr	r3, [pc, #8]	; (b59cc <HAL_GPIO_Write+0xc>)
   b59c4:	681b      	ldr	r3, [r3, #0]
   b59c6:	691b      	ldr	r3, [r3, #16]
   b59c8:	9301      	str	r3, [sp, #4]
   b59ca:	bd08      	pop	{r3, pc}
   b59cc:	0003022c 	.word	0x0003022c

000b59d0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b59d0:	b508      	push	{r3, lr}
   b59d2:	4b02      	ldr	r3, [pc, #8]	; (b59dc <HAL_GPIO_Read+0xc>)
   b59d4:	681b      	ldr	r3, [r3, #0]
   b59d6:	695b      	ldr	r3, [r3, #20]
   b59d8:	9301      	str	r3, [sp, #4]
   b59da:	bd08      	pop	{r3, pc}
   b59dc:	0003022c 	.word	0x0003022c

000b59e0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b59e0:	b508      	push	{r3, lr}
   b59e2:	4b02      	ldr	r3, [pc, #8]	; (b59ec <HAL_DAC_Write+0xc>)
   b59e4:	681b      	ldr	r3, [r3, #0]
   b59e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b59e8:	9301      	str	r3, [sp, #4]
   b59ea:	bd08      	pop	{r3, pc}
   b59ec:	0003022c 	.word	0x0003022c

000b59f0 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b59f0:	b508      	push	{r3, lr}
   b59f2:	4b02      	ldr	r3, [pc, #8]	; (b59fc <hal_adc_read+0xc>)
   b59f4:	681b      	ldr	r3, [r3, #0]
   b59f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b59f8:	9301      	str	r3, [sp, #4]
   b59fa:	bd08      	pop	{r3, pc}
   b59fc:	0003022c 	.word	0x0003022c

000b5a00 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b5a00:	b508      	push	{r3, lr}
   b5a02:	4b02      	ldr	r3, [pc, #8]	; (b5a0c <hal_pwm_write_ext+0xc>)
   b5a04:	681b      	ldr	r3, [r3, #0]
   b5a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b5a08:	9301      	str	r3, [sp, #4]
   b5a0a:	bd08      	pop	{r3, pc}
   b5a0c:	0003022c 	.word	0x0003022c

000b5a10 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5a10:	b508      	push	{r3, lr}
   b5a12:	4b02      	ldr	r3, [pc, #8]	; (b5a1c <hal_i2c_begin+0xc>)
   b5a14:	681b      	ldr	r3, [r3, #0]
   b5a16:	68db      	ldr	r3, [r3, #12]
   b5a18:	9301      	str	r3, [sp, #4]
   b5a1a:	bd08      	pop	{r3, pc}
   b5a1c:	00030228 	.word	0x00030228

000b5a20 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5a20:	b508      	push	{r3, lr}
   b5a22:	4b02      	ldr	r3, [pc, #8]	; (b5a2c <hal_i2c_begin_transmission+0xc>)
   b5a24:	681b      	ldr	r3, [r3, #0]
   b5a26:	699b      	ldr	r3, [r3, #24]
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	bd08      	pop	{r3, pc}
   b5a2c:	00030228 	.word	0x00030228

000b5a30 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5a30:	b508      	push	{r3, lr}
   b5a32:	4b02      	ldr	r3, [pc, #8]	; (b5a3c <hal_i2c_end_transmission+0xc>)
   b5a34:	681b      	ldr	r3, [r3, #0]
   b5a36:	69db      	ldr	r3, [r3, #28]
   b5a38:	9301      	str	r3, [sp, #4]
   b5a3a:	bd08      	pop	{r3, pc}
   b5a3c:	00030228 	.word	0x00030228

000b5a40 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5a40:	b508      	push	{r3, lr}
   b5a42:	4b02      	ldr	r3, [pc, #8]	; (b5a4c <hal_i2c_write+0xc>)
   b5a44:	681b      	ldr	r3, [r3, #0]
   b5a46:	6a1b      	ldr	r3, [r3, #32]
   b5a48:	9301      	str	r3, [sp, #4]
   b5a4a:	bd08      	pop	{r3, pc}
   b5a4c:	00030228 	.word	0x00030228

000b5a50 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5a50:	b508      	push	{r3, lr}
   b5a52:	4b02      	ldr	r3, [pc, #8]	; (b5a5c <hal_i2c_available+0xc>)
   b5a54:	681b      	ldr	r3, [r3, #0]
   b5a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5a58:	9301      	str	r3, [sp, #4]
   b5a5a:	bd08      	pop	{r3, pc}
   b5a5c:	00030228 	.word	0x00030228

000b5a60 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5a60:	b508      	push	{r3, lr}
   b5a62:	4b02      	ldr	r3, [pc, #8]	; (b5a6c <hal_i2c_read+0xc>)
   b5a64:	681b      	ldr	r3, [r3, #0]
   b5a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5a68:	9301      	str	r3, [sp, #4]
   b5a6a:	bd08      	pop	{r3, pc}
   b5a6c:	00030228 	.word	0x00030228

000b5a70 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5a70:	b508      	push	{r3, lr}
   b5a72:	4b02      	ldr	r3, [pc, #8]	; (b5a7c <hal_i2c_peek+0xc>)
   b5a74:	681b      	ldr	r3, [r3, #0]
   b5a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5a78:	9301      	str	r3, [sp, #4]
   b5a7a:	bd08      	pop	{r3, pc}
   b5a7c:	00030228 	.word	0x00030228

000b5a80 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5a80:	b508      	push	{r3, lr}
   b5a82:	4b02      	ldr	r3, [pc, #8]	; (b5a8c <hal_i2c_flush+0xc>)
   b5a84:	681b      	ldr	r3, [r3, #0]
   b5a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a88:	9301      	str	r3, [sp, #4]
   b5a8a:	bd08      	pop	{r3, pc}
   b5a8c:	00030228 	.word	0x00030228

000b5a90 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5a90:	b508      	push	{r3, lr}
   b5a92:	4b02      	ldr	r3, [pc, #8]	; (b5a9c <hal_i2c_is_enabled+0xc>)
   b5a94:	681b      	ldr	r3, [r3, #0]
   b5a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a98:	9301      	str	r3, [sp, #4]
   b5a9a:	bd08      	pop	{r3, pc}
   b5a9c:	00030228 	.word	0x00030228

000b5aa0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5aa0:	b508      	push	{r3, lr}
   b5aa2:	4b02      	ldr	r3, [pc, #8]	; (b5aac <hal_i2c_init+0xc>)
   b5aa4:	681b      	ldr	r3, [r3, #0]
   b5aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5aa8:	9301      	str	r3, [sp, #4]
   b5aaa:	bd08      	pop	{r3, pc}
   b5aac:	00030228 	.word	0x00030228

000b5ab0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5ab0:	b508      	push	{r3, lr}
   b5ab2:	4b02      	ldr	r3, [pc, #8]	; (b5abc <hal_i2c_request_ex+0xc>)
   b5ab4:	681b      	ldr	r3, [r3, #0]
   b5ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ab8:	9301      	str	r3, [sp, #4]
   b5aba:	bd08      	pop	{r3, pc}
   b5abc:	00030228 	.word	0x00030228

000b5ac0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5ac0:	b508      	push	{r3, lr}
   b5ac2:	4b02      	ldr	r3, [pc, #8]	; (b5acc <if_index_to_name+0xc>)
   b5ac4:	681b      	ldr	r3, [r3, #0]
   b5ac6:	695b      	ldr	r3, [r3, #20]
   b5ac8:	9301      	str	r3, [sp, #4]
   b5aca:	bd08      	pop	{r3, pc}
   b5acc:	0003026c 	.word	0x0003026c

000b5ad0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ad0:	b508      	push	{r3, lr}
   b5ad2:	4b02      	ldr	r3, [pc, #8]	; (b5adc <inet_inet_ntop+0xc>)
   b5ad4:	681b      	ldr	r3, [r3, #0]
   b5ad6:	695b      	ldr	r3, [r3, #20]
   b5ad8:	9301      	str	r3, [sp, #4]
   b5ada:	bd08      	pop	{r3, pc}
   b5adc:	00030264 	.word	0x00030264

000b5ae0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5ae0:	b508      	push	{r3, lr}
   b5ae2:	4b02      	ldr	r3, [pc, #8]	; (b5aec <inet_htonl+0xc>)
   b5ae4:	681b      	ldr	r3, [r3, #0]
   b5ae6:	6a1b      	ldr	r3, [r3, #32]
   b5ae8:	9301      	str	r3, [sp, #4]
   b5aea:	bd08      	pop	{r3, pc}
   b5aec:	00030264 	.word	0x00030264

000b5af0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5af0:	b508      	push	{r3, lr}
   b5af2:	4b02      	ldr	r3, [pc, #8]	; (b5afc <inet_htons+0xc>)
   b5af4:	681b      	ldr	r3, [r3, #0]
   b5af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5af8:	9301      	str	r3, [sp, #4]
   b5afa:	bd08      	pop	{r3, pc}
   b5afc:	00030264 	.word	0x00030264

000b5b00 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5b00:	b508      	push	{r3, lr}
   b5b02:	4b02      	ldr	r3, [pc, #8]	; (b5b0c <netdb_freeaddrinfo+0xc>)
   b5b04:	681b      	ldr	r3, [r3, #0]
   b5b06:	689b      	ldr	r3, [r3, #8]
   b5b08:	9301      	str	r3, [sp, #4]
   b5b0a:	bd08      	pop	{r3, pc}
   b5b0c:	00030268 	.word	0x00030268

000b5b10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5b10:	b508      	push	{r3, lr}
   b5b12:	4b02      	ldr	r3, [pc, #8]	; (b5b1c <netdb_getaddrinfo+0xc>)
   b5b14:	681b      	ldr	r3, [r3, #0]
   b5b16:	68db      	ldr	r3, [r3, #12]
   b5b18:	9301      	str	r3, [sp, #4]
   b5b1a:	bd08      	pop	{r3, pc}
   b5b1c:	00030268 	.word	0x00030268

000b5b20 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5b20:	b508      	push	{r3, lr}
   b5b22:	4b02      	ldr	r3, [pc, #8]	; (b5b2c <sock_setsockopt+0xc>)
   b5b24:	681b      	ldr	r3, [r3, #0]
   b5b26:	699b      	ldr	r3, [r3, #24]
   b5b28:	9301      	str	r3, [sp, #4]
   b5b2a:	bd08      	pop	{r3, pc}
   b5b2c:	00030238 	.word	0x00030238

000b5b30 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5b30:	b508      	push	{r3, lr}
   b5b32:	4b02      	ldr	r3, [pc, #8]	; (b5b3c <sock_close+0xc>)
   b5b34:	681b      	ldr	r3, [r3, #0]
   b5b36:	69db      	ldr	r3, [r3, #28]
   b5b38:	9301      	str	r3, [sp, #4]
   b5b3a:	bd08      	pop	{r3, pc}
   b5b3c:	00030238 	.word	0x00030238

000b5b40 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5b40:	b508      	push	{r3, lr}
   b5b42:	4b02      	ldr	r3, [pc, #8]	; (b5b4c <sock_connect+0xc>)
   b5b44:	681b      	ldr	r3, [r3, #0]
   b5b46:	6a1b      	ldr	r3, [r3, #32]
   b5b48:	9301      	str	r3, [sp, #4]
   b5b4a:	bd08      	pop	{r3, pc}
   b5b4c:	00030238 	.word	0x00030238

000b5b50 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5b50:	b508      	push	{r3, lr}
   b5b52:	4b02      	ldr	r3, [pc, #8]	; (b5b5c <sock_recv+0xc>)
   b5b54:	681b      	ldr	r3, [r3, #0]
   b5b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b58:	9301      	str	r3, [sp, #4]
   b5b5a:	bd08      	pop	{r3, pc}
   b5b5c:	00030238 	.word	0x00030238

000b5b60 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5b60:	b508      	push	{r3, lr}
   b5b62:	4b02      	ldr	r3, [pc, #8]	; (b5b6c <sock_send+0xc>)
   b5b64:	681b      	ldr	r3, [r3, #0]
   b5b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5b68:	9301      	str	r3, [sp, #4]
   b5b6a:	bd08      	pop	{r3, pc}
   b5b6c:	00030238 	.word	0x00030238

000b5b70 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5b70:	b508      	push	{r3, lr}
   b5b72:	4b02      	ldr	r3, [pc, #8]	; (b5b7c <sock_socket+0xc>)
   b5b74:	681b      	ldr	r3, [r3, #0]
   b5b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5b78:	9301      	str	r3, [sp, #4]
   b5b7a:	bd08      	pop	{r3, pc}
   b5b7c:	00030238 	.word	0x00030238

000b5b80 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5b80:	b508      	push	{r3, lr}
   b5b82:	4b02      	ldr	r3, [pc, #8]	; (b5b8c <hal_spi_begin+0xc>)
   b5b84:	681b      	ldr	r3, [r3, #0]
   b5b86:	681b      	ldr	r3, [r3, #0]
   b5b88:	9301      	str	r3, [sp, #4]
   b5b8a:	bd08      	pop	{r3, pc}
   b5b8c:	00030230 	.word	0x00030230

000b5b90 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5b90:	b508      	push	{r3, lr}
   b5b92:	4b02      	ldr	r3, [pc, #8]	; (b5b9c <hal_spi_transfer+0xc>)
   b5b94:	681b      	ldr	r3, [r3, #0]
   b5b96:	695b      	ldr	r3, [r3, #20]
   b5b98:	9301      	str	r3, [sp, #4]
   b5b9a:	bd08      	pop	{r3, pc}
   b5b9c:	00030230 	.word	0x00030230

000b5ba0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	4b02      	ldr	r3, [pc, #8]	; (b5bac <hal_spi_init+0xc>)
   b5ba4:	681b      	ldr	r3, [r3, #0]
   b5ba6:	69db      	ldr	r3, [r3, #28]
   b5ba8:	9301      	str	r3, [sp, #4]
   b5baa:	bd08      	pop	{r3, pc}
   b5bac:	00030230 	.word	0x00030230

000b5bb0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5bb0:	b508      	push	{r3, lr}
   b5bb2:	4b02      	ldr	r3, [pc, #8]	; (b5bbc <hal_spi_is_enabled+0xc>)
   b5bb4:	681b      	ldr	r3, [r3, #0]
   b5bb6:	6a1b      	ldr	r3, [r3, #32]
   b5bb8:	9301      	str	r3, [sp, #4]
   b5bba:	bd08      	pop	{r3, pc}
   b5bbc:	00030230 	.word	0x00030230

000b5bc0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5bc0:	b508      	push	{r3, lr}
   b5bc2:	4b02      	ldr	r3, [pc, #8]	; (b5bcc <hal_spi_info+0xc>)
   b5bc4:	681b      	ldr	r3, [r3, #0]
   b5bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5bc8:	9301      	str	r3, [sp, #4]
   b5bca:	bd08      	pop	{r3, pc}
   b5bcc:	00030230 	.word	0x00030230

000b5bd0 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5bd0:	b508      	push	{r3, lr}
   b5bd2:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <hal_spi_set_settings+0xc>)
   b5bd4:	681b      	ldr	r3, [r3, #0]
   b5bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5bd8:	9301      	str	r3, [sp, #4]
   b5bda:	bd08      	pop	{r3, pc}
   b5bdc:	00030230 	.word	0x00030230

000b5be0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5be0:	b508      	push	{r3, lr}
   b5be2:	4b02      	ldr	r3, [pc, #8]	; (b5bec <hal_spi_acquire+0xc>)
   b5be4:	681b      	ldr	r3, [r3, #0]
   b5be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5be8:	9301      	str	r3, [sp, #4]
   b5bea:	bd08      	pop	{r3, pc}
   b5bec:	00030230 	.word	0x00030230

000b5bf0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5bf0:	b508      	push	{r3, lr}
   b5bf2:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <hal_spi_release+0xc>)
   b5bf4:	681b      	ldr	r3, [r3, #0]
   b5bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5bf8:	9301      	str	r3, [sp, #4]
   b5bfa:	bd08      	pop	{r3, pc}
   b5bfc:	00030230 	.word	0x00030230

000b5c00 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5c00:	b508      	push	{r3, lr}
   b5c02:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <hal_usart_write+0xc>)
   b5c04:	681b      	ldr	r3, [r3, #0]
   b5c06:	68db      	ldr	r3, [r3, #12]
   b5c08:	9301      	str	r3, [sp, #4]
   b5c0a:	bd08      	pop	{r3, pc}
   b5c0c:	0003023c 	.word	0x0003023c

000b5c10 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5c10:	b508      	push	{r3, lr}
   b5c12:	4b02      	ldr	r3, [pc, #8]	; (b5c1c <hal_usart_available+0xc>)
   b5c14:	681b      	ldr	r3, [r3, #0]
   b5c16:	691b      	ldr	r3, [r3, #16]
   b5c18:	9301      	str	r3, [sp, #4]
   b5c1a:	bd08      	pop	{r3, pc}
   b5c1c:	0003023c 	.word	0x0003023c

000b5c20 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5c20:	b508      	push	{r3, lr}
   b5c22:	4b02      	ldr	r3, [pc, #8]	; (b5c2c <hal_usart_read+0xc>)
   b5c24:	681b      	ldr	r3, [r3, #0]
   b5c26:	695b      	ldr	r3, [r3, #20]
   b5c28:	9301      	str	r3, [sp, #4]
   b5c2a:	bd08      	pop	{r3, pc}
   b5c2c:	0003023c 	.word	0x0003023c

000b5c30 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5c30:	b508      	push	{r3, lr}
   b5c32:	4b02      	ldr	r3, [pc, #8]	; (b5c3c <hal_usart_peek+0xc>)
   b5c34:	681b      	ldr	r3, [r3, #0]
   b5c36:	699b      	ldr	r3, [r3, #24]
   b5c38:	9301      	str	r3, [sp, #4]
   b5c3a:	bd08      	pop	{r3, pc}
   b5c3c:	0003023c 	.word	0x0003023c

000b5c40 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5c40:	b508      	push	{r3, lr}
   b5c42:	4b02      	ldr	r3, [pc, #8]	; (b5c4c <hal_usart_flush+0xc>)
   b5c44:	681b      	ldr	r3, [r3, #0]
   b5c46:	69db      	ldr	r3, [r3, #28]
   b5c48:	9301      	str	r3, [sp, #4]
   b5c4a:	bd08      	pop	{r3, pc}
   b5c4c:	0003023c 	.word	0x0003023c

000b5c50 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5c50:	b508      	push	{r3, lr}
   b5c52:	4b02      	ldr	r3, [pc, #8]	; (b5c5c <hal_usart_is_enabled+0xc>)
   b5c54:	681b      	ldr	r3, [r3, #0]
   b5c56:	6a1b      	ldr	r3, [r3, #32]
   b5c58:	9301      	str	r3, [sp, #4]
   b5c5a:	bd08      	pop	{r3, pc}
   b5c5c:	0003023c 	.word	0x0003023c

000b5c60 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5c60:	b508      	push	{r3, lr}
   b5c62:	4b02      	ldr	r3, [pc, #8]	; (b5c6c <hal_usart_available_data_for_write+0xc>)
   b5c64:	681b      	ldr	r3, [r3, #0]
   b5c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c68:	9301      	str	r3, [sp, #4]
   b5c6a:	bd08      	pop	{r3, pc}
   b5c6c:	0003023c 	.word	0x0003023c

000b5c70 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5c70:	b508      	push	{r3, lr}
   b5c72:	4b02      	ldr	r3, [pc, #8]	; (b5c7c <hal_usart_begin_config+0xc>)
   b5c74:	681b      	ldr	r3, [r3, #0]
   b5c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c78:	9301      	str	r3, [sp, #4]
   b5c7a:	bd08      	pop	{r3, pc}
   b5c7c:	0003023c 	.word	0x0003023c

000b5c80 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <hal_usart_init_ex+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	0003023c 	.word	0x0003023c

000b5c90 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <HAL_USB_USART_Init+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	681b      	ldr	r3, [r3, #0]
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	0003024c 	.word	0x0003024c

000b5ca0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <HAL_USB_USART_Begin+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	685b      	ldr	r3, [r3, #4]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	0003024c 	.word	0x0003024c

000b5cb0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <HAL_USB_USART_Available_Data+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	691b      	ldr	r3, [r3, #16]
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	0003024c 	.word	0x0003024c

000b5cc0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	695b      	ldr	r3, [r3, #20]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	0003024c 	.word	0x0003024c

000b5cd0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <HAL_USB_USART_Receive_Data+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	699b      	ldr	r3, [r3, #24]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	0003024c 	.word	0x0003024c

000b5ce0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <HAL_USB_USART_Send_Data+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	69db      	ldr	r3, [r3, #28]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	0003024c 	.word	0x0003024c

000b5cf0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <HAL_USB_USART_Flush_Data+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	6a1b      	ldr	r3, [r3, #32]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	0003024c 	.word	0x0003024c

000b5d00 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <LED_SetSignalingColor+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	685b      	ldr	r3, [r3, #4]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030260 	.word	0x00030260

000b5d10 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <LED_Signaling_Start+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	689b      	ldr	r3, [r3, #8]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030260 	.word	0x00030260

000b5d20 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <LED_Signaling_Stop+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	68db      	ldr	r3, [r3, #12]
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030260 	.word	0x00030260

000b5d30 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <LED_RGB_IsOverRidden+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	699b      	ldr	r3, [r3, #24]
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030260 	.word	0x00030260

000b5d40 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <LED_On+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	69db      	ldr	r3, [r3, #28]
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030260 	.word	0x00030260

000b5d50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <panic_+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030260 	.word	0x00030260

000b5d60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <log_message+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	00030260 	.word	0x00030260

000b5d70 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <set_system_mode+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	685b      	ldr	r3, [r3, #4]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	00030220 	.word	0x00030220

000b5d80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <system_delay_ms+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	695b      	ldr	r3, [r3, #20]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	00030220 	.word	0x00030220

000b5d90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b03      	ldr	r3, [pc, #12]	; (b5da0 <system_ctrl_set_app_request_handler+0x10>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5d9a:	9301      	str	r3, [sp, #4]
   b5d9c:	bd08      	pop	{r3, pc}
   b5d9e:	0000      	.short	0x0000
   b5da0:	00030220 	.word	0x00030220

000b5da4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b03      	ldr	r3, [pc, #12]	; (b5db4 <system_ctrl_set_result+0x10>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5dae:	9301      	str	r3, [sp, #4]
   b5db0:	bd08      	pop	{r3, pc}
   b5db2:	0000      	.short	0x0000
   b5db4:	00030220 	.word	0x00030220

000b5db8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5db8:	b508      	push	{r3, lr}
   b5dba:	4b02      	ldr	r3, [pc, #8]	; (b5dc4 <spark_process+0xc>)
   b5dbc:	681b      	ldr	r3, [r3, #0]
   b5dbe:	689b      	ldr	r3, [r3, #8]
   b5dc0:	9301      	str	r3, [sp, #4]
   b5dc2:	bd08      	pop	{r3, pc}
   b5dc4:	00030244 	.word	0x00030244

000b5dc8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5dc8:	b508      	push	{r3, lr}
   b5dca:	4b02      	ldr	r3, [pc, #8]	; (b5dd4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5dcc:	681b      	ldr	r3, [r3, #0]
   b5dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5dd0:	9301      	str	r3, [sp, #4]
   b5dd2:	bd08      	pop	{r3, pc}
   b5dd4:	00030244 	.word	0x00030244

000b5dd8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5dd8:	b508      	push	{r3, lr}
   b5dda:	4b02      	ldr	r3, [pc, #8]	; (b5de4 <network_connect+0xc>)
   b5ddc:	681b      	ldr	r3, [r3, #0]
   b5dde:	685b      	ldr	r3, [r3, #4]
   b5de0:	9301      	str	r3, [sp, #4]
   b5de2:	bd08      	pop	{r3, pc}
   b5de4:	00030240 	.word	0x00030240

000b5de8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5de8:	b508      	push	{r3, lr}
   b5dea:	4b02      	ldr	r3, [pc, #8]	; (b5df4 <network_connecting+0xc>)
   b5dec:	681b      	ldr	r3, [r3, #0]
   b5dee:	689b      	ldr	r3, [r3, #8]
   b5df0:	9301      	str	r3, [sp, #4]
   b5df2:	bd08      	pop	{r3, pc}
   b5df4:	00030240 	.word	0x00030240

000b5df8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5df8:	b508      	push	{r3, lr}
   b5dfa:	4b02      	ldr	r3, [pc, #8]	; (b5e04 <network_disconnect+0xc>)
   b5dfc:	681b      	ldr	r3, [r3, #0]
   b5dfe:	68db      	ldr	r3, [r3, #12]
   b5e00:	9301      	str	r3, [sp, #4]
   b5e02:	bd08      	pop	{r3, pc}
   b5e04:	00030240 	.word	0x00030240

000b5e08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5e08:	b508      	push	{r3, lr}
   b5e0a:	4b02      	ldr	r3, [pc, #8]	; (b5e14 <network_ready+0xc>)
   b5e0c:	681b      	ldr	r3, [r3, #0]
   b5e0e:	691b      	ldr	r3, [r3, #16]
   b5e10:	9301      	str	r3, [sp, #4]
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	00030240 	.word	0x00030240

000b5e18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e18:	b508      	push	{r3, lr}
   b5e1a:	4b02      	ldr	r3, [pc, #8]	; (b5e24 <network_on+0xc>)
   b5e1c:	681b      	ldr	r3, [r3, #0]
   b5e1e:	695b      	ldr	r3, [r3, #20]
   b5e20:	9301      	str	r3, [sp, #4]
   b5e22:	bd08      	pop	{r3, pc}
   b5e24:	00030240 	.word	0x00030240

000b5e28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5e28:	b508      	push	{r3, lr}
   b5e2a:	4b02      	ldr	r3, [pc, #8]	; (b5e34 <network_off+0xc>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	699b      	ldr	r3, [r3, #24]
   b5e30:	9301      	str	r3, [sp, #4]
   b5e32:	bd08      	pop	{r3, pc}
   b5e34:	00030240 	.word	0x00030240

000b5e38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5e38:	b508      	push	{r3, lr}
   b5e3a:	4b02      	ldr	r3, [pc, #8]	; (b5e44 <network_listen+0xc>)
   b5e3c:	681b      	ldr	r3, [r3, #0]
   b5e3e:	69db      	ldr	r3, [r3, #28]
   b5e40:	9301      	str	r3, [sp, #4]
   b5e42:	bd08      	pop	{r3, pc}
   b5e44:	00030240 	.word	0x00030240

000b5e48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5e48:	b508      	push	{r3, lr}
   b5e4a:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <network_listening+0xc>)
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	6a1b      	ldr	r3, [r3, #32]
   b5e50:	9301      	str	r3, [sp, #4]
   b5e52:	bd08      	pop	{r3, pc}
   b5e54:	00030240 	.word	0x00030240

000b5e58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5e58:	b508      	push	{r3, lr}
   b5e5a:	4b02      	ldr	r3, [pc, #8]	; (b5e64 <network_set_listen_timeout+0xc>)
   b5e5c:	681b      	ldr	r3, [r3, #0]
   b5e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e60:	9301      	str	r3, [sp, #4]
   b5e62:	bd08      	pop	{r3, pc}
   b5e64:	00030240 	.word	0x00030240

000b5e68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5e68:	b508      	push	{r3, lr}
   b5e6a:	4b02      	ldr	r3, [pc, #8]	; (b5e74 <network_get_listen_timeout+0xc>)
   b5e6c:	681b      	ldr	r3, [r3, #0]
   b5e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5e70:	9301      	str	r3, [sp, #4]
   b5e72:	bd08      	pop	{r3, pc}
   b5e74:	00030240 	.word	0x00030240

000b5e78 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <network_is_on+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030240 	.word	0x00030240

000b5e88 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <network_is_off+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030240 	.word	0x00030240

000b5e98 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <malloc+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	681b      	ldr	r3, [r3, #0]
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	0003021c 	.word	0x0003021c

000b5ea8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <free+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	685b      	ldr	r3, [r3, #4]
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	0003021c 	.word	0x0003021c

000b5eb8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <realloc+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	689b      	ldr	r3, [r3, #8]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	0003021c 	.word	0x0003021c

000b5ec8 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <snprintf+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	69db      	ldr	r3, [r3, #28]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	0003021c 	.word	0x0003021c

000b5ed8 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <vsnprintf+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	0003021c 	.word	0x0003021c

000b5ee8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <abort+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	0003021c 	.word	0x0003021c

000b5ef8 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <__errno+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	0003021c 	.word	0x0003021c

000b5f08 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <__assert_func+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	0003021c 	.word	0x0003021c

000b5f18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <newlib_impure_ptr_callback+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	0003021c 	.word	0x0003021c

000b5f28 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5f28:	2100      	movs	r1, #0
   b5f2a:	f7ff bf29 	b.w	b5d80 <system_delay_ms>

000b5f2e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5f2e:	4770      	bx	lr

000b5f30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5f30:	4770      	bx	lr

000b5f32 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5f32:	4770      	bx	lr

000b5f34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5f34:	4770      	bx	lr
	...

000b5f38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5f38:	4b06      	ldr	r3, [pc, #24]	; (b5f54 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5f3a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5f3c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5f3e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5f42:	d005      	beq.n	b5f50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5f44:	4608      	mov	r0, r1
   b5f46:	f003 fd63 	bl	b9a10 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5f4a:	2800      	cmp	r0, #0
   b5f4c:	bf08      	it	eq
   b5f4e:	2400      	moveq	r4, #0
      }
   b5f50:	4620      	mov	r0, r4
   b5f52:	bd10      	pop	{r4, pc}
   b5f54:	000ba99c 	.word	0x000ba99c

000b5f58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5f58:	4b06      	ldr	r3, [pc, #24]	; (b5f74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5f5a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5f5c:	b510      	push	{r4, lr}
   b5f5e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5f62:	d005      	beq.n	b5f70 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5f64:	4608      	mov	r0, r1
   b5f66:	f003 fd53 	bl	b9a10 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5f6a:	2800      	cmp	r0, #0
   b5f6c:	bf08      	it	eq
   b5f6e:	2400      	moveq	r4, #0
      }
   b5f70:	4620      	mov	r0, r4
   b5f72:	bd10      	pop	{r4, pc}
   b5f74:	000ba99c 	.word	0x000ba99c

000b5f78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5f78:	4b06      	ldr	r3, [pc, #24]	; (b5f94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5f7a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5f82:	d005      	beq.n	b5f90 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5f84:	4608      	mov	r0, r1
   b5f86:	f003 fd43 	bl	b9a10 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5f8a:	2800      	cmp	r0, #0
   b5f8c:	bf08      	it	eq
   b5f8e:	2400      	moveq	r4, #0
      }
   b5f90:	4620      	mov	r0, r4
   b5f92:	bd10      	pop	{r4, pc}
   b5f94:	000ba99c 	.word	0x000ba99c

000b5f98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5f98:	b510      	push	{r4, lr}
   b5f9a:	2168      	movs	r1, #104	; 0x68
   b5f9c:	4604      	mov	r4, r0
   b5f9e:	f7fe f87c 	bl	b409a <_ZdlPvj>
   b5fa2:	4620      	mov	r0, r4
   b5fa4:	bd10      	pop	{r4, pc}

000b5fa6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5fa6:	b510      	push	{r4, lr}
   b5fa8:	2128      	movs	r1, #40	; 0x28
   b5faa:	4604      	mov	r4, r0
   b5fac:	f7fe f875 	bl	b409a <_ZdlPvj>
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd10      	pop	{r4, pc}

000b5fb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5fb4:	b510      	push	{r4, lr}
   b5fb6:	2130      	movs	r1, #48	; 0x30
   b5fb8:	4604      	mov	r4, r0
   b5fba:	f7fe f86e 	bl	b409a <_ZdlPvj>
   b5fbe:	4620      	mov	r0, r4
   b5fc0:	bd10      	pop	{r4, pc}

000b5fc2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b5fc2:	2168      	movs	r1, #104	; 0x68
   b5fc4:	f7fe b869 	b.w	b409a <_ZdlPvj>

000b5fc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5fc8:	2128      	movs	r1, #40	; 0x28
   b5fca:	f7fe b866 	b.w	b409a <_ZdlPvj>

000b5fce <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b5fce:	2130      	movs	r1, #48	; 0x30
   b5fd0:	f7fe b863 	b.w	b409a <_ZdlPvj>

000b5fd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b5fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5fd6:	2500      	movs	r5, #0
   b5fd8:	1cec      	adds	r4, r5, #3
   b5fda:	428c      	cmp	r4, r1
   b5fdc:	d80d      	bhi.n	b5ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b5fde:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5fe0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5fe2:	5d87      	ldrb	r7, [r0, r6]
   b5fe4:	4297      	cmp	r7, r2
   b5fe6:	d105      	bne.n	b5ff4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5fe8:	4426      	add	r6, r4
   b5fea:	42b1      	cmp	r1, r6
   b5fec:	d305      	bcc.n	b5ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b5fee:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5ff0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5ff4:	3401      	adds	r4, #1
   b5ff6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5ff8:	e7ee      	b.n	b5fd8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5ffa:	2000      	movs	r0, #0
   b5ffc:	e7f9      	b.n	b5ff2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b6000 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b6000:	4a02      	ldr	r2, [pc, #8]	; (b600c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b6002:	4903      	ldr	r1, [pc, #12]	; (b6010 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b6004:	200a      	movs	r0, #10
   b6006:	f7ff bea3 	b.w	b5d50 <panic_>
   b600a:	bf00      	nop
   b600c:	000b5971 	.word	0x000b5971
   b6010:	000ba72c 	.word	0x000ba72c

000b6014 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6014:	b430      	push	{r4, r5}
   b6016:	460d      	mov	r5, r1
   b6018:	4611      	mov	r1, r2
   b601a:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b601c:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b601e:	6809      	ldr	r1, [r1, #0]
   b6020:	6828      	ldr	r0, [r5, #0]
   b6022:	e9d3 4300 	ldrd	r4, r3, [r3]
   b6026:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b6028:	bc30      	pop	{r4, r5}
   b602a:	4760      	bx	ip

000b602c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b602c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b602e:	b538      	push	{r3, r4, r5, lr}
   b6030:	4604      	mov	r4, r0
	switch (__op)
   b6032:	d102      	bne.n	b603a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6034:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6036:	6023      	str	r3, [r4, #0]
	}
   b6038:	e003      	b.n	b6042 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b603a:	2a02      	cmp	r2, #2
   b603c:	d003      	beq.n	b6046 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b603e:	2a03      	cmp	r2, #3
   b6040:	d00d      	beq.n	b605e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b6042:	2000      	movs	r0, #0
   b6044:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6046:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b6048:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b604a:	f7fe f822 	bl	b4092 <_Znwj>
   b604e:	4603      	mov	r3, r0
   b6050:	2800      	cmp	r0, #0
   b6052:	d0f0      	beq.n	b6036 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b6054:	e895 0003 	ldmia.w	r5, {r0, r1}
   b6058:	e883 0003 	stmia.w	r3, {r0, r1}
   b605c:	e7eb      	b.n	b6036 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b605e:	6800      	ldr	r0, [r0, #0]
   b6060:	2800      	cmp	r0, #0
   b6062:	d0ee      	beq.n	b6042 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b6064:	2108      	movs	r1, #8
   b6066:	f7fe f818 	bl	b409a <_ZdlPvj>
   b606a:	e7ea      	b.n	b6042 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b606c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
   b606c:	b510      	push	{r4, lr}
      {
	if (_M_manager)
   b606e:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6070:	4604      	mov	r4, r0
	if (_M_manager)
   b6072:	b12b      	cbz	r3, b6080 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b6074:	2203      	movs	r2, #3
   b6076:	4601      	mov	r1, r0
   b6078:	4798      	blx	r3
	    _M_manager = nullptr;
   b607a:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b607c:	e9c4 3302 	strd	r3, r3, [r4, #8]
	  }
	return *this;
      }
   b6080:	bd10      	pop	{r4, pc}

000b6082 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b6082:	b510      	push	{r4, lr}
	if (_M_manager)
   b6084:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b6086:	4604      	mov	r4, r0
	if (_M_manager)
   b6088:	b12b      	cbz	r3, b6096 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b608a:	2203      	movs	r2, #3
   b608c:	4601      	mov	r1, r0
   b608e:	4798      	blx	r3
	    _M_manager = nullptr;
   b6090:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b6092:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b6096:	bd10      	pop	{r4, pc}

000b6098 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b6098:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b609a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b609c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b609e:	2220      	movs	r2, #32
   b60a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b60a4:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b60a6:	4a08      	ldr	r2, [pc, #32]	; (b60c8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b60a8:	9200      	str	r2, [sp, #0]
   b60aa:	4908      	ldr	r1, [pc, #32]	; (b60cc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b60ac:	aa02      	add	r2, sp, #8
   b60ae:	2001      	movs	r0, #1
   b60b0:	f7ff fe56 	bl	b5d60 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b60b4:	6820      	ldr	r0, [r4, #0]
   b60b6:	4906      	ldr	r1, [pc, #24]	; (b60d0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b60b8:	8800      	ldrh	r0, [r0, #0]
   b60ba:	2300      	movs	r3, #0
   b60bc:	4622      	mov	r2, r4
    }
   b60be:	b00a      	add	sp, #40	; 0x28
   b60c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b60c4:	f7ff bbf8 	b.w	b58b8 <hal_ble_gatt_client_discover_all_services>
   b60c8:	000ba74e 	.word	0x000ba74e
   b60cc:	000ba743 	.word	0x000ba743
   b60d0:	000b7aad 	.word	0x000b7aad

000b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b60d4:	b510      	push	{r4, lr}
   b60d6:	3801      	subs	r0, #1
   b60d8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b60dc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b60e0:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b60e2:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b60e6:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b60e8:	bf88      	it	hi
   b60ea:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b60ee:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b60f2:	7803      	ldrb	r3, [r0, #0]
   b60f4:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b60f8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b60fc:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b60fe:	bf88      	it	hi
   b6100:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b6104:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b6106:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b610a:	d1e7      	bne.n	b60dc <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b610c:	bd10      	pop	{r4, pc}

000b610e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b610e:	b510      	push	{r4, lr}
   b6110:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b6112:	3058      	adds	r0, #88	; 0x58
   b6114:	f7ff fba2 	bl	b585c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b6118:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b611c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6120:	f002 bd1e 	b.w	b8b60 <_ZN6StringD1Ev>

000b6124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b6124:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b6126:	6803      	ldr	r3, [r0, #0]
   b6128:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b612a:	4605      	mov	r5, r0
   b612c:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b612e:	d008      	beq.n	b6142 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b6130:	b111      	cbz	r1, b6138 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b6132:	684b      	ldr	r3, [r1, #4]
   b6134:	3301      	adds	r3, #1
   b6136:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b6138:	6828      	ldr	r0, [r5, #0]
   b613a:	b108      	cbz	r0, b6140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b613c:	f7fe f82c 	bl	b4198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6140:	602c      	str	r4, [r5, #0]
      }
   b6142:	bd38      	pop	{r3, r4, r5, pc}

000b6144 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b6144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6148:	b2da      	uxtb	r2, r3
   b614a:	2a09      	cmp	r2, #9
   b614c:	d801      	bhi.n	b6152 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b614e:	4618      	mov	r0, r3
   b6150:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b6152:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6156:	2b05      	cmp	r3, #5
   b6158:	d801      	bhi.n	b615e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b615a:	3857      	subs	r0, #87	; 0x57
   b615c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b615e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6162:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b6164:	bf94      	ite	ls
   b6166:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b6168:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b616c:	4770      	bx	lr
	...

000b6170 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b6170:	b510      	push	{r4, lr}
            locked_(false) {
   b6172:	2300      	movs	r3, #0
   b6174:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b6176:	4b04      	ldr	r3, [pc, #16]	; (b6188 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b6178:	4604      	mov	r4, r0
   b617a:	6818      	ldr	r0, [r3, #0]
   b617c:	f7ff fbe0 	bl	b5940 <os_mutex_recursive_lock>
        locked_ = true;
   b6180:	2301      	movs	r3, #1
   b6182:	7023      	strb	r3, [r4, #0]
    }
   b6184:	4620      	mov	r0, r4
   b6186:	bd10      	pop	{r4, pc}
   b6188:	2003e6c0 	.word	0x2003e6c0

000b618c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b618c:	b510      	push	{r4, lr}
        if (locked_) {
   b618e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b6190:	4604      	mov	r4, r0
        if (locked_) {
   b6192:	b11b      	cbz	r3, b619c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b6194:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b6196:	6818      	ldr	r0, [r3, #0]
   b6198:	f7ff fbda 	bl	b5950 <os_mutex_recursive_unlock>
    }
   b619c:	4620      	mov	r0, r4
   b619e:	bd10      	pop	{r4, pc}
   b61a0:	2003e6c0 	.word	0x2003e6c0

000b61a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b61a4:	b082      	sub	sp, #8
   b61a6:	4603      	mov	r3, r0
    address_ = addr;
   b61a8:	6808      	ldr	r0, [r1, #0]
   b61aa:	6849      	ldr	r1, [r1, #4]
   b61ac:	466a      	mov	r2, sp
   b61ae:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b61b0:	466a      	mov	r2, sp
   b61b2:	ca03      	ldmia	r2!, {r0, r1}
   b61b4:	6018      	str	r0, [r3, #0]
}
   b61b6:	4618      	mov	r0, r3
    address_ = addr.address_;
   b61b8:	6059      	str	r1, [r3, #4]
}
   b61ba:	b002      	add	sp, #8
   b61bc:	4770      	bx	lr

000b61be <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b61be:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b61c0:	7982      	ldrb	r2, [r0, #6]
   b61c2:	798b      	ldrb	r3, [r1, #6]
   b61c4:	429a      	cmp	r2, r3
   b61c6:	d106      	bne.n	b61d6 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b61c8:	2206      	movs	r2, #6
   b61ca:	f003 fd41 	bl	b9c50 <memcmp>
   b61ce:	fab0 f080 	clz	r0, r0
   b61d2:	0940      	lsrs	r0, r0, #5
}
   b61d4:	bd08      	pop	{r3, pc}
    return false;
   b61d6:	2000      	movs	r0, #0
   b61d8:	e7fc      	b.n	b61d4 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b61da <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b61da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b61de:	6003      	str	r3, [r0, #0]
   b61e0:	8083      	strh	r3, [r0, #4]
}
   b61e2:	2000      	movs	r0, #0
   b61e4:	4770      	bx	lr

000b61e6 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b61e6:	b508      	push	{r3, lr}
   b61e8:	4602      	mov	r2, r0
        : address_{} {
   b61ea:	2100      	movs	r1, #0
   b61ec:	6001      	str	r1, [r0, #0]
   b61ee:	6041      	str	r1, [r0, #4]
    clear();
   b61f0:	f7ff fff3 	bl	b61da <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b61f4:	7191      	strb	r1, [r2, #6]
}
   b61f6:	4610      	mov	r0, r2
   b61f8:	bd08      	pop	{r3, pc}
	...

000b61fc <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b61fc:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b61fe:	2301      	movs	r3, #1
   b6200:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6202:	4b05      	ldr	r3, [pc, #20]	; (b6218 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b6204:	4602      	mov	r2, r0
   b6206:	f103 0110 	add.w	r1, r3, #16
   b620a:	f853 4b04 	ldr.w	r4, [r3], #4
   b620e:	f842 4b04 	str.w	r4, [r2], #4
   b6212:	428b      	cmp	r3, r1
   b6214:	d1f9      	bne.n	b620a <_ZN8particle7BleUuidC1Ev+0xe>
}
   b6216:	bd10      	pop	{r4, pc}
   b6218:	000ba9aa 	.word	0x000ba9aa

000b621c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b621c:	7c0b      	ldrb	r3, [r1, #16]
   b621e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b6222:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b6224:	d10d      	bne.n	b6242 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b6226:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b6228:	4b0c      	ldr	r3, [pc, #48]	; (b625c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b622a:	4602      	mov	r2, r0
   b622c:	f103 0410 	add.w	r4, r3, #16
   b6230:	f853 5b04 	ldr.w	r5, [r3], #4
   b6234:	f842 5b04 	str.w	r5, [r2], #4
   b6238:	42a3      	cmp	r3, r4
   b623a:	d1f9      	bne.n	b6230 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b623c:	880b      	ldrh	r3, [r1, #0]
   b623e:	8183      	strh	r3, [r0, #12]
}
   b6240:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b6242:	2301      	movs	r3, #1
   b6244:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6246:	f101 0210 	add.w	r2, r1, #16
   b624a:	4603      	mov	r3, r0
   b624c:	f851 4b04 	ldr.w	r4, [r1], #4
   b6250:	f843 4b04 	str.w	r4, [r3], #4
   b6254:	4291      	cmp	r1, r2
   b6256:	d1f9      	bne.n	b624c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b6258:	e7f2      	b.n	b6240 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b625a:	bf00      	nop
   b625c:	000ba9aa 	.word	0x000ba9aa

000b6260 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6260:	b510      	push	{r4, lr}
    if (uuid128) {
   b6262:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b6264:	4604      	mov	r4, r0
    if (uuid128) {
   b6266:	b1b1      	cbz	r1, b6296 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b6268:	2a01      	cmp	r2, #1
   b626a:	f101 0210 	add.w	r2, r1, #16
   b626e:	d10a      	bne.n	b6286 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b6270:	4601      	mov	r1, r0
   b6272:	f853 0b04 	ldr.w	r0, [r3], #4
   b6276:	f841 0b04 	str.w	r0, [r1], #4
   b627a:	4293      	cmp	r3, r2
   b627c:	d1f9      	bne.n	b6272 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b627e:	2301      	movs	r3, #1
   b6280:	6123      	str	r3, [r4, #16]
}
   b6282:	4620      	mov	r0, r4
   b6284:	bd10      	pop	{r4, pc}
   b6286:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b6288:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b628c:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b6290:	429a      	cmp	r2, r3
   b6292:	d1f9      	bne.n	b6288 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b6294:	e7f3      	b.n	b627e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b6296:	2210      	movs	r2, #16
   b6298:	f003 fd12 	bl	b9cc0 <memset>
   b629c:	e7f1      	b.n	b6282 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b629e <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b629e:	b538      	push	{r3, r4, r5, lr}
   b62a0:	4604      	mov	r4, r0
   b62a2:	460d      	mov	r5, r1
        : BleUuid() {
   b62a4:	f7ff ffaa 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b62a8:	2300      	movs	r3, #0
   b62aa:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b62ac:	81a5      	strh	r5, [r4, #12]
}
   b62ae:	4620      	mov	r0, r4
   b62b0:	bd38      	pop	{r3, r4, r5, pc}

000b62b2 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b62b2:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b62b4:	6902      	ldr	r2, [r0, #16]
   b62b6:	690b      	ldr	r3, [r1, #16]
   b62b8:	429a      	cmp	r2, r3
   b62ba:	d106      	bne.n	b62ca <_ZNK8particle7BleUuideqERKS0_+0x18>
   b62bc:	2210      	movs	r2, #16
   b62be:	f003 fcc7 	bl	b9c50 <memcmp>
   b62c2:	fab0 f080 	clz	r0, r0
   b62c6:	0940      	lsrs	r0, r0, #5
}
   b62c8:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b62ca:	2000      	movs	r0, #0
   b62cc:	e7fc      	b.n	b62c8 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b62d0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b62d0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b62d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b62d6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b62d8:	4b34      	ldr	r3, [pc, #208]	; (b63ac <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b62da:	460c      	mov	r4, r1
   b62dc:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b62de:	4602      	mov	r2, r0
   b62e0:	f103 0110 	add.w	r1, r3, #16
   b62e4:	f853 0b04 	ldr.w	r0, [r3], #4
   b62e8:	f842 0b04 	str.w	r0, [r2], #4
   b62ec:	428b      	cmp	r3, r1
   b62ee:	d1f9      	bne.n	b62e4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b62f0:	b344      	cbz	r4, b6344 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b62f2:	2124      	movs	r1, #36	; 0x24
   b62f4:	4620      	mov	r0, r4
   b62f6:	f003 fd46 	bl	b9d86 <strnlen>
   b62fa:	2804      	cmp	r0, #4
   b62fc:	f04f 0500 	mov.w	r5, #0
   b6300:	d123      	bne.n	b634a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b6302:	f8ad 5004 	strh.w	r5, [sp, #4]
   b6306:	af01      	add	r7, sp, #4
   b6308:	1ca5      	adds	r5, r4, #2
   b630a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b630c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b6310:	f7ff ff18 	bl	b6144 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b6314:	f1b0 0800 	subs.w	r8, r0, #0
   b6318:	db12      	blt.n	b6340 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b631a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b631e:	f7ff ff11 	bl	b6144 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b6322:	2800      	cmp	r0, #0
   b6324:	db0c      	blt.n	b6340 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b6326:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b6328:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b632c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b632e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b6332:	d1eb      	bne.n	b630c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b6334:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b6338:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b633a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b633e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b6340:	2300      	movs	r3, #0
   b6342:	6133      	str	r3, [r6, #16]
}
   b6344:	b002      	add	sp, #8
   b6346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b634a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b634e:	2124      	movs	r1, #36	; 0x24
   b6350:	4620      	mov	r0, r4
   b6352:	f003 fd18 	bl	b9d86 <strnlen>
   b6356:	42a8      	cmp	r0, r5
   b6358:	d807      	bhi.n	b636a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b635a:	4642      	mov	r2, r8
   b635c:	2100      	movs	r1, #0
   b635e:	4630      	mov	r0, r6
}
   b6360:	b002      	add	sp, #8
   b6362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b6366:	f003 bcab 	b.w	b9cc0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b636a:	f1b8 0f00 	cmp.w	r8, #0
   b636e:	d0e9      	beq.n	b6344 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b6370:	5d60      	ldrb	r0, [r4, r5]
   b6372:	f7ff fee7 	bl	b6144 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b6376:	0603      	lsls	r3, r0, #24
   b6378:	d415      	bmi.n	b63a6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b637a:	0100      	lsls	r0, r0, #4
   b637c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b6380:	b2c7      	uxtb	r7, r0
   b6382:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b6386:	2124      	movs	r1, #36	; 0x24
   b6388:	4620      	mov	r0, r4
   b638a:	f003 fcfc 	bl	b9d86 <strnlen>
   b638e:	3501      	adds	r5, #1
   b6390:	42a8      	cmp	r0, r5
   b6392:	d908      	bls.n	b63a6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b6394:	5d60      	ldrb	r0, [r4, r5]
   b6396:	f7ff fed5 	bl	b6144 <_ZN8particle11hexToNibbleEc>
   b639a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b639c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b639e:	bfa4      	itt	ge
   b63a0:	4338      	orrge	r0, r7
   b63a2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b63a6:	3501      	adds	r5, #1
   b63a8:	e7d1      	b.n	b634e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b63aa:	bf00      	nop
   b63ac:	000ba9aa 	.word	0x000ba9aa

000b63b0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b63b0:	b513      	push	{r0, r1, r4, lr}
   b63b2:	4604      	mov	r4, r0
   b63b4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b63b6:	f7ff ff21 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b63ba:	4620      	mov	r0, r4
   b63bc:	9901      	ldr	r1, [sp, #4]
   b63be:	f7ff ff87 	bl	b62d0 <_ZN8particle7BleUuid9constructEPKc>
}
   b63c2:	4620      	mov	r0, r4
   b63c4:	b002      	add	sp, #8
   b63c6:	bd10      	pop	{r4, pc}

000b63c8 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b63c8:	b510      	push	{r4, lr}
   b63ca:	f100 030f 	add.w	r3, r0, #15
   b63ce:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b63d0:	781c      	ldrb	r4, [r3, #0]
   b63d2:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b63d6:	4283      	cmp	r3, r0
   b63d8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b63dc:	d1f8      	bne.n	b63d0 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b63de:	bd10      	pop	{r4, pc}

000b63e0 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b63e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b63e4:	461f      	mov	r7, r3
   b63e6:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b63e8:	460d      	mov	r5, r1
   b63ea:	2900      	cmp	r1, #0
   b63ec:	d05b      	beq.n	b64a6 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b63ee:	b1da      	cbz	r2, b6428 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b63f0:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b63f4:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b63f6:	f1b8 0f00 	cmp.w	r8, #0
   b63fa:	d119      	bne.n	b6430 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b63fc:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b63fe:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b6402:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b6404:	aa05      	add	r2, sp, #20
   b6406:	2102      	movs	r1, #2
   b6408:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b640a:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b640e:	f7ff fe61 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b6412:	2c04      	cmp	r4, #4
   b6414:	bf28      	it	cs
   b6416:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b6418:	4622      	mov	r2, r4
   b641a:	a905      	add	r1, sp, #20
   b641c:	4628      	mov	r0, r5
   b641e:	f003 fc27 	bl	b9c70 <memcpy>
        buf[len++] = '\0';
   b6422:	f805 8004 	strb.w	r8, [r5, r4]
   b6426:	1c62      	adds	r2, r4, #1
}
   b6428:	4610      	mov	r0, r2
   b642a:	b00e      	add	sp, #56	; 0x38
   b642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b6430:	a901      	add	r1, sp, #4
   b6432:	f7ff ffc9 	bl	b63c8 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b6436:	aa05      	add	r2, sp, #20
    if (stripped) {
   b6438:	b17f      	cbz	r7, b645a <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b643a:	2110      	movs	r1, #16
   b643c:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b643e:	f7ff fe49 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b6442:	2c24      	cmp	r4, #36	; 0x24
   b6444:	bf28      	it	cs
   b6446:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b6448:	4622      	mov	r2, r4
   b644a:	a905      	add	r1, sp, #20
   b644c:	4628      	mov	r0, r5
   b644e:	f003 fc0f 	bl	b9c70 <memcpy>
    buf[len++] = '\0';
   b6452:	2300      	movs	r3, #0
   b6454:	552b      	strb	r3, [r5, r4]
   b6456:	1c62      	adds	r2, r4, #1
    return len;
   b6458:	e7e6      	b.n	b6428 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b645a:	2104      	movs	r1, #4
   b645c:	eb0d 0001 	add.w	r0, sp, r1
   b6460:	f7ff fe38 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b6464:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b6466:	f10d 021d 	add.w	r2, sp, #29
   b646a:	2102      	movs	r1, #2
   b646c:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b646e:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b6472:	f7ff fe2f 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b6476:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b647a:	2102      	movs	r1, #2
   b647c:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b6480:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b6484:	f7ff fe26 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b6488:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b648c:	2102      	movs	r1, #2
   b648e:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b6490:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b6494:	f7ff fe1e 	bl	b60d4 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b6498:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b649c:	aa0b      	add	r2, sp, #44	; 0x2c
   b649e:	2106      	movs	r1, #6
   b64a0:	f10d 000e 	add.w	r0, sp, #14
   b64a4:	e7cb      	b.n	b643e <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b64a6:	460a      	mov	r2, r1
   b64a8:	e7be      	b.n	b6428 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b64aa <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b64aa:	b510      	push	{r4, lr}
   b64ac:	b08a      	sub	sp, #40	; 0x28
   b64ae:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b64b0:	2300      	movs	r3, #0
   b64b2:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b64b4:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b64b6:	4669      	mov	r1, sp
   b64b8:	f7ff ff92 	bl	b63e0 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b64bc:	4669      	mov	r1, sp
   b64be:	4620      	mov	r0, r4
   b64c0:	f002 fb99 	bl	b8bf6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b64c4:	4620      	mov	r0, r4
   b64c6:	b00a      	add	sp, #40	; 0x28
   b64c8:	bd10      	pop	{r4, pc}

000b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b64ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b64cc:	4605      	mov	r5, r0
   b64ce:	4616      	mov	r6, r2
   b64d0:	461f      	mov	r7, r3
   b64d2:	460a      	mov	r2, r1
   b64d4:	ab01      	add	r3, sp, #4
   b64d6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b64da:	f7ff fd7b 	bl	b5fd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b64de:	f030 0402 	bics.w	r4, r0, #2
   b64e2:	d00c      	beq.n	b64fe <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b64e4:	1e84      	subs	r4, r0, #2
   b64e6:	42bc      	cmp	r4, r7
   b64e8:	bf28      	it	cs
   b64ea:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b64ec:	b13e      	cbz	r6, b64fe <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b64ee:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b64f0:	682b      	ldr	r3, [r5, #0]
   b64f2:	3102      	adds	r1, #2
   b64f4:	4622      	mov	r2, r4
   b64f6:	4419      	add	r1, r3
   b64f8:	4630      	mov	r0, r6
   b64fa:	f003 fbb9 	bl	b9c70 <memcpy>
}
   b64fe:	4620      	mov	r0, r4
   b6500:	b003      	add	sp, #12
   b6502:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6504 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6504:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6506:	4613      	mov	r3, r2
   b6508:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b650a:	9201      	str	r2, [sp, #4]
   b650c:	460a      	mov	r2, r1
   b650e:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b6510:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6512:	f7ff ffda 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b6516:	b940      	cbnz	r0, b652a <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6518:	9b01      	ldr	r3, [sp, #4]
   b651a:	4622      	mov	r2, r4
   b651c:	2109      	movs	r1, #9
   b651e:	4628      	mov	r0, r5
}
   b6520:	b003      	add	sp, #12
   b6522:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b6526:	f7ff bfd0 	b.w	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b652a:	b003      	add	sp, #12
   b652c:	bd30      	pop	{r4, r5, pc}
	...

000b6530 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b6530:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6532:	460c      	mov	r4, r1
   b6534:	b089      	sub	sp, #36	; 0x24
    String name;
   b6536:	490c      	ldr	r1, [pc, #48]	; (b6568 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b6538:	4605      	mov	r5, r0
    String name;
   b653a:	f002 fb5c 	bl	b8bf6 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b653e:	221f      	movs	r2, #31
   b6540:	4669      	mov	r1, sp
   b6542:	4620      	mov	r0, r4
   b6544:	f7ff ffde 	bl	b6504 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b6548:	4606      	mov	r6, r0
   b654a:	b150      	cbz	r0, b6562 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b654c:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b654e:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b6550:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6554:	4628      	mov	r0, r5
   b6556:	f002 fbdf 	bl	b8d18 <_ZN6String6concatEc>
   b655a:	b110      	cbz	r0, b6562 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b655c:	3701      	adds	r7, #1
   b655e:	42be      	cmp	r6, r7
   b6560:	d1f6      	bne.n	b6550 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b6562:	4628      	mov	r0, r5
   b6564:	b009      	add	sp, #36	; 0x24
   b6566:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b6568:	000ba0cd 	.word	0x000ba0cd

000b656c <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b656c:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b656e:	2302      	movs	r3, #2
   b6570:	aa01      	add	r2, sp, #4
   b6572:	2119      	movs	r1, #25
   b6574:	f7ff ffa9 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b6578:	b108      	cbz	r0, b657e <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b657a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b657e:	b003      	add	sp, #12
   b6580:	f85d fb04 	ldr.w	pc, [sp], #4

000b6584 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b6584:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b6586:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b658a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b658c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b658e:	8043      	strh	r3, [r0, #2]
   b6590:	220e      	movs	r2, #14
   b6592:	4629      	mov	r1, r5
   b6594:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b6596:	7105      	strb	r5, [r0, #4]
   b6598:	3006      	adds	r0, #6
   b659a:	f003 fb91 	bl	b9cc0 <memset>
   b659e:	f104 0014 	add.w	r0, r4, #20
   b65a2:	f7ff fe2b 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
   b65a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b65aa:	f7ff fe27 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
   b65ae:	4904      	ldr	r1, [pc, #16]	; (b65c0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b65b0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b65b4:	f002 fb1f 	bl	b8bf6 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b65b8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b65ba:	4620      	mov	r0, r4
   b65bc:	bd38      	pop	{r3, r4, r5, pc}
   b65be:	bf00      	nop
   b65c0:	000ba0cd 	.word	0x000ba0cd

000b65c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b65c4:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b65c6:	680d      	ldr	r5, [r1, #0]
   b65c8:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b65ca:	4601      	mov	r1, r0
   b65cc:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b65d0:	f7ff fe6f 	bl	b62b2 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b65d4:	b140      	cbz	r0, b65e8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b65d6:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b65d8:	8aa2      	ldrh	r2, [r4, #20]
   b65da:	429a      	cmp	r2, r3
   b65dc:	d805      	bhi.n	b65ea <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b65de:	8ae0      	ldrh	r0, [r4, #22]
   b65e0:	4298      	cmp	r0, r3
   b65e2:	bf34      	ite	cc
   b65e4:	2000      	movcc	r0, #0
   b65e6:	2001      	movcs	r0, #1
    }
   b65e8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b65ea:	2000      	movs	r0, #0
   b65ec:	e7fc      	b.n	b65e8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b65ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b65ee:	b510      	push	{r4, lr}
    return data_ + size_;
   b65f0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b65f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b65f8:	4293      	cmp	r3, r2
   b65fa:	4618      	mov	r0, r3
   b65fc:	d006      	beq.n	b660c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b65fe:	6804      	ldr	r4, [r0, #0]
   b6600:	8824      	ldrh	r4, [r4, #0]
   b6602:	428c      	cmp	r4, r1
   b6604:	f103 0308 	add.w	r3, r3, #8
   b6608:	d1f6      	bne.n	b65f8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b660a:	bd10      	pop	{r4, pc}
        return nullptr;
   b660c:	2000      	movs	r0, #0
   b660e:	e7fc      	b.n	b660a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b6610 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6610:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b6612:	b570      	push	{r4, r5, r6, lr}
   b6614:	6003      	str	r3, [r0, #0]
   b6616:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6618:	2068      	movs	r0, #104	; 0x68
   b661a:	f7fd fd3a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b661e:	1e04      	subs	r4, r0, #0
   b6620:	f104 060c 	add.w	r6, r4, #12
   b6624:	d007      	beq.n	b6636 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b6626:	2301      	movs	r3, #1
   b6628:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b662c:	4b04      	ldr	r3, [pc, #16]	; (b6640 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b662e:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6630:	4630      	mov	r0, r6
   b6632:	f7ff ffa7 	bl	b6584 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b6636:	e9c5 6400 	strd	r6, r4, [r5]
}
   b663a:	4628      	mov	r0, r5
   b663c:	bd70      	pop	{r4, r5, r6, pc}
   b663e:	bf00      	nop
   b6640:	000ba950 	.word	0x000ba950

000b6644 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b6644:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b6646:	680c      	ldr	r4, [r1, #0]
   b6648:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b664a:	4606      	mov	r6, r0
    return impl()->charUUID();
   b664c:	4605      	mov	r5, r0
   b664e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6652:	6823      	ldr	r3, [r4, #0]
   b6654:	602b      	str	r3, [r5, #0]
}
   b6656:	4630      	mov	r0, r6
   b6658:	bd70      	pop	{r4, r5, r6, pc}
	...

000b665c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b665c:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b665e:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6660:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b6662:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b6664:	bb52      	cbnz	r2, b66bc <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b6666:	885c      	ldrh	r4, [r3, #2]
   b6668:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b666c:	4284      	cmp	r4, r0
   b666e:	d025      	beq.n	b66bc <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b6670:	8a18      	ldrh	r0, [r3, #16]
   b6672:	b330      	cbz	r0, b66c2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b6674:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b6678:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b667a:	4a13      	ldr	r2, [pc, #76]	; (b66c8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b667c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b667e:	4a13      	ldr	r2, [pc, #76]	; (b66cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b6680:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b6684:	885a      	ldrh	r2, [r3, #2]
   b6686:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b668a:	8a1a      	ldrh	r2, [r3, #16]
   b668c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b6690:	899a      	ldrh	r2, [r3, #12]
   b6692:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b6696:	b159      	cbz	r1, b66b0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b6698:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b669a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b669c:	bf44      	itt	mi
   b669e:	2202      	movmi	r2, #2
   b66a0:	9205      	strmi	r2, [sp, #20]
   b66a2:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b66a4:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b66a6:	bf42      	ittt	mi
   b66a8:	9b05      	ldrmi	r3, [sp, #20]
   b66aa:	f043 0301 	orrmi.w	r3, r3, #1
   b66ae:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b66b0:	2100      	movs	r1, #0
   b66b2:	4668      	mov	r0, sp
   b66b4:	f7ff f932 	bl	b591c <hal_ble_gatt_client_configure_cccd>
}
   b66b8:	b006      	add	sp, #24
   b66ba:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b66bc:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b66c0:	e7fa      	b.n	b66b8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b66c2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b66c6:	e7f7      	b.n	b66b8 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b66c8:	00180003 	.word	0x00180003
   b66cc:	000b68a1 	.word	0x000b68a1

000b66d0 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b66d2:	2600      	movs	r6, #0
   b66d4:	6006      	str	r6, [r0, #0]
   b66d6:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b66d8:	2028      	movs	r0, #40	; 0x28
   b66da:	f7fd fcda 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b66de:	1e04      	subs	r4, r0, #0
   b66e0:	f104 070c 	add.w	r7, r4, #12
   b66e4:	d00a      	beq.n	b66fc <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b66e6:	2301      	movs	r3, #1
   b66e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b66ec:	4b05      	ldr	r3, [pc, #20]	; (b6704 <_ZN8particle10BleServiceC1Ev+0x34>)
   b66ee:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b66f0:	4638      	mov	r0, r7
   b66f2:	f7ff fd83 	bl	b61fc <_ZN8particle7BleUuidC1Ev>
   b66f6:	6226      	str	r6, [r4, #32]
   b66f8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b66fc:	e9c5 7400 	strd	r7, r4, [r5]
}
   b6700:	4628      	mov	r0, r5
   b6702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6704:	000ba96c 	.word	0x000ba96c

000b6708 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b6708:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b670a:	2500      	movs	r5, #0
   b670c:	6005      	str	r5, [r0, #0]
   b670e:	4606      	mov	r6, r0
   b6710:	2030      	movs	r0, #48	; 0x30
   b6712:	f7fd fcbe 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6716:	4604      	mov	r4, r0
   b6718:	b188      	cbz	r0, b673e <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b671a:	2301      	movs	r3, #1
   b671c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b6720:	4b09      	ldr	r3, [pc, #36]	; (b6748 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b6722:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b6724:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b6728:	8183      	strh	r3, [r0, #12]
   b672a:	300e      	adds	r0, #14
   b672c:	f7ff fd5b 	bl	b61e6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b6730:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b6734:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b6738:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b673c:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b673e:	6074      	str	r4, [r6, #4]
   b6740:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b6742:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b6744:	4630      	mov	r0, r6
   b6746:	bd70      	pop	{r4, r5, r6, pc}
   b6748:	000ba988 	.word	0x000ba988

000b674c <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b674c:	b513      	push	{r0, r1, r4, lr}
   b674e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b6750:	a801      	add	r0, sp, #4
   b6752:	f7ff fd0d 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6756:	6823      	ldr	r3, [r4, #0]
   b6758:	881c      	ldrh	r4, [r3, #0]
   b675a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b675e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b6760:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b6762:	bf18      	it	ne
   b6764:	2401      	movne	r4, #1
    WiringBleLock lk;
   b6766:	f7ff fd11 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b676a:	4620      	mov	r0, r4
   b676c:	b002      	add	sp, #8
   b676e:	bd10      	pop	{r4, pc}

000b6770 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b6770:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6772:	4605      	mov	r5, r0
   b6774:	460c      	mov	r4, r1
    WiringBleLock lk;
   b6776:	a801      	add	r0, sp, #4
   b6778:	f7ff fcfa 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b677c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b677e:	6823      	ldr	r3, [r4, #0]
   b6780:	f8c2 3002 	str.w	r3, [r2, #2]
   b6784:	6863      	ldr	r3, [r4, #4]
   b6786:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b678a:	a801      	add	r0, sp, #4
   b678c:	f7ff fcfe 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b6790:	b003      	add	sp, #12
   b6792:	bd30      	pop	{r4, r5, pc}

000b6794 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b6794:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6796:	460d      	mov	r5, r1
   b6798:	4604      	mov	r4, r0
    WiringBleLock lk;
   b679a:	a801      	add	r0, sp, #4
   b679c:	f7ff fce8 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
   b67a0:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b67a2:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b67a6:	6023      	str	r3, [r4, #0]
   b67a8:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b67ac:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b67ae:	a801      	add	r0, sp, #4
   b67b0:	f7ff fcec 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b67b4:	4620      	mov	r0, r4
   b67b6:	b003      	add	sp, #12
   b67b8:	bd30      	pop	{r4, r5, pc}

000b67ba <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b67ba:	b530      	push	{r4, r5, lr}
   b67bc:	4605      	mov	r5, r0
   b67be:	b087      	sub	sp, #28
   b67c0:	460c      	mov	r4, r1
    WiringBleLock lk;
   b67c2:	a801      	add	r0, sp, #4
   b67c4:	f7ff fcd4 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b67c8:	682a      	ldr	r2, [r5, #0]
   b67ca:	6823      	ldr	r3, [r4, #0]
   b67cc:	8812      	ldrh	r2, [r2, #0]
   b67ce:	881b      	ldrh	r3, [r3, #0]
   b67d0:	429a      	cmp	r2, r3
   b67d2:	d10d      	bne.n	b67f0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b67d4:	4629      	mov	r1, r5
   b67d6:	a802      	add	r0, sp, #8
   b67d8:	f7ff ffdc 	bl	b6794 <_ZNK8particle13BlePeerDevice7addressEv>
   b67dc:	4621      	mov	r1, r4
   b67de:	a804      	add	r0, sp, #16
   b67e0:	f7ff ffd8 	bl	b6794 <_ZNK8particle13BlePeerDevice7addressEv>
   b67e4:	a904      	add	r1, sp, #16
   b67e6:	a802      	add	r0, sp, #8
   b67e8:	f7ff fce9 	bl	b61be <_ZNK8particle10BleAddresseqERKS0_>
   b67ec:	4604      	mov	r4, r0
   b67ee:	b900      	cbnz	r0, b67f2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b67f0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b67f2:	a801      	add	r0, sp, #4
   b67f4:	f7ff fcca 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b67f8:	4620      	mov	r0, r4
   b67fa:	b007      	add	sp, #28
   b67fc:	bd30      	pop	{r4, r5, pc}
	...

000b6800 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b6800:	b510      	push	{r4, lr}
   b6802:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b6804:	2064      	movs	r0, #100	; 0x64
   b6806:	f7fd fc44 	bl	b4092 <_Znwj>
   b680a:	b168      	cbz	r0, b6828 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b680c:	2300      	movs	r3, #0
   b680e:	e9c0 3300 	strd	r3, r3, [r0]
   b6812:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b6816:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b681a:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b681e:	6203      	str	r3, [r0, #32]
   b6820:	62c3      	str	r3, [r0, #44]	; 0x2c
   b6822:	63c3      	str	r3, [r0, #60]	; 0x3c
   b6824:	64c3      	str	r3, [r0, #76]	; 0x4c
   b6826:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b6828:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b682a:	b920      	cbnz	r0, b6836 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b682c:	4a0a      	ldr	r2, [pc, #40]	; (b6858 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b682e:	490b      	ldr	r1, [pc, #44]	; (b685c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b6830:	200a      	movs	r0, #10
   b6832:	f7ff fa8d 	bl	b5d50 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b6836:	2000      	movs	r0, #0
   b6838:	f7ff f81a 	bl	b5870 <hal_ble_stack_init>
   b683c:	b120      	cbz	r0, b6848 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b683e:	4a06      	ldr	r2, [pc, #24]	; (b6858 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b6840:	4907      	ldr	r1, [pc, #28]	; (b6860 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b6842:	200a      	movs	r0, #10
   b6844:	f7ff fa84 	bl	b5d50 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b6848:	6821      	ldr	r1, [r4, #0]
   b684a:	4806      	ldr	r0, [pc, #24]	; (b6864 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b684c:	2200      	movs	r2, #0
   b684e:	f7ff f85b 	bl	b5908 <hal_ble_set_callback_on_periph_link_events>
}
   b6852:	4620      	mov	r0, r4
   b6854:	bd10      	pop	{r4, pc}
   b6856:	bf00      	nop
   b6858:	000b5971 	.word	0x000b5971
   b685c:	000ba72c 	.word	0x000ba72c
   b6860:	000ba76a 	.word	0x000ba76a
   b6864:	000b7271 	.word	0x000b7271

000b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b6868:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b686a:	4c0a      	ldr	r4, [pc, #40]	; (b6894 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b686c:	7823      	ldrb	r3, [r4, #0]
   b686e:	f3bf 8f5b 	dmb	ish
   b6872:	07db      	lsls	r3, r3, #31
   b6874:	d40c      	bmi.n	b6890 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b6876:	4620      	mov	r0, r4
   b6878:	f7fd fc1e 	bl	b40b8 <__cxa_guard_acquire>
   b687c:	b140      	cbz	r0, b6890 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b687e:	4806      	ldr	r0, [pc, #24]	; (b6898 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6880:	f7ff ffbe 	bl	b6800 <_ZN8particle14BleLocalDeviceC1Ev>
   b6884:	4620      	mov	r0, r4
   b6886:	f7fd fc1c 	bl	b40c2 <__cxa_guard_release>
   b688a:	4804      	ldr	r0, [pc, #16]	; (b689c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b688c:	f003 f9d2 	bl	b9c34 <atexit>
    return instance;
}
   b6890:	4801      	ldr	r0, [pc, #4]	; (b6898 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b6892:	bd10      	pop	{r4, pc}
   b6894:	2003e6bc 	.word	0x2003e6bc
   b6898:	2003e6c4 	.word	0x2003e6c4
   b689c:	000b6b75 	.word	0x000b6b75

000b68a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b68a0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b68a2:	6803      	ldr	r3, [r0, #0]
   b68a4:	3b09      	subs	r3, #9
   b68a6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b68a8:	b08d      	sub	sp, #52	; 0x34
   b68aa:	4604      	mov	r4, r0
   b68ac:	460d      	mov	r5, r1
    switch (event->type) {
   b68ae:	d811      	bhi.n	b68d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b68b0:	f7ff ffda 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b68b4:	88a1      	ldrh	r1, [r4, #4]
   b68b6:	6800      	ldr	r0, [r0, #0]
   b68b8:	f7ff fe99 	bl	b65ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b68bc:	4603      	mov	r3, r0
   b68be:	b958      	cbnz	r0, b68d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b68c0:	2220      	movs	r2, #32
   b68c2:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b68c6:	4a0b      	ldr	r2, [pc, #44]	; (b68f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b68c8:	9200      	str	r2, [sp, #0]
   b68ca:	490b      	ldr	r1, [pc, #44]	; (b68f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b68cc:	aa04      	add	r2, sp, #16
   b68ce:	2032      	movs	r0, #50	; 0x32
   b68d0:	f7ff fa46 	bl	b5d60 <log_message>
}
   b68d4:	b00d      	add	sp, #52	; 0x34
   b68d6:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b68d8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b68da:	2a00      	cmp	r2, #0
   b68dc:	d0fa      	beq.n	b68d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b68de:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b68e2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b68e6:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b68ea:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b68ec:	aa04      	add	r2, sp, #16
   b68ee:	a903      	add	r1, sp, #12
   b68f0:	47a0      	blx	r4
}
   b68f2:	e7ef      	b.n	b68d4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b68f4:	000ba7ac 	.word	0x000ba7ac
   b68f8:	000ba743 	.word	0x000ba743

000b68fc <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b68fc:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b68fe:	2000      	movs	r0, #0
   b6900:	f7fe ffb6 	bl	b5870 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b6904:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b6908:	bd08      	pop	{r3, pc}
	...

000b690c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b690c:	b570      	push	{r4, r5, r6, lr}
   b690e:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b6910:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b6912:	460e      	mov	r6, r1
   b6914:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b6916:	f7ff fba9 	bl	b606c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b691a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b691e:	f7ff fbb0 	bl	b6082 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b6922:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b6926:	2200      	movs	r2, #0
   b6928:	4621      	mov	r1, r4
   b692a:	4803      	ldr	r0, [pc, #12]	; (b6938 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b692c:	f7fe ffa8 	bl	b5880 <hal_ble_gap_start_scan>
   b6930:	2800      	cmp	r0, #0
        return foundCount_;
   b6932:	bfa8      	it	ge
   b6934:	6960      	ldrge	r0, [r4, #20]
    }
   b6936:	bd70      	pop	{r4, r5, r6, pc}
   b6938:	000b81e9 	.word	0x000b81e9

000b693c <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b693c:	b510      	push	{r4, lr}
   b693e:	4604      	mov	r4, r0
    ::free(ptr);
   b6940:	6940      	ldr	r0, [r0, #20]
   b6942:	f7ff fab1 	bl	b5ea8 <free>
   b6946:	68a0      	ldr	r0, [r4, #8]
   b6948:	f7ff faae 	bl	b5ea8 <free>
   b694c:	4620      	mov	r0, r4
   b694e:	bd10      	pop	{r4, pc}

000b6950 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b6950:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b6952:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b6956:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b695a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b695e:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b6962:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b6966:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b696a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b696e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b6972:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b6976:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b697a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b697e:	6202      	str	r2, [r0, #32]
   b6980:	6302      	str	r2, [r0, #48]	; 0x30
   b6982:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b6986:	4770      	bx	lr

000b6988 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b6988:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b698a:	69d8      	ldr	r0, [r3, #28]
}
   b698c:	2800      	cmp	r0, #0
   b698e:	bfd4      	ite	le
   b6990:	2000      	movle	r0, #0
   b6992:	2001      	movgt	r0, #1
   b6994:	4770      	bx	lr

000b6996 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6996:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6998:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b699c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b699e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b69a2:	42ae      	cmp	r6, r5
   b69a4:	d004      	beq.n	b69b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b69a6:	4628      	mov	r0, r5
   b69a8:	f002 f8da 	bl	b8b60 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b69ac:	3510      	adds	r5, #16
   b69ae:	e7f8      	b.n	b69a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b69b0:	6820      	ldr	r0, [r4, #0]
   b69b2:	f7ff fa79 	bl	b5ea8 <free>
}
   b69b6:	4620      	mov	r0, r4
   b69b8:	bd70      	pop	{r4, r5, r6, pc}

000b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b69ba:	b510      	push	{r4, lr}
   b69bc:	4604      	mov	r4, r0
    ::free(ptr);
   b69be:	6800      	ldr	r0, [r0, #0]
   b69c0:	f7ff fa72 	bl	b5ea8 <free>
}
   b69c4:	4620      	mov	r0, r4
   b69c6:	bd10      	pop	{r4, pc}

000b69c8 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b69c8:	b570      	push	{r4, r5, r6, lr}
   b69ca:	4604      	mov	r4, r0
    ::free(ptr);
   b69cc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b69ce:	f7ff fa6b 	bl	b5ea8 <free>
   b69d2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b69d4:	f7ff fa68 	bl	b5ea8 <free>
    }
    ~BleScanFilter() = default;
   b69d8:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b69dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b69e0:	f7ff ffeb 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b69e4:	4628      	mov	r0, r5
   b69e6:	f7ff ffd6 	bl	b6996 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b69ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b69ee:	f7fe ff35 	bl	b585c <_ZNSt14_Function_baseD1Ev>
   b69f2:	f104 0018 	add.w	r0, r4, #24
   b69f6:	f7fe ff31 	bl	b585c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b69fa:	e9d4 5300 	ldrd	r5, r3, [r4]
   b69fe:	2624      	movs	r6, #36	; 0x24
   b6a00:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b6a04:	42ae      	cmp	r6, r5
   b6a06:	d004      	beq.n	b6a12 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b6a08:	4628      	mov	r0, r5
   b6a0a:	f7ff ff97 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b6a0e:	3524      	adds	r5, #36	; 0x24
   b6a10:	e7f8      	b.n	b6a04 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b6a12:	6820      	ldr	r0, [r4, #0]
   b6a14:	f7ff fa48 	bl	b5ea8 <free>
   b6a18:	4620      	mov	r0, r4
   b6a1a:	bd70      	pop	{r4, r5, r6, pc}

000b6a1c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b6a1c:	b530      	push	{r4, r5, lr}
   b6a1e:	4615      	mov	r5, r2
   b6a20:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b6a22:	460c      	mov	r4, r1
   b6a24:	b179      	cbz	r1, b6a46 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b6a26:	b172      	cbz	r2, b6a46 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b6a28:	a801      	add	r0, sp, #4
   b6a2a:	f7ff ff91 	bl	b6950 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b6a2e:	4621      	mov	r1, r4
   b6a30:	462a      	mov	r2, r5
   b6a32:	a801      	add	r0, sp, #4
   b6a34:	f7ff ff6a 	bl	b690c <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b6a38:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b6a3a:	a801      	add	r0, sp, #4
   b6a3c:	f7ff ffc4 	bl	b69c8 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b6a40:	4620      	mov	r0, r4
   b6a42:	b01f      	add	sp, #124	; 0x7c
   b6a44:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b6a46:	4c01      	ldr	r4, [pc, #4]	; (b6a4c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b6a48:	e7fa      	b.n	b6a40 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b6a4a:	bf00      	nop
   b6a4c:	fffffef2 	.word	0xfffffef2

000b6a50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6a50:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b6a52:	1e14      	subs	r4, r2, #0
   b6a54:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b6a56:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b6a58:	db02      	blt.n	b6a60 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b6a5a:	1862      	adds	r2, r4, r1
   b6a5c:	429a      	cmp	r2, r3
   b6a5e:	dd00      	ble.n	b6a62 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b6a60:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b6a62:	682a      	ldr	r2, [r5, #0]
   b6a64:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b6a66:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b6a68:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6a6a:	1a52      	subs	r2, r2, r1
   b6a6c:	f003 f90e 	bl	b9c8c <memmove>
    size_ -= n;
   b6a70:	686a      	ldr	r2, [r5, #4]
   b6a72:	1b12      	subs	r2, r2, r4
   b6a74:	606a      	str	r2, [r5, #4]
}
   b6a76:	bd38      	pop	{r3, r4, r5, pc}

000b6a78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b6a78:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6a7a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b6a7c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b6a7e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6a80:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b6a82:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6a84:	f7fd fb05 	bl	b4092 <_Znwj>
   b6a88:	b118      	cbz	r0, b6a92 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6a8a:	682b      	ldr	r3, [r5, #0]
   b6a8c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6a8e:	686b      	ldr	r3, [r5, #4]
   b6a90:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b6a92:	4b03      	ldr	r3, [pc, #12]	; (b6aa0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b6a94:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6a96:	4b03      	ldr	r3, [pc, #12]	; (b6aa4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6a98:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6a9a:	60a3      	str	r3, [r4, #8]
      }
   b6a9c:	4620      	mov	r0, r4
   b6a9e:	bd38      	pop	{r3, r4, r5, pc}
   b6aa0:	000b6015 	.word	0x000b6015
   b6aa4:	000b602d 	.word	0x000b602d

000b6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b6aa8:	680b      	ldr	r3, [r1, #0]
   b6aaa:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b6aac:	b113      	cbz	r3, b6ab4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b6aae:	685a      	ldr	r2, [r3, #4]
   b6ab0:	3201      	adds	r2, #1
   b6ab2:	605a      	str	r2, [r3, #4]
      }
   b6ab4:	4770      	bx	lr

000b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b6ab6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6ab8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6abc:	4604      	mov	r4, r0
   b6abe:	f840 3b04 	str.w	r3, [r0], #4
   b6ac2:	f7ff fff1 	bl	b6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b6ac6:	6823      	ldr	r3, [r4, #0]
   b6ac8:	b90b      	cbnz	r3, b6ace <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b6aca:	f7ff fa99 	bl	b6000 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b6ace:	4620      	mov	r0, r4
   b6ad0:	bd10      	pop	{r4, pc}

000b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6ad2:	b510      	push	{r4, lr}
   b6ad4:	f851 3b04 	ldr.w	r3, [r1], #4
   b6ad8:	4604      	mov	r4, r0
   b6ada:	f840 3b04 	str.w	r3, [r0], #4
   b6ade:	f7ff ffe3 	bl	b6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6ae2:	4620      	mov	r0, r4
   b6ae4:	bd10      	pop	{r4, pc}

000b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b6ae6:	b510      	push	{r4, lr}
   b6ae8:	f851 3b04 	ldr.w	r3, [r1], #4
   b6aec:	4604      	mov	r4, r0
   b6aee:	f840 3b04 	str.w	r3, [r0], #4
   b6af2:	f7ff ffd9 	bl	b6aa8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b6af6:	4620      	mov	r0, r4
   b6af8:	bd10      	pop	{r4, pc}

000b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6afa:	b510      	push	{r4, lr}
   b6afc:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b6afe:	6800      	ldr	r0, [r0, #0]
   b6b00:	b108      	cbz	r0, b6b06 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b6b02:	f7fd fb49 	bl	b4198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b6b06:	4620      	mov	r0, r4
   b6b08:	bd10      	pop	{r4, pc}

000b6b0a <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b6b0a:	b510      	push	{r4, lr}
   b6b0c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6b0e:	3004      	adds	r0, #4
   b6b10:	f7ff fff3 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6b14:	4620      	mov	r0, r4
   b6b16:	bd10      	pop	{r4, pc}

000b6b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6b18:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6b1a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6b1e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6b20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6b24:	42ae      	cmp	r6, r5
   b6b26:	d004      	beq.n	b6b32 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b6b28:	1d28      	adds	r0, r5, #4
   b6b2a:	f7ff ffe6 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b2e:	3508      	adds	r5, #8
   b6b30:	e7f8      	b.n	b6b24 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6b32:	6820      	ldr	r0, [r4, #0]
   b6b34:	f7ff f9b8 	bl	b5ea8 <free>
}
   b6b38:	4620      	mov	r0, r4
   b6b3a:	bd70      	pop	{r4, r5, r6, pc}

000b6b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6b3c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6b3e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6b42:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b6b44:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6b48:	42ae      	cmp	r6, r5
   b6b4a:	d004      	beq.n	b6b56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b6b4c:	1d28      	adds	r0, r5, #4
   b6b4e:	f7ff ffd4 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6b52:	3508      	adds	r5, #8
   b6b54:	e7f8      	b.n	b6b48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b6b56:	6820      	ldr	r0, [r4, #0]
   b6b58:	f7ff f9a6 	bl	b5ea8 <free>
}
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	bd70      	pop	{r4, r5, r6, pc}

000b6b60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6b60:	b510      	push	{r4, lr}
   b6b62:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b6b64:	3024      	adds	r0, #36	; 0x24
   b6b66:	f7ff ffe9 	bl	b6b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6b6a:	f104 0018 	add.w	r0, r4, #24
   b6b6e:	f7ff ffd3 	bl	b6b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b6b72:	bd10      	pop	{r4, pc}

000b6b74 <__tcf_0>:
    static BleLocalDevice instance;
   b6b74:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b6b76:	4b17      	ldr	r3, [pc, #92]	; (b6bd4 <__tcf_0+0x60>)
   b6b78:	681c      	ldr	r4, [r3, #0]
   b6b7a:	b354      	cbz	r4, b6bd2 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b6b7c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b6b80:	f7fe fe6c 	bl	b585c <_ZNSt14_Function_baseD1Ev>
   b6b84:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6b88:	f7fe fe68 	bl	b585c <_ZNSt14_Function_baseD1Ev>
   b6b8c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6b90:	f7fe fe64 	bl	b585c <_ZNSt14_Function_baseD1Ev>
   b6b94:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6b98:	f7fe fe60 	bl	b585c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b6b9c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b6ba0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b6ba4:	42ae      	cmp	r6, r5
   b6ba6:	d004      	beq.n	b6bb2 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b6ba8:	1d28      	adds	r0, r5, #4
   b6baa:	f7ff ffa6 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6bae:	3508      	adds	r5, #8
   b6bb0:	e7f8      	b.n	b6ba4 <__tcf_0+0x30>
    ::free(ptr);
   b6bb2:	69a0      	ldr	r0, [r4, #24]
   b6bb4:	f7ff f978 	bl	b5ea8 <free>
    ~BleLocalDeviceImpl() = default;
   b6bb8:	f104 000c 	add.w	r0, r4, #12
   b6bbc:	f7ff ffbe 	bl	b6b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b6bc0:	4620      	mov	r0, r4
   b6bc2:	f7ff ffa9 	bl	b6b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b6bc6:	4620      	mov	r0, r4
   b6bc8:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b6bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6bce:	f7fd ba64 	b.w	b409a <_ZdlPvj>
   b6bd2:	bd70      	pop	{r4, r5, r6, pc}
   b6bd4:	2003e6c4 	.word	0x2003e6c4

000b6bd8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b6bd8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6bda:	b510      	push	{r4, lr}
      if (_M_empty())
   b6bdc:	b90a      	cbnz	r2, b6be2 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b6bde:	f002 ff13 	bl	b9a08 <_ZSt25__throw_bad_function_callv>
    }
   b6be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6be6:	68c3      	ldr	r3, [r0, #12]
   b6be8:	4718      	bx	r3

000b6bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b6bee:	2300      	movs	r3, #0
   b6bf0:	e9c0 3300 	strd	r3, r3, [r0]
   b6bf4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6bf6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b6bfa:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6bfc:	4605      	mov	r5, r0
   b6bfe:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6c00:	dd4a      	ble.n	b6c98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b6c02:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b6c06:	f7ff f947 	bl	b5e98 <malloc>
            if (!d) {
   b6c0a:	4606      	mov	r6, r0
   b6c0c:	2800      	cmp	r0, #0
   b6c0e:	d043      	beq.n	b6c98 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b6c10:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b6c14:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b6c16:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b6c1a:	d916      	bls.n	b6c4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b6c1c:	4550      	cmp	r0, sl
   b6c1e:	d215      	bcs.n	b6c4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b6c20:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b6c24:	f1a4 0910 	sub.w	r9, r4, #16
   b6c28:	ebaa 0404 	sub.w	r4, sl, r4
   b6c2c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b6c2e:	45d1      	cmp	r9, sl
   b6c30:	d01d      	beq.n	b6c6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b6c32:	b11c      	cbz	r4, b6c3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b6c34:	4651      	mov	r1, sl
   b6c36:	4620      	mov	r0, r4
   b6c38:	f002 f80e 	bl	b8c58 <_ZN6StringC1EOS_>
                end->~T();
   b6c3c:	4650      	mov	r0, sl
   b6c3e:	f001 ff8f 	bl	b8b60 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b6c42:	f1aa 0a10 	sub.w	sl, sl, #16
   b6c46:	3c10      	subs	r4, #16
   b6c48:	e7f1      	b.n	b6c2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b6c4a:	d010      	beq.n	b6c6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b6c4c:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b6c4e:	45a2      	cmp	sl, r4
   b6c50:	d00d      	beq.n	b6c6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b6c52:	f1b9 0f00 	cmp.w	r9, #0
   b6c56:	d003      	beq.n	b6c60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b6c58:	4621      	mov	r1, r4
   b6c5a:	4648      	mov	r0, r9
   b6c5c:	f001 fffc 	bl	b8c58 <_ZN6StringC1EOS_>
                p->~T();
   b6c60:	4620      	mov	r0, r4
   b6c62:	f001 ff7d 	bl	b8b60 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b6c66:	3410      	adds	r4, #16
   b6c68:	f109 0910 	add.w	r9, r9, #16
   b6c6c:	e7ef      	b.n	b6c4e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b6c6e:	6828      	ldr	r0, [r5, #0]
   b6c70:	f7ff f91a 	bl	b5ea8 <free>
        capacity_ = n;
   b6c74:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b6c78:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6c7a:	e9d7 4300 	ldrd	r4, r3, [r7]
   b6c7e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b6c82:	45a0      	cmp	r8, r4
   b6c84:	d006      	beq.n	b6c94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b6c86:	4621      	mov	r1, r4
   b6c88:	4630      	mov	r0, r6
   b6c8a:	f001 ffff 	bl	b8c8c <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b6c8e:	3410      	adds	r4, #16
   b6c90:	3610      	adds	r6, #16
   b6c92:	e7f6      	b.n	b6c82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b6c94:	687b      	ldr	r3, [r7, #4]
   b6c96:	606b      	str	r3, [r5, #4]
}
   b6c98:	4628      	mov	r0, r5
   b6c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6c9e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b6c9e:	b530      	push	{r4, r5, lr}
   b6ca0:	b08d      	sub	sp, #52	; 0x34
   b6ca2:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b6ca4:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b6ca8:	a801      	add	r0, sp, #4
   b6caa:	f7ff ff9e 	bl	b6bea <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b6cae:	9b02      	ldr	r3, [sp, #8]
   b6cb0:	2b00      	cmp	r3, #0
   b6cb2:	dd2f      	ble.n	b6d14 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b6cb4:	f104 0114 	add.w	r1, r4, #20
   b6cb8:	a804      	add	r0, sp, #16
   b6cba:	f7ff fc39 	bl	b6530 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b6cbe:	f104 0108 	add.w	r1, r4, #8
   b6cc2:	a808      	add	r0, sp, #32
   b6cc4:	f7ff fc34 	bl	b6530 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b6cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b6cca:	9b06      	ldr	r3, [sp, #24]
   b6ccc:	4313      	orrs	r3, r2
   b6cce:	d01f      	beq.n	b6d10 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b6cd0:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b6cd4:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b6cd8:	42ac      	cmp	r4, r5
   b6cda:	d019      	beq.n	b6d10 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b6cdc:	a904      	add	r1, sp, #16
   b6cde:	4620      	mov	r0, r4
   b6ce0:	f002 f83c 	bl	b8d5c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6ce4:	b160      	cbz	r0, b6d00 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b6ce6:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b6ce8:	a808      	add	r0, sp, #32
   b6cea:	f001 ff39 	bl	b8b60 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b6cee:	a804      	add	r0, sp, #16
   b6cf0:	f001 ff36 	bl	b8b60 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b6cf4:	a801      	add	r0, sp, #4
   b6cf6:	f7ff fe4e 	bl	b6996 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b6cfa:	4620      	mov	r0, r4
   b6cfc:	b00d      	add	sp, #52	; 0x34
   b6cfe:	bd30      	pop	{r4, r5, pc}
   b6d00:	4620      	mov	r0, r4
   b6d02:	a908      	add	r1, sp, #32
   b6d04:	f002 f82a 	bl	b8d5c <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b6d08:	3410      	adds	r4, #16
   b6d0a:	2800      	cmp	r0, #0
   b6d0c:	d0e4      	beq.n	b6cd8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b6d0e:	e7ea      	b.n	b6ce6 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b6d10:	2400      	movs	r4, #0
   b6d12:	e7e9      	b.n	b6ce8 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b6d14:	2401      	movs	r4, #1
   b6d16:	e7ed      	b.n	b6cf4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b6d18 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b6d1a:	2300      	movs	r3, #0
   b6d1c:	e9c0 3300 	strd	r3, r3, [r0]
   b6d20:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6d22:	684f      	ldr	r7, [r1, #4]
   b6d24:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6d26:	4605      	mov	r5, r0
   b6d28:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6d2a:	dd3e      	ble.n	b6daa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b6d2c:	00f8      	lsls	r0, r7, #3
   b6d2e:	f7ff f8b3 	bl	b5e98 <malloc>
            if (!d) {
   b6d32:	4604      	mov	r4, r0
   b6d34:	b3c8      	cbz	r0, b6daa <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b6d36:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b6d3a:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b6d3c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b6d40:	d910      	bls.n	b6d64 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b6d42:	429c      	cmp	r4, r3
   b6d44:	d20f      	bcs.n	b6d66 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b6d46:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b6d48:	1a1a      	subs	r2, r3, r0
   b6d4a:	f1a0 0c08 	sub.w	ip, r0, #8
   b6d4e:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b6d50:	459c      	cmp	ip, r3
   b6d52:	d018      	beq.n	b6d86 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b6d54:	b11a      	cbz	r2, b6d5e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b6d56:	6819      	ldr	r1, [r3, #0]
   b6d58:	6011      	str	r1, [r2, #0]
   b6d5a:	6859      	ldr	r1, [r3, #4]
   b6d5c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b6d5e:	3b08      	subs	r3, #8
   b6d60:	3a08      	subs	r2, #8
   b6d62:	e7f5      	b.n	b6d50 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b6d64:	d00f      	beq.n	b6d86 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b6d66:	4601      	mov	r1, r0
   b6d68:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b6d6a:	428b      	cmp	r3, r1
   b6d6c:	d00b      	beq.n	b6d86 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b6d6e:	b13a      	cbz	r2, b6d80 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b6d70:	f8d1 c000 	ldr.w	ip, [r1]
   b6d74:	f8c2 c000 	str.w	ip, [r2]
   b6d78:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b6d7c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b6d80:	3108      	adds	r1, #8
   b6d82:	3208      	adds	r2, #8
   b6d84:	e7f1      	b.n	b6d6a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b6d86:	f7ff f88f 	bl	b5ea8 <free>
        data_ = d;
   b6d8a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b6d8c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6d8e:	e9d6 3100 	ldrd	r3, r1, [r6]
   b6d92:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b6d96:	4298      	cmp	r0, r3
   b6d98:	d006      	beq.n	b6da8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b6d9a:	681a      	ldr	r2, [r3, #0]
   b6d9c:	6022      	str	r2, [r4, #0]
   b6d9e:	685a      	ldr	r2, [r3, #4]
   b6da0:	6062      	str	r2, [r4, #4]
   b6da2:	3308      	adds	r3, #8
   b6da4:	3408      	adds	r4, #8
   b6da6:	e7f6      	b.n	b6d96 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b6da8:	6069      	str	r1, [r5, #4]
}
   b6daa:	4628      	mov	r0, r5
   b6dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dae <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6dae:	b570      	push	{r4, r5, r6, lr}
   b6db0:	4604      	mov	r4, r0
        capacity_(0) {
   b6db2:	2000      	movs	r0, #0
   b6db4:	e9c4 0000 	strd	r0, r0, [r4]
   b6db8:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6dba:	684e      	ldr	r6, [r1, #4]
   b6dbc:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6dbe:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6dc0:	dd12      	ble.n	b6de8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b6dc2:	0071      	lsls	r1, r6, #1
   b6dc4:	f7ff f878 	bl	b5eb8 <realloc>
            if (!d) {
   b6dc8:	b170      	cbz	r0, b6de8 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b6dca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6dcc:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6dce:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6dd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b6dd6:	429a      	cmp	r2, r3
   b6dd8:	d004      	beq.n	b6de4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b6dda:	f833 1b02 	ldrh.w	r1, [r3], #2
   b6dde:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b6de2:	e7f8      	b.n	b6dd6 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b6de4:	686b      	ldr	r3, [r5, #4]
   b6de6:	6063      	str	r3, [r4, #4]
}
   b6de8:	4620      	mov	r0, r4
   b6dea:	bd70      	pop	{r4, r5, r6, pc}

000b6dec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b6dec:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6dee:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6df0:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6df2:	b923      	cbnz	r3, b6dfe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b6df4:	6803      	ldr	r3, [r0, #0]
   b6df6:	6818      	ldr	r0, [r3, #0]
   b6df8:	b108      	cbz	r0, b6dfe <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b6dfa:	f7ff f855 	bl	b5ea8 <free>
            func_();
        }
    }
   b6dfe:	4620      	mov	r0, r4
   b6e00:	bd10      	pop	{r4, pc}

000b6e02 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b6e02:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b6e04:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b6e06:	4604      	mov	r4, r0
        if (!dismissed_) {
   b6e08:	b923      	cbnz	r3, b6e14 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b6e0a:	6803      	ldr	r3, [r0, #0]
   b6e0c:	6818      	ldr	r0, [r3, #0]
   b6e0e:	b108      	cbz	r0, b6e14 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b6e10:	f7ff f84a 	bl	b5ea8 <free>
    }
   b6e14:	4620      	mov	r0, r4
   b6e16:	bd10      	pop	{r4, pc}

000b6e18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b6e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b6e1c:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b6e20:	b08f      	sub	sp, #60	; 0x3c
   b6e22:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b6e24:	f1b8 0f00 	cmp.w	r8, #0
   b6e28:	d072      	beq.n	b6f10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b6e2a:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b6e2c:	2d00      	cmp	r5, #0
   b6e2e:	d06f      	beq.n	b6f10 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b6e30:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6e34:	231f      	movs	r3, #31
   b6e36:	2200      	movs	r2, #0
   b6e38:	21ff      	movs	r1, #255	; 0xff
   b6e3a:	4648      	mov	r0, r9
   b6e3c:	f7ff fb45 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b6e40:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6e42:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b6e44:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6e46:	2200      	movs	r2, #0
   b6e48:	4619      	mov	r1, r3
   b6e4a:	4638      	mov	r0, r7
   b6e4c:	f7ff fb3d 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6e50:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b6e52:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b6e54:	d006      	beq.n	b6e64 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b6e56:	42ae      	cmp	r6, r5
   b6e58:	d030      	beq.n	b6ebc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b6e5a:	2400      	movs	r4, #0
    }
   b6e5c:	4620      	mov	r0, r4
   b6e5e:	b00f      	add	sp, #60	; 0x3c
   b6e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b6e64:	4620      	mov	r0, r4
   b6e66:	f7ff f817 	bl	b5e98 <malloc>
            dismissed_(false) {
   b6e6a:	ab03      	add	r3, sp, #12
   b6e6c:	9304      	str	r3, [sp, #16]
   b6e6e:	2300      	movs	r3, #0
   b6e70:	4604      	mov	r4, r0
   b6e72:	9003      	str	r0, [sp, #12]
   b6e74:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b6e78:	b970      	cbnz	r0, b6e98 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b6e7a:	2320      	movs	r3, #32
   b6e7c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6e80:	4b24      	ldr	r3, [pc, #144]	; (b6f14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6e82:	9300      	str	r3, [sp, #0]
   b6e84:	4924      	ldr	r1, [pc, #144]	; (b6f18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6e86:	4603      	mov	r3, r0
   b6e88:	aa06      	add	r2, sp, #24
   b6e8a:	2032      	movs	r0, #50	; 0x32
   b6e8c:	f7fe ff68 	bl	b5d60 <log_message>
                    return false;
   b6e90:	a804      	add	r0, sp, #16
   b6e92:	f7ff ffab 	bl	b6dec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b6e96:	e7e1      	b.n	b6e5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b6e98:	4602      	mov	r2, r0
   b6e9a:	21ff      	movs	r1, #255	; 0xff
   b6e9c:	462b      	mov	r3, r5
   b6e9e:	4648      	mov	r0, r9
   b6ea0:	f7ff fb13 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b6ea4:	9803      	ldr	r0, [sp, #12]
   b6ea6:	462a      	mov	r2, r5
   b6ea8:	4641      	mov	r1, r8
   b6eaa:	f002 fed1 	bl	b9c50 <memcmp>
   b6eae:	b118      	cbz	r0, b6eb8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b6eb0:	a804      	add	r0, sp, #16
   b6eb2:	f7ff ff9b 	bl	b6dec <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b6eb6:	e7ce      	b.n	b6e56 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b6eb8:	2401      	movs	r4, #1
   b6eba:	e7e9      	b.n	b6e90 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b6ebc:	4628      	mov	r0, r5
   b6ebe:	f7fe ffeb 	bl	b5e98 <malloc>
   b6ec2:	2400      	movs	r4, #0
   b6ec4:	ab03      	add	r3, sp, #12
   b6ec6:	4606      	mov	r6, r0
   b6ec8:	9003      	str	r0, [sp, #12]
   b6eca:	9304      	str	r3, [sp, #16]
   b6ecc:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b6ed0:	b978      	cbnz	r0, b6ef2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b6ed2:	2320      	movs	r3, #32
   b6ed4:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b6ed8:	4b0e      	ldr	r3, [pc, #56]	; (b6f14 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b6eda:	9300      	str	r3, [sp, #0]
   b6edc:	490e      	ldr	r1, [pc, #56]	; (b6f18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b6ede:	4603      	mov	r3, r0
   b6ee0:	aa06      	add	r2, sp, #24
   b6ee2:	2032      	movs	r0, #50	; 0x32
   b6ee4:	f7fe ff3c 	bl	b5d60 <log_message>
                    return false;
   b6ee8:	4634      	mov	r4, r6
   b6eea:	a804      	add	r0, sp, #16
   b6eec:	f7ff ff89 	bl	b6e02 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b6ef0:	e7b4      	b.n	b6e5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b6ef2:	4602      	mov	r2, r0
   b6ef4:	21ff      	movs	r1, #255	; 0xff
   b6ef6:	462b      	mov	r3, r5
   b6ef8:	4638      	mov	r0, r7
   b6efa:	f7ff fae6 	bl	b64ca <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b6efe:	9803      	ldr	r0, [sp, #12]
   b6f00:	462a      	mov	r2, r5
   b6f02:	4641      	mov	r1, r8
   b6f04:	f002 fea4 	bl	b9c50 <memcmp>
   b6f08:	2800      	cmp	r0, #0
   b6f0a:	d1ee      	bne.n	b6eea <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b6f0c:	2401      	movs	r4, #1
   b6f0e:	e7ec      	b.n	b6eea <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b6f10:	2401      	movs	r4, #1
   b6f12:	e7a3      	b.n	b6e5c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b6f14:	000ba7c4 	.word	0x000ba7c4
   b6f18:	000ba743 	.word	0x000ba743

000b6f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b6f1c:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b6f1e:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b6f20:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b6f22:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b6f24:	dd03      	ble.n	b6f2e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b6f26:	f7fe ffc7 	bl	b5eb8 <realloc>
            if (!d) {
   b6f2a:	b918      	cbnz	r0, b6f34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b6f2c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b6f2e:	f7fe ffbb 	bl	b5ea8 <free>
        T* d = nullptr;
   b6f32:	2000      	movs	r0, #0
        data_ = d;
   b6f34:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b6f36:	60a5      	str	r5, [r4, #8]
        return true;
   b6f38:	2001      	movs	r0, #1
   b6f3a:	e7f7      	b.n	b6f2c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b6f3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b6f3c:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b6f3e:	6883      	ldr	r3, [r0, #8]
   b6f40:	428b      	cmp	r3, r1
   b6f42:	da02      	bge.n	b6f4a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b6f44:	f7ff ffea 	bl	b6f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b6f48:	bd08      	pop	{r3, pc}
    return true;
   b6f4a:	2001      	movs	r0, #1
   b6f4c:	e7fc      	b.n	b6f48 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f4e:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b6f50:	2300      	movs	r3, #0
   b6f52:	e9c0 3300 	strd	r3, r3, [r0]
   b6f56:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f58:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6f5a:	6849      	ldr	r1, [r1, #4]
   b6f5c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b6f5e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b6f60:	dd10      	ble.n	b6f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b6f62:	f7ff ffdb 	bl	b6f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6f66:	b168      	cbz	r0, b6f84 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b6f68:	e9d5 3100 	ldrd	r3, r1, [r5]
   b6f6c:	6822      	ldr	r2, [r4, #0]
   b6f6e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b6f70:	4299      	cmp	r1, r3
   b6f72:	d005      	beq.n	b6f80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b6f74:	b10a      	cbz	r2, b6f7a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b6f76:	7818      	ldrb	r0, [r3, #0]
   b6f78:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b6f7a:	3301      	adds	r3, #1
   b6f7c:	3201      	adds	r2, #1
   b6f7e:	e7f7      	b.n	b6f70 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b6f80:	686b      	ldr	r3, [r5, #4]
   b6f82:	6063      	str	r3, [r4, #4]
}
   b6f84:	4620      	mov	r0, r4
   b6f86:	bd38      	pop	{r3, r4, r5, pc}

000b6f88 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b6f88:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b6f8a:	680b      	ldr	r3, [r1, #0]
   b6f8c:	6003      	str	r3, [r0, #0]
   b6f8e:	684b      	ldr	r3, [r1, #4]
   b6f90:	6043      	str	r3, [r0, #4]
   b6f92:	4604      	mov	r4, r0
   b6f94:	460d      	mov	r5, r1
class BleAdvertisingData {
   b6f96:	3008      	adds	r0, #8
   b6f98:	3108      	adds	r1, #8
   b6f9a:	f7ff ffd8 	bl	b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b6f9e:	f105 0114 	add.w	r1, r5, #20
   b6fa2:	f104 0014 	add.w	r0, r4, #20
   b6fa6:	f7ff ffd2 	bl	b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b6faa:	f895 3020 	ldrb.w	r3, [r5, #32]
   b6fae:	f884 3020 	strb.w	r3, [r4, #32]
   b6fb2:	4620      	mov	r0, r4
   b6fb4:	bd38      	pop	{r3, r4, r5, pc}

000b6fb6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b6fb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6fb8:	4604      	mov	r4, r0
   b6fba:	a801      	add	r0, sp, #4
   b6fbc:	f7ff ffc7 	bl	b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b6fc0:	9b01      	ldr	r3, [sp, #4]
   b6fc2:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fc4:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b6fc6:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fc8:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6fca:	6062      	str	r2, [r4, #4]
   b6fcc:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fce:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6fd0:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6fd2:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6fd4:	9001      	str	r0, [sp, #4]
   b6fd6:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b6fd8:	f7fe ff66 	bl	b5ea8 <free>
   b6fdc:	b004      	add	sp, #16
   b6fde:	bd10      	pop	{r4, pc}

000b6fe0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6fe4:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fe6:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6fe8:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6fea:	4419      	add	r1, r3
   b6fec:	6883      	ldr	r3, [r0, #8]
   b6fee:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6ff0:	4604      	mov	r4, r0
   b6ff2:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6ff4:	dc12      	bgt.n	b701c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6ff6:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ff8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6ffa:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6ffc:	1bd2      	subs	r2, r2, r7
   b6ffe:	4631      	mov	r1, r6
   b7000:	1970      	adds	r0, r6, r5
   b7002:	f002 fe43 	bl	b9c8c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b7006:	462a      	mov	r2, r5
   b7008:	4641      	mov	r1, r8
   b700a:	4630      	mov	r0, r6
   b700c:	f002 fe30 	bl	b9c70 <memcpy>
    size_ += n;
   b7010:	6863      	ldr	r3, [r4, #4]
   b7012:	442b      	add	r3, r5
   b7014:	6063      	str	r3, [r4, #4]
    return true;
   b7016:	2001      	movs	r0, #1
}
   b7018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b701c:	f7ff ff7e 	bl	b6f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7020:	2800      	cmp	r0, #0
   b7022:	d1e8      	bne.n	b6ff6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b7024:	e7f8      	b.n	b7018 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b7026 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b7026:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b7028:	460a      	mov	r2, r1
   b702a:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b702c:	b510      	push	{r4, lr}
   b702e:	4604      	mov	r4, r0
    size_ = 0;
   b7030:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b7032:	b102      	cbz	r2, b7036 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b7034:	b90b      	cbnz	r3, b703a <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b7036:	2000      	movs	r0, #0
}
   b7038:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b703a:	2bff      	cmp	r3, #255	; 0xff
   b703c:	bf28      	it	cs
   b703e:	23ff      	movcs	r3, #255	; 0xff
   b7040:	f7ff ffce 	bl	b6fe0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b7044:	2800      	cmp	r0, #0
   b7046:	d0f7      	beq.n	b7038 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b7048:	6860      	ldr	r0, [r4, #4]
   b704a:	e7f5      	b.n	b7038 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b704c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b704e:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7050:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b7054:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b7056:	4604      	mov	r4, r0
   b7058:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b705a:	da0b      	bge.n	b7074 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b705c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b705e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7060:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7062:	1b52      	subs	r2, r2, r5
   b7064:	1c48      	adds	r0, r1, #1
   b7066:	f002 fe11 	bl	b9c8c <memmove>
    new(p) T(std::move(value));
   b706a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b706c:	6863      	ldr	r3, [r4, #4]
   b706e:	3301      	adds	r3, #1
   b7070:	6063      	str	r3, [r4, #4]
}
   b7072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7074:	3101      	adds	r1, #1
   b7076:	f7ff ff51 	bl	b6f1c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b707a:	2800      	cmp	r0, #0
   b707c:	d1ee      	bne.n	b705c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b707e:	e7f8      	b.n	b7072 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7080:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7082:	6841      	ldr	r1, [r0, #4]
   b7084:	f7ff bfe2 	b.w	b704c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7088 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b708c:	4604      	mov	r4, r0
   b708e:	461d      	mov	r5, r3
   b7090:	460f      	mov	r7, r1
   b7092:	ab01      	add	r3, sp, #4
   b7094:	4690      	mov	r8, r2
   b7096:	460a      	mov	r2, r1
   b7098:	e9d0 0100 	ldrd	r0, r1, [r0]
   b709c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b70a0:	f7fe ff98 	bl	b5fd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b70a4:	1cae      	adds	r6, r5, #2
   b70a6:	6863      	ldr	r3, [r4, #4]
   b70a8:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b70aa:	f1b9 0f00 	cmp.w	r9, #0
   b70ae:	d126      	bne.n	b70fe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b70b0:	b328      	cbz	r0, b70fe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b70b2:	4433      	add	r3, r6
   b70b4:	1a1b      	subs	r3, r3, r0
   b70b6:	2bff      	cmp	r3, #255	; 0xff
   b70b8:	d809      	bhi.n	b70ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b70ba:	9901      	ldr	r1, [sp, #4]
   b70bc:	4620      	mov	r0, r4
   b70be:	f7ff fcc7 	bl	b6a50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b70c2:	6861      	ldr	r1, [r4, #4]
   b70c4:	4620      	mov	r0, r4
   b70c6:	4431      	add	r1, r6
   b70c8:	f7ff ff38 	bl	b6f3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b70cc:	b918      	cbnz	r0, b70d6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b70ce:	6860      	ldr	r0, [r4, #4]
}
   b70d0:	b003      	add	sp, #12
   b70d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b70d6:	1c6a      	adds	r2, r5, #1
   b70d8:	9901      	ldr	r1, [sp, #4]
   b70da:	b2d2      	uxtb	r2, r2
   b70dc:	4620      	mov	r0, r4
   b70de:	f7ff ffb5 	bl	b704c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b70e2:	9901      	ldr	r1, [sp, #4]
   b70e4:	463a      	mov	r2, r7
   b70e6:	3101      	adds	r1, #1
   b70e8:	4620      	mov	r0, r4
   b70ea:	f7ff ffaf 	bl	b704c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b70ee:	9901      	ldr	r1, [sp, #4]
   b70f0:	462b      	mov	r3, r5
   b70f2:	4642      	mov	r2, r8
   b70f4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b70f6:	4620      	mov	r0, r4
   b70f8:	f7ff ff72 	bl	b6fe0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b70fc:	e7e7      	b.n	b70ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b70fe:	18f1      	adds	r1, r6, r3
   b7100:	29ff      	cmp	r1, #255	; 0xff
   b7102:	d8e4      	bhi.n	b70ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7104:	4620      	mov	r0, r4
   b7106:	f7ff ff19 	bl	b6f3c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b710a:	2800      	cmp	r0, #0
   b710c:	d0df      	beq.n	b70ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b710e:	1c69      	adds	r1, r5, #1
   b7110:	b2c9      	uxtb	r1, r1
   b7112:	4620      	mov	r0, r4
   b7114:	f7ff ffb4 	bl	b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7118:	4639      	mov	r1, r7
   b711a:	4620      	mov	r0, r4
   b711c:	f7ff ffb0 	bl	b7080 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7120:	6861      	ldr	r1, [r4, #4]
   b7122:	462b      	mov	r3, r5
   b7124:	4642      	mov	r2, r8
   b7126:	e7e6      	b.n	b70f6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7128:	b430      	push	{r4, r5}
   b712a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b712e:	b11a      	cbz	r2, b7138 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7130:	9502      	str	r5, [sp, #8]
}
   b7132:	bc30      	pop	{r4, r5}
   b7134:	f7ff bfa8 	b.w	b7088 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7138:	6840      	ldr	r0, [r0, #4]
}
   b713a:	bc30      	pop	{r4, r5}
   b713c:	4770      	bx	lr

000b713e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b713e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7140:	2300      	movs	r3, #0
   b7142:	e9c0 3300 	strd	r3, r3, [r0]
   b7146:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7148:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b714a:	9300      	str	r3, [sp, #0]
   b714c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b714e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7152:	4619      	mov	r1, r3
   b7154:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7158:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b715a:	f7ff ffe5 	bl	b7128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b715e:	4620      	mov	r0, r4
   b7160:	b004      	add	sp, #16
   b7162:	bd10      	pop	{r4, pc}

000b7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7164:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7168:	4604      	mov	r4, r0
   b716a:	460d      	mov	r5, r1
   b716c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b716e:	d914      	bls.n	b719a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7170:	4290      	cmp	r0, r2
   b7172:	d213      	bcs.n	b719c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7174:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7178:	1a75      	subs	r5, r6, r1
   b717a:	f1a1 0708 	sub.w	r7, r1, #8
   b717e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7180:	42b7      	cmp	r7, r6
   b7182:	d018      	beq.n	b71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7184:	b11c      	cbz	r4, b718e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7186:	4631      	mov	r1, r6
   b7188:	4620      	mov	r0, r4
   b718a:	f7ff fcac 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b718e:	1d30      	adds	r0, r6, #4
   b7190:	f7ff fcb3 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7194:	3e08      	subs	r6, #8
   b7196:	3c08      	subs	r4, #8
   b7198:	e7f2      	b.n	b7180 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b719a:	d00c      	beq.n	b71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b719c:	42b5      	cmp	r5, r6
   b719e:	d00a      	beq.n	b71b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b71a0:	b11c      	cbz	r4, b71aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b71a2:	4629      	mov	r1, r5
   b71a4:	4620      	mov	r0, r4
   b71a6:	f7ff fc9e 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b71aa:	1d28      	adds	r0, r5, #4
   b71ac:	f7ff fca5 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b71b0:	3508      	adds	r5, #8
   b71b2:	3408      	adds	r4, #8
   b71b4:	e7f2      	b.n	b719c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b71b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b71b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b71ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b71bc:	6846      	ldr	r6, [r0, #4]
   b71be:	4668      	mov	r0, sp
   b71c0:	f7ff fc91 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b71c4:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b71c8:	429f      	cmp	r7, r3
   b71ca:	db12      	blt.n	b71f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b71cc:	3701      	adds	r7, #1
        if (n > 0) {
   b71ce:	2f00      	cmp	r7, #0
   b71d0:	dd29      	ble.n	b7226 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b71d2:	00f8      	lsls	r0, r7, #3
   b71d4:	f7fe fe60 	bl	b5e98 <malloc>
            if (!d) {
   b71d8:	4605      	mov	r5, r0
   b71da:	b1f0      	cbz	r0, b721a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b71dc:	e9d4 1200 	ldrd	r1, r2, [r4]
   b71e0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b71e4:	f7ff ffbe 	bl	b7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b71e8:	6820      	ldr	r0, [r4, #0]
   b71ea:	f7fe fe5d 	bl	b5ea8 <free>
        data_ = d;
   b71ee:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b71f0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b71f2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b71f4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b71f6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b71fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b71fe:	4631      	mov	r1, r6
   b7200:	f106 0008 	add.w	r0, r6, #8
   b7204:	f7ff ffae 	bl	b7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7208:	b11e      	cbz	r6, b7212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b720a:	4669      	mov	r1, sp
   b720c:	4630      	mov	r0, r6
   b720e:	f7ff fc6a 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7212:	6863      	ldr	r3, [r4, #4]
   b7214:	3301      	adds	r3, #1
   b7216:	6063      	str	r3, [r4, #4]
    return true;
   b7218:	2501      	movs	r5, #1
   b721a:	a801      	add	r0, sp, #4
   b721c:	f7ff fc6d 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7220:	4628      	mov	r0, r5
   b7222:	b003      	add	sp, #12
   b7224:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7226:	2500      	movs	r5, #0
   b7228:	e7de      	b.n	b71e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b722a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b722a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b722c:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7230:	4605      	mov	r5, r0
   b7232:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7234:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7238:	42a6      	cmp	r6, r4
   b723a:	d005      	beq.n	b7248 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b723c:	4639      	mov	r1, r7
   b723e:	4620      	mov	r0, r4
   b7240:	f7ff fabb 	bl	b67ba <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7244:	b108      	cbz	r0, b724a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7246:	b914      	cbnz	r4, b724e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b724a:	3408      	adds	r4, #8
   b724c:	e7f4      	b.n	b7238 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b724e:	1d20      	adds	r0, r4, #4
   b7250:	f7ff fc53 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7254:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7258:	f104 0108 	add.w	r1, r4, #8
   b725c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7260:	4620      	mov	r0, r4
   b7262:	f7ff ff7f 	bl	b7164 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7266:	686b      	ldr	r3, [r5, #4]
   b7268:	3b01      	subs	r3, #1
   b726a:	606b      	str	r3, [r5, #4]
    return true;
   b726c:	e7ec      	b.n	b7248 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b7270 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7274:	4605      	mov	r5, r0
   b7276:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7278:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b727a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b727c:	f7fe ff78 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7280:	682e      	ldr	r6, [r5, #0]
   b7282:	1ef3      	subs	r3, r6, #3
   b7284:	2b0d      	cmp	r3, #13
   b7286:	d83c      	bhi.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7288:	e8df f013 	tbh	[pc, r3, lsl #1]
   b728c:	0053000e 	.word	0x0053000e
   b7290:	00d1003b 	.word	0x00d1003b
   b7294:	003b003b 	.word	0x003b003b
   b7298:	003b003b 	.word	0x003b003b
   b729c:	009b003b 	.word	0x009b003b
   b72a0:	009b009b 	.word	0x009b009b
   b72a4:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b72a8:	a804      	add	r0, sp, #16
   b72aa:	f7ff fa2d 	bl	b6708 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b72ae:	9b04      	ldr	r3, [sp, #16]
   b72b0:	89aa      	ldrh	r2, [r5, #12]
   b72b2:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b72b4:	6869      	ldr	r1, [r5, #4]
   b72b6:	9804      	ldr	r0, [sp, #16]
   b72b8:	3108      	adds	r1, #8
   b72ba:	3002      	adds	r0, #2
   b72bc:	f7fe ff72 	bl	b61a4 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b72c0:	a904      	add	r1, sp, #16
   b72c2:	a806      	add	r0, sp, #24
   b72c4:	f7ff fc0f 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b72c8:	a906      	add	r1, sp, #24
   b72ca:	f104 0018 	add.w	r0, r4, #24
   b72ce:	f7ff ff73 	bl	b71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b72d2:	4605      	mov	r5, r0
   b72d4:	a807      	add	r0, sp, #28
   b72d6:	f7ff fc10 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b72da:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b72dc:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b72de:	b9b5      	cbnz	r5, b730e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b72e0:	4b5d      	ldr	r3, [pc, #372]	; (b7458 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b72e2:	495e      	ldr	r1, [pc, #376]	; (b745c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b72e4:	9300      	str	r3, [sp, #0]
   b72e6:	2032      	movs	r0, #50	; 0x32
   b72e8:	462b      	mov	r3, r5
   b72ea:	aa06      	add	r2, sp, #24
   b72ec:	9507      	str	r5, [sp, #28]
   b72ee:	f7fe fd37 	bl	b5d60 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b72f2:	9b04      	ldr	r3, [sp, #16]
   b72f4:	4629      	mov	r1, r5
   b72f6:	8818      	ldrh	r0, [r3, #0]
   b72f8:	f7fe fad4 	bl	b58a4 <hal_ble_gap_disconnect>
   b72fc:	a805      	add	r0, sp, #20
   b72fe:	f7ff fbfc 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7302:	a803      	add	r0, sp, #12
   b7304:	f7fe ff42 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7308:	b00e      	add	sp, #56	; 0x38
   b730a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b730e:	4a54      	ldr	r2, [pc, #336]	; (b7460 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7310:	9200      	str	r2, [sp, #0]
   b7312:	2300      	movs	r3, #0
   b7314:	4951      	ldr	r1, [pc, #324]	; (b745c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7316:	9307      	str	r3, [sp, #28]
   b7318:	aa06      	add	r2, sp, #24
   b731a:	2001      	movs	r0, #1
   b731c:	f7fe fd20 	bl	b5d60 <log_message>
                if (impl->connectedCallback_) {
   b7320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7322:	2b00      	cmp	r3, #0
   b7324:	d0ea      	beq.n	b72fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b7326:	a904      	add	r1, sp, #16
   b7328:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b732c:	f7ff fc54 	bl	b6bd8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7330:	e7e4      	b.n	b72fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7332:	89a9      	ldrh	r1, [r5, #12]
   b7334:	4620      	mov	r0, r4
   b7336:	f7ff f95a 	bl	b65ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b733a:	4606      	mov	r6, r0
   b733c:	2800      	cmp	r0, #0
   b733e:	d0e0      	beq.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7340:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7342:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7346:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b734a:	8029      	strh	r1, [r5, #0]
   b734c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7350:	429a      	cmp	r2, r3
   b7352:	d003      	beq.n	b735c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b7354:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7358:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b735a:	e7f9      	b.n	b7350 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b735c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7360:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7364:	45b8      	cmp	r8, r7
   b7366:	d004      	beq.n	b7372 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b7368:	1d38      	adds	r0, r7, #4
   b736a:	f7ff fbc6 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b736e:	3708      	adds	r7, #8
   b7370:	e7f8      	b.n	b7364 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b7372:	2300      	movs	r3, #0
   b7374:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7376:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b737a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b737e:	45b8      	cmp	r8, r7
   b7380:	d004      	beq.n	b738c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b7382:	1d38      	adds	r0, r7, #4
   b7384:	f7ff fbb9 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7388:	3708      	adds	r7, #8
   b738a:	e7f8      	b.n	b737e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b738c:	2300      	movs	r3, #0
   b738e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7390:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b7392:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7394:	b123      	cbz	r3, b73a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b7396:	4631      	mov	r1, r6
   b7398:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b739c:	f7ff fc1c 	bl	b6bd8 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b73a0:	2300      	movs	r3, #0
   b73a2:	2220      	movs	r2, #32
   b73a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b73a8:	4a2e      	ldr	r2, [pc, #184]	; (b7464 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b73aa:	9200      	str	r2, [sp, #0]
   b73ac:	492b      	ldr	r1, [pc, #172]	; (b745c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b73ae:	aa06      	add	r2, sp, #24
   b73b0:	2001      	movs	r0, #1
   b73b2:	f7fe fcd5 	bl	b5d60 <log_message>
                    impl->peers_.removeOne(*peer);
   b73b6:	4631      	mov	r1, r6
   b73b8:	f104 0018 	add.w	r0, r4, #24
   b73bc:	f7ff ff35 	bl	b722a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b73c0:	e79f      	b.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b73c2:	89a9      	ldrh	r1, [r5, #12]
   b73c4:	4620      	mov	r0, r4
   b73c6:	f7ff f912 	bl	b65ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b73ca:	2800      	cmp	r0, #0
   b73cc:	d099      	beq.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b73ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b73d0:	2b00      	cmp	r3, #0
   b73d2:	d096      	beq.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b73d4:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b73d6:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b73d8:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b73dc:	d001      	beq.n	b73e2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b73de:	2e10      	cmp	r6, #16
   b73e0:	d117      	bne.n	b7412 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b73e2:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b73e4:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b73e6:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b73e8:	2506      	movs	r5, #6
                        };
   b73ea:	f88d 3015 	strb.w	r3, [sp, #21]
   b73ee:	9104      	str	r1, [sp, #16]
   b73f0:	f88d 2014 	strb.w	r2, [sp, #20]
   b73f4:	9006      	str	r0, [sp, #24]
   b73f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b73fa:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b73fc:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7400:	9508      	str	r5, [sp, #32]
   b7402:	e883 0003 	stmia.w	r3, {r0, r1}
   b7406:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7408:	a906      	add	r1, sp, #24
   b740a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b740e:	4798      	blx	r3
   b7410:	e777      	b.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7412:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7414:	bf01      	itttt	eq
   b7416:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7418:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b741a:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b741e:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7420:	bf0f      	iteee	eq
   b7422:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7426:	461a      	movne	r2, r3
   b7428:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b742a:	461d      	movne	r5, r3
   b742c:	e7dd      	b.n	b73ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b742e:	89a9      	ldrh	r1, [r5, #12]
   b7430:	4620      	mov	r0, r4
   b7432:	f7ff f8dc 	bl	b65ee <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7436:	4601      	mov	r1, r0
   b7438:	2800      	cmp	r0, #0
   b743a:	f43f af62 	beq.w	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b743e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7440:	2b00      	cmp	r3, #0
   b7442:	f43f af5e 	beq.w	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7446:	686b      	ldr	r3, [r5, #4]
   b7448:	9306      	str	r3, [sp, #24]
   b744a:	aa06      	add	r2, sp, #24
   b744c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b744e:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7452:	4798      	blx	r3
   b7454:	e755      	b.n	b7302 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7456:	bf00      	nop
   b7458:	000ba7df 	.word	0x000ba7df
   b745c:	000ba743 	.word	0x000ba743
   b7460:	000ba805 	.word	0x000ba805
   b7464:	000ba822 	.word	0x000ba822

000b7468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7468:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b746a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b746c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b746e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b7470:	dd05      	ble.n	b747e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b7472:	2114      	movs	r1, #20
   b7474:	4369      	muls	r1, r5
   b7476:	f7fe fd1f 	bl	b5eb8 <realloc>
            if (!d) {
   b747a:	b918      	cbnz	r0, b7484 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b747c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b747e:	f7fe fd13 	bl	b5ea8 <free>
        T* d = nullptr;
   b7482:	2000      	movs	r0, #0
        data_ = d;
   b7484:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b7486:	60a5      	str	r5, [r4, #8]
        return true;
   b7488:	2001      	movs	r0, #1
   b748a:	e7f7      	b.n	b747c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b748c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b7490:	2400      	movs	r4, #0
   b7492:	e9c0 4400 	strd	r4, r4, [r0]
   b7496:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7498:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b749a:	6849      	ldr	r1, [r1, #4]
   b749c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b749e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b74a0:	dd1a      	ble.n	b74d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b74a2:	f7ff ffe1 	bl	b7468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b74a6:	b1b8      	cbz	r0, b74d8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b74a8:	e9d8 9300 	ldrd	r9, r3, [r8]
   b74ac:	f04f 0c14 	mov.w	ip, #20
   b74b0:	f8d7 e000 	ldr.w	lr, [r7]
   b74b4:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b74b8:	eb09 0504 	add.w	r5, r9, r4
   b74bc:	45ac      	cmp	ip, r5
   b74be:	d008      	beq.n	b74d2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b74c0:	eb1e 0604 	adds.w	r6, lr, r4
   b74c4:	bf1f      	itttt	ne
   b74c6:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b74c8:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b74ca:	682b      	ldrne	r3, [r5, #0]
   b74cc:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b74ce:	3414      	adds	r4, #20
   b74d0:	e7f2      	b.n	b74b8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b74d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b74d6:	607b      	str	r3, [r7, #4]
}
   b74d8:	4638      	mov	r0, r7
   b74da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b74de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b74e2:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b74e6:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b74e8:	6883      	ldr	r3, [r0, #8]
   b74ea:	19e9      	adds	r1, r5, r7
   b74ec:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b74ee:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b74f0:	dc17      	bgt.n	b7522 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b74f2:	2314      	movs	r3, #20
   b74f4:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b74f6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b74f8:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b74fa:	fb03 f907 	mul.w	r9, r3, r7
   b74fe:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b7500:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7502:	1b52      	subs	r2, r2, r5
   b7504:	4631      	mov	r1, r6
   b7506:	eb06 0009 	add.w	r0, r6, r9
   b750a:	f002 fbbf 	bl	b9c8c <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b750e:	464a      	mov	r2, r9
   b7510:	4641      	mov	r1, r8
   b7512:	4630      	mov	r0, r6
   b7514:	f002 fbac 	bl	b9c70 <memcpy>
    size_ += n;
   b7518:	6863      	ldr	r3, [r4, #4]
   b751a:	443b      	add	r3, r7
   b751c:	6063      	str	r3, [r4, #4]
}
   b751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b7522:	f7ff ffa1 	bl	b7468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7526:	2800      	cmp	r0, #0
   b7528:	d1e3      	bne.n	b74f2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b752a:	e7f8      	b.n	b751e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b752c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b752c:	b082      	sub	sp, #8
   b752e:	b570      	push	{r4, r5, r6, lr}
   b7530:	460c      	mov	r4, r1
   b7532:	a904      	add	r1, sp, #16
   b7534:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7538:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b753c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b753e:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7540:	da17      	bge.n	b7572 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b7542:	2314      	movs	r3, #20
   b7544:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b7548:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b754a:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b754c:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b754e:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7550:	1a52      	subs	r2, r2, r1
   b7552:	18e0      	adds	r0, r4, r3
   b7554:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b7556:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b7558:	f002 fb98 	bl	b9c8c <memmove>
    new(p) T(std::move(value));
   b755c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7560:	6833      	ldr	r3, [r6, #0]
   b7562:	6023      	str	r3, [r4, #0]
    ++size_;
   b7564:	686b      	ldr	r3, [r5, #4]
   b7566:	3301      	adds	r3, #1
   b7568:	606b      	str	r3, [r5, #4]
}
   b756a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b756e:	b002      	add	sp, #8
   b7570:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7572:	3101      	adds	r1, #1
   b7574:	f7ff ff78 	bl	b7468 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7578:	2800      	cmp	r0, #0
   b757a:	d1e2      	bne.n	b7542 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b757c:	e7f5      	b.n	b756a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b757e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b7582:	2400      	movs	r4, #0
   b7584:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7586:	1e93      	subs	r3, r2, #2
   b7588:	e9c0 4400 	strd	r4, r4, [r0]
   b758c:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b758e:	4605      	mov	r5, r0
   b7590:	460f      	mov	r7, r1
   b7592:	4690      	mov	r8, r2
   b7594:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b7596:	9305      	str	r3, [sp, #20]
    return size_;
   b7598:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b759a:	428c      	cmp	r4, r1
   b759c:	da72      	bge.n	b7684 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b759e:	6838      	ldr	r0, [r7, #0]
   b75a0:	ab07      	add	r3, sp, #28
   b75a2:	4642      	mov	r2, r8
   b75a4:	1b09      	subs	r1, r1, r4
   b75a6:	4420      	add	r0, r4
   b75a8:	f7fe fd14 	bl	b5fd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b75ac:	4606      	mov	r6, r0
   b75ae:	2800      	cmp	r0, #0
   b75b0:	d068      	beq.n	b7684 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b75b2:	9b05      	ldr	r3, [sp, #20]
   b75b4:	2b01      	cmp	r3, #1
   b75b6:	d82f      	bhi.n	b7618 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b75b8:	f1a0 0b02 	sub.w	fp, r0, #2
   b75bc:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b75c0:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b75c4:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b75c8:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b75ca:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b75cc:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b75ce:	d055      	beq.n	b767c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b75d0:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b75d2:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b75d6:	4413      	add	r3, r2
   b75d8:	a808      	add	r0, sp, #32
   b75da:	78d9      	ldrb	r1, [r3, #3]
   b75dc:	789b      	ldrb	r3, [r3, #2]
   b75de:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b75e2:	f7fe fe5c 	bl	b629e <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b75e6:	f10d 0e20 	add.w	lr, sp, #32
   b75ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b75ee:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b75f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b75f6:	f8de 3000 	ldr.w	r3, [lr]
   b75fa:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b75fe:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7602:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b7606:	ab0d      	add	r3, sp, #52	; 0x34
   b7608:	cb0c      	ldmia	r3, {r2, r3}
   b760a:	6869      	ldr	r1, [r5, #4]
   b760c:	4628      	mov	r0, r5
   b760e:	f7ff ff8d 	bl	b752c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b7612:	f109 0901 	add.w	r9, r9, #1
   b7616:	e7d7      	b.n	b75c8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b7618:	f1a8 0306 	sub.w	r3, r8, #6
   b761c:	2b01      	cmp	r3, #1
   b761e:	d82d      	bhi.n	b767c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7620:	f1a0 0b02 	sub.w	fp, r0, #2
   b7624:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b7628:	f04f 0900 	mov.w	r9, #0
   b762c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b7630:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7632:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7634:	d022      	beq.n	b767c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b7636:	3302      	adds	r3, #2
    return data_[i];
   b7638:	6839      	ldr	r1, [r7, #0]
   b763a:	4423      	add	r3, r4
   b763c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b7640:	2201      	movs	r2, #1
   b7642:	4419      	add	r1, r3
   b7644:	a808      	add	r0, sp, #32
   b7646:	f7fe fe0b 	bl	b6260 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b764a:	f10d 0e20 	add.w	lr, sp, #32
   b764e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b7652:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b765a:	f8de 3000 	ldr.w	r3, [lr]
   b765e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b7662:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b7666:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b766a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b766e:	6869      	ldr	r1, [r5, #4]
   b7670:	4628      	mov	r0, r5
   b7672:	f7ff ff5b 	bl	b752c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b7676:	f109 0901 	add.w	r9, r9, #1
   b767a:	e7d9      	b.n	b7630 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b767c:	9b07      	ldr	r3, [sp, #28]
   b767e:	441c      	add	r4, r3
   b7680:	4434      	add	r4, r6
   b7682:	e789      	b.n	b7598 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b7684:	4628      	mov	r0, r5
   b7686:	b013      	add	sp, #76	; 0x4c
   b7688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b768c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b768c:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b768e:	2300      	movs	r3, #0
   b7690:	b085      	sub	sp, #20
   b7692:	e9c0 3300 	strd	r3, r3, [r0]
   b7696:	6083      	str	r3, [r0, #8]
   b7698:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b769a:	2202      	movs	r2, #2
   b769c:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b769e:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b76a0:	f7ff ff6d 	bl	b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b76a4:	a901      	add	r1, sp, #4
   b76a6:	4620      	mov	r0, r4
   b76a8:	f7ff ff19 	bl	b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b76ac:	a801      	add	r0, sp, #4
   b76ae:	f7ff f984 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b76b2:	2202      	movs	r2, #2
   b76b4:	4629      	mov	r1, r5
   b76b6:	a801      	add	r0, sp, #4
   b76b8:	f7ff ff61 	bl	b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b76bc:	a901      	add	r1, sp, #4
   b76be:	4620      	mov	r0, r4
   b76c0:	f7ff ff0d 	bl	b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b76c4:	a801      	add	r0, sp, #4
   b76c6:	f7ff f978 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b76ca:	2203      	movs	r2, #3
   b76cc:	4629      	mov	r1, r5
   b76ce:	a801      	add	r0, sp, #4
   b76d0:	f7ff ff55 	bl	b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b76d4:	a901      	add	r1, sp, #4
   b76d6:	4620      	mov	r0, r4
   b76d8:	f7ff ff01 	bl	b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b76dc:	a801      	add	r0, sp, #4
   b76de:	f7ff f96c 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b76e2:	2206      	movs	r2, #6
   b76e4:	4629      	mov	r1, r5
   b76e6:	a801      	add	r0, sp, #4
   b76e8:	f7ff ff49 	bl	b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b76ec:	a901      	add	r1, sp, #4
   b76ee:	4620      	mov	r0, r4
   b76f0:	f7ff fef5 	bl	b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b76f4:	a801      	add	r0, sp, #4
   b76f6:	f7ff f960 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b76fa:	2207      	movs	r2, #7
   b76fc:	4629      	mov	r1, r5
   b76fe:	a801      	add	r0, sp, #4
   b7700:	f7ff ff3d 	bl	b757e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b7704:	a901      	add	r1, sp, #4
   b7706:	4620      	mov	r0, r4
   b7708:	f7ff fee9 	bl	b74de <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b770c:	a801      	add	r0, sp, #4
   b770e:	f7ff f954 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b7712:	4620      	mov	r0, r4
   b7714:	b005      	add	sp, #20
   b7716:	bd30      	pop	{r4, r5, pc}

000b7718 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b7718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b771c:	b085      	sub	sp, #20
   b771e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7720:	4601      	mov	r1, r0
   b7722:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b7724:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7726:	f7ff ffb1 	bl	b768c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b772a:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b772c:	9b02      	ldr	r3, [sp, #8]
   b772e:	f04f 0e14 	mov.w	lr, #20
   b7732:	fb0e 6c03 	mla	ip, lr, r3, r6
   b7736:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b7738:	45b4      	cmp	ip, r6
   b773a:	d00d      	beq.n	b7758 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b773c:	45b9      	cmp	r9, r7
   b773e:	f106 0614 	add.w	r6, r6, #20
   b7742:	d009      	beq.n	b7758 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b7744:	f1a6 0514 	sub.w	r5, r6, #20
   b7748:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b774a:	fb0e 8407 	mla	r4, lr, r7, r8
   b774e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7750:	682b      	ldr	r3, [r5, #0]
   b7752:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b7754:	3701      	adds	r7, #1
   b7756:	e7ef      	b.n	b7738 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b7758:	a801      	add	r0, sp, #4
   b775a:	f7ff f92e 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b775e:	4638      	mov	r0, r7
   b7760:	b005      	add	sp, #20
   b7762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7766 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b7766:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b776a:	b08b      	sub	sp, #44	; 0x2c
   b776c:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b776e:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b7772:	a801      	add	r0, sp, #4
   b7774:	f7ff fe8a 	bl	b748c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b7778:	9b02      	ldr	r3, [sp, #8]
   b777a:	2b00      	cmp	r3, #0
   b777c:	dd4a      	ble.n	b7814 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b777e:	f104 0114 	add.w	r1, r4, #20
   b7782:	a804      	add	r0, sp, #16
   b7784:	f7ff ff82 	bl	b768c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b7788:	f104 0108 	add.w	r1, r4, #8
   b778c:	a807      	add	r0, sp, #28
   b778e:	f7ff ff7d 	bl	b768c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b7792:	9d05      	ldr	r5, [sp, #20]
   b7794:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b7796:	2d00      	cmp	r5, #0
   b7798:	dc01      	bgt.n	b779e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b779a:	2e00      	cmp	r6, #0
   b779c:	dd38      	ble.n	b7810 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b779e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b77a0:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b77a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b77a6:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b77aa:	2314      	movs	r3, #20
   b77ac:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b77b0:	fb03 8505 	mla	r5, r3, r5, r8
   b77b4:	fb03 9606 	mla	r6, r3, r6, r9
   b77b8:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b77ba:	45ba      	cmp	sl, r7
   b77bc:	d028      	beq.n	b7810 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b77be:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b77c0:	45ab      	cmp	fp, r5
   b77c2:	d015      	beq.n	b77f0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b77c4:	4659      	mov	r1, fp
   b77c6:	4650      	mov	r0, sl
   b77c8:	f7fe fd73 	bl	b62b2 <_ZNK8particle7BleUuideqERKS0_>
   b77cc:	f10b 0b14 	add.w	fp, fp, #20
   b77d0:	4604      	mov	r4, r0
   b77d2:	2800      	cmp	r0, #0
   b77d4:	d0f4      	beq.n	b77c0 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b77d6:	a807      	add	r0, sp, #28
   b77d8:	f7ff f8ef 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b77dc:	a804      	add	r0, sp, #16
   b77de:	f7ff f8ec 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b77e2:	a801      	add	r0, sp, #4
   b77e4:	f7ff f8e9 	bl	b69ba <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b77e8:	4620      	mov	r0, r4
   b77ea:	b00b      	add	sp, #44	; 0x2c
   b77ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b77f0:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b77f2:	45b3      	cmp	fp, r6
   b77f4:	d009      	beq.n	b780a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b77f6:	4659      	mov	r1, fp
   b77f8:	4650      	mov	r0, sl
   b77fa:	f7fe fd5a 	bl	b62b2 <_ZNK8particle7BleUuideqERKS0_>
   b77fe:	f10b 0b14 	add.w	fp, fp, #20
   b7802:	4604      	mov	r4, r0
   b7804:	2800      	cmp	r0, #0
   b7806:	d0f4      	beq.n	b77f2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b7808:	e7e5      	b.n	b77d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b780a:	f10a 0a14 	add.w	sl, sl, #20
   b780e:	e7d4      	b.n	b77ba <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b7810:	2400      	movs	r4, #0
   b7812:	e7e0      	b.n	b77d6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b7814:	2401      	movs	r4, #1
   b7816:	e7e4      	b.n	b77e2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b7818 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b7818:	b513      	push	{r0, r1, r4, lr}
   b781a:	460b      	mov	r3, r1
   b781c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b781e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7822:	466c      	mov	r4, sp
   b7824:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7828:	e893 0003 	ldmia.w	r3, {r0, r1}
   b782c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7830:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7834:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7838:	b002      	add	sp, #8
   b783a:	bd10      	pop	{r4, pc}

000b783c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b783c:	b538      	push	{r3, r4, r5, lr}
   b783e:	4605      	mov	r5, r0
   b7840:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7842:	f7ff ffe9 	bl	b7818 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7846:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7848:	68a2      	ldr	r2, [r4, #8]
   b784a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b784c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b784e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7850:	68e2      	ldr	r2, [r4, #12]
   b7852:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7854:	60e3      	str	r3, [r4, #12]
      }
   b7856:	bd38      	pop	{r3, r4, r5, pc}

000b7858 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b7858:	b530      	push	{r4, r5, lr}
   b785a:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b785c:	2300      	movs	r3, #0
   b785e:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b7860:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b7862:	4605      	mov	r5, r0
   b7864:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b7866:	b133      	cbz	r3, b7876 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b7868:	2202      	movs	r2, #2
   b786a:	4668      	mov	r0, sp
   b786c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b786e:	68e3      	ldr	r3, [r4, #12]
   b7870:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b7872:	68a3      	ldr	r3, [r4, #8]
   b7874:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b7876:	4629      	mov	r1, r5
   b7878:	4668      	mov	r0, sp
   b787a:	f7ff ffdf 	bl	b783c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b787e:	4668      	mov	r0, sp
   b7880:	f7fd ffec 	bl	b585c <_ZNSt14_Function_baseD1Ev>
      }
   b7884:	b005      	add	sp, #20
   b7886:	bd30      	pop	{r4, r5, pc}

000b7888 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b7888:	b538      	push	{r3, r4, r5, lr}
   b788a:	460d      	mov	r5, r1
      { return _M_ptr; }
   b788c:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b788e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b7890:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b7892:	b123      	cbz	r3, b789e <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b7894:	6828      	ldr	r0, [r5, #0]
   b7896:	314c      	adds	r1, #76	; 0x4c
   b7898:	304c      	adds	r0, #76	; 0x4c
   b789a:	f7ff ffdd 	bl	b7858 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b789e:	4620      	mov	r0, r4
   b78a0:	682b      	ldr	r3, [r5, #0]
   b78a2:	f840 3b04 	str.w	r3, [r0], #4
   b78a6:	6869      	ldr	r1, [r5, #4]
   b78a8:	f7fe fc3c 	bl	b6124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b78ac:	4620      	mov	r0, r4
   b78ae:	bd38      	pop	{r3, r4, r5, pc}

000b78b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b78b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78b4:	4604      	mov	r4, r0
   b78b6:	b087      	sub	sp, #28
    WiringBleLock lk;
   b78b8:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b78ba:	460e      	mov	r6, r1
   b78bc:	4617      	mov	r7, r2
    WiringBleLock lk;
   b78be:	f7fe fc57 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b78c2:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b78c4:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b78c8:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b78cc:	4544      	cmp	r4, r8
   b78ce:	46a1      	mov	r9, r4
   b78d0:	d016      	beq.n	b7900 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b78d2:	4621      	mov	r1, r4
   b78d4:	a801      	add	r0, sp, #4
   b78d6:	f7fe feb5 	bl	b6644 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b78da:	4639      	mov	r1, r7
   b78dc:	a801      	add	r0, sp, #4
   b78de:	f7fe fce8 	bl	b62b2 <_ZNK8particle7BleUuideqERKS0_>
   b78e2:	3408      	adds	r4, #8
   b78e4:	4605      	mov	r5, r0
   b78e6:	2800      	cmp	r0, #0
   b78e8:	d0f0      	beq.n	b78cc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b78ea:	4649      	mov	r1, r9
   b78ec:	4630      	mov	r0, r6
   b78ee:	f7ff ffcb 	bl	b7888 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b78f2:	4668      	mov	r0, sp
   b78f4:	f7fe fc4a 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b78f8:	4628      	mov	r0, r5
   b78fa:	b007      	add	sp, #28
   b78fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b7900:	2500      	movs	r5, #0
   b7902:	e7f6      	b.n	b78f2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b7904 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7904:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b7906:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b7908:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b790a:	344c      	adds	r4, #76	; 0x4c
   b790c:	b1b9      	cbz	r1, b793e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b790e:	e9cd 1200 	strd	r1, r2, [sp]
   b7912:	a802      	add	r0, sp, #8
   b7914:	4669      	mov	r1, sp
   b7916:	f7ff f8af 	bl	b6a78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b791a:	2300      	movs	r3, #0
	__x.swap(*this);
   b791c:	a906      	add	r1, sp, #24
   b791e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7920:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7922:	f7ff ff8b 	bl	b783c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b7926:	4621      	mov	r1, r4
   b7928:	a806      	add	r0, sp, #24
   b792a:	f7ff ff87 	bl	b783c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b792e:	a806      	add	r0, sp, #24
   b7930:	f7fd ff94 	bl	b585c <_ZNSt14_Function_baseD1Ev>
   b7934:	a802      	add	r0, sp, #8
   b7936:	f7fd ff91 	bl	b585c <_ZNSt14_Function_baseD1Ev>
}
   b793a:	b00a      	add	sp, #40	; 0x28
   b793c:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b793e:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7940:	e7eb      	b.n	b791a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b7942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7942:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7946:	4604      	mov	r4, r0
   b7948:	460d      	mov	r5, r1
   b794a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b794c:	d914      	bls.n	b7978 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b794e:	4290      	cmp	r0, r2
   b7950:	d213      	bcs.n	b797a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7952:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7956:	1a75      	subs	r5, r6, r1
   b7958:	f1a1 0708 	sub.w	r7, r1, #8
   b795c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b795e:	42b7      	cmp	r7, r6
   b7960:	d018      	beq.n	b7994 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7962:	b11c      	cbz	r4, b796c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7964:	4631      	mov	r1, r6
   b7966:	4620      	mov	r0, r4
   b7968:	f7ff f8b3 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b796c:	1d30      	adds	r0, r6, #4
   b796e:	f7ff f8c4 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7972:	3e08      	subs	r6, #8
   b7974:	3c08      	subs	r4, #8
   b7976:	e7f2      	b.n	b795e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7978:	d00c      	beq.n	b7994 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b797a:	42b5      	cmp	r5, r6
   b797c:	d00a      	beq.n	b7994 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b797e:	b11c      	cbz	r4, b7988 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7980:	4629      	mov	r1, r5
   b7982:	4620      	mov	r0, r4
   b7984:	f7ff f8a5 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7988:	1d28      	adds	r0, r5, #4
   b798a:	f7ff f8b6 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b798e:	3508      	adds	r5, #8
   b7990:	3408      	adds	r4, #8
   b7992:	e7f2      	b.n	b797a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7996:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7998:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b799a:	4605      	mov	r5, r0
        if (n > 0) {
   b799c:	dd11      	ble.n	b79c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b799e:	00f0      	lsls	r0, r6, #3
   b79a0:	f7fe fa7a 	bl	b5e98 <malloc>
            if (!d) {
   b79a4:	4604      	mov	r4, r0
   b79a6:	b158      	cbz	r0, b79c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b79a8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b79ac:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b79b0:	f7ff ffc7 	bl	b7942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b79b4:	6828      	ldr	r0, [r5, #0]
   b79b6:	f7fe fa77 	bl	b5ea8 <free>
        data_ = d;
   b79ba:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b79bc:	60ae      	str	r6, [r5, #8]
        return true;
   b79be:	2001      	movs	r0, #1
    }
   b79c0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b79c2:	2400      	movs	r4, #0
   b79c4:	e7f6      	b.n	b79b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b79c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b79c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b79ca:	2300      	movs	r3, #0
   b79cc:	e9c0 3300 	strd	r3, r3, [r0]
   b79d0:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b79d2:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b79d4:	6849      	ldr	r1, [r1, #4]
   b79d6:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b79d8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b79da:	dd13      	ble.n	b7a04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b79dc:	f7ff ffdb 	bl	b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b79e0:	b180      	cbz	r0, b7a04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b79e2:	e9d5 6300 	ldrd	r6, r3, [r5]
   b79e6:	6827      	ldr	r7, [r4, #0]
   b79e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b79ec:	45b0      	cmp	r8, r6
   b79ee:	d007      	beq.n	b7a00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b79f0:	b11f      	cbz	r7, b79fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b79f2:	4631      	mov	r1, r6
   b79f4:	4638      	mov	r0, r7
   b79f6:	f7ff f86c 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b79fa:	3608      	adds	r6, #8
   b79fc:	3708      	adds	r7, #8
   b79fe:	e7f5      	b.n	b79ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b7a00:	686b      	ldr	r3, [r5, #4]
   b7a02:	6063      	str	r3, [r4, #4]
}
   b7a04:	4620      	mov	r0, r4
   b7a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a0a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b7a0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7a0c:	460d      	mov	r5, r1
   b7a0e:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7a10:	a801      	add	r0, sp, #4
   b7a12:	f7fe fbad 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b7a16:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b7a18:	4620      	mov	r0, r4
   b7a1a:	310c      	adds	r1, #12
   b7a1c:	f7ff ffd3 	bl	b79c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b7a20:	a801      	add	r0, sp, #4
   b7a22:	f7fe fbb3 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7a26:	4620      	mov	r0, r4
   b7a28:	b003      	add	sp, #12
   b7a2a:	bd30      	pop	{r4, r5, pc}

000b7a2c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7a2c:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b7a2e:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7a30:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b7a32:	4605      	mov	r5, r0
   b7a34:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b7a36:	b933      	cbnz	r3, b7a46 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b7a38:	4608      	mov	r0, r1
   b7a3a:	f7fe fb2d 	bl	b6098 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b7a3e:	b910      	cbnz	r0, b7a46 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b7a40:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b7a42:	2201      	movs	r2, #1
   b7a44:	729a      	strb	r2, [r3, #10]
    return services();
   b7a46:	4628      	mov	r0, r5
   b7a48:	4621      	mov	r1, r4
   b7a4a:	f7ff ffde 	bl	b7a0a <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b7a4e:	4628      	mov	r0, r5
   b7a50:	bd38      	pop	{r3, r4, r5, pc}

000b7a52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7a54:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7a56:	6845      	ldr	r5, [r0, #4]
   b7a58:	4668      	mov	r0, sp
   b7a5a:	f7ff f83a 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a5e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7a62:	4299      	cmp	r1, r3
   b7a64:	da10      	bge.n	b7a88 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7a66:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7a68:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7a6a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7a6e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7a72:	4629      	mov	r1, r5
   b7a74:	f105 0008 	add.w	r0, r5, #8
   b7a78:	f7ff ff63 	bl	b7942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7a7c:	b98d      	cbnz	r5, b7aa2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7a7e:	6863      	ldr	r3, [r4, #4]
   b7a80:	3301      	adds	r3, #1
   b7a82:	6063      	str	r3, [r4, #4]
    return true;
   b7a84:	2601      	movs	r6, #1
   b7a86:	e006      	b.n	b7a96 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a88:	3101      	adds	r1, #1
   b7a8a:	4620      	mov	r0, r4
   b7a8c:	f7ff ff83 	bl	b7996 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7a90:	4606      	mov	r6, r0
   b7a92:	2800      	cmp	r0, #0
   b7a94:	d1e7      	bne.n	b7a66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b7a96:	a801      	add	r0, sp, #4
   b7a98:	f7ff f82f 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7a9c:	4630      	mov	r0, r6
   b7a9e:	b002      	add	sp, #8
   b7aa0:	bd70      	pop	{r4, r5, r6, pc}
   b7aa2:	4669      	mov	r1, sp
   b7aa4:	4628      	mov	r0, r5
   b7aa6:	f7ff f814 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7aaa:	e7e8      	b.n	b7a7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7aac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b7ab0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b7b6c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b7ab4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b7b70 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b7ab8:	b093      	sub	sp, #76	; 0x4c
   b7aba:	4605      	mov	r5, r0
   b7abc:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b7abe:	2700      	movs	r7, #0
   b7ac0:	682b      	ldr	r3, [r5, #0]
   b7ac2:	42bb      	cmp	r3, r7
   b7ac4:	d94e      	bls.n	b7b64 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b7ac6:	a803      	add	r0, sp, #12
   b7ac8:	f7fe fe02 	bl	b66d0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b7acc:	261c      	movs	r6, #28
   b7ace:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b7ad0:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b7ad2:	437e      	muls	r6, r7
   b7ad4:	4432      	add	r2, r6
   b7ad6:	f10d 0c14 	add.w	ip, sp, #20
   b7ada:	1d13      	adds	r3, r2, #4
   b7adc:	46e3      	mov	fp, ip
   b7ade:	3214      	adds	r2, #20
   b7ae0:	6818      	ldr	r0, [r3, #0]
   b7ae2:	6859      	ldr	r1, [r3, #4]
   b7ae4:	46e6      	mov	lr, ip
   b7ae6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b7aea:	3308      	adds	r3, #8
   b7aec:	4293      	cmp	r3, r2
   b7aee:	46f4      	mov	ip, lr
   b7af0:	d1f6      	bne.n	b7ae0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b7af2:	6818      	ldr	r0, [r3, #0]
   b7af4:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b7af8:	4659      	mov	r1, fp
   b7afa:	a80a      	add	r0, sp, #40	; 0x28
   b7afc:	f7fe fb8e 	bl	b621c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b7b00:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b7b04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7b0a:	f8dc 3000 	ldr.w	r3, [ip]
   b7b0e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b7b10:	686b      	ldr	r3, [r5, #4]
   b7b12:	9a03      	ldr	r2, [sp, #12]
   b7b14:	4433      	add	r3, r6
   b7b16:	a903      	add	r1, sp, #12
   b7b18:	8b1b      	ldrh	r3, [r3, #24]
   b7b1a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b7b1c:	686b      	ldr	r3, [r5, #4]
   b7b1e:	4433      	add	r3, r6
   b7b20:	8b5b      	ldrh	r3, [r3, #26]
   b7b22:	82d3      	strh	r3, [r2, #22]
        return services_;
   b7b24:	f8d8 0000 	ldr.w	r0, [r8]
   b7b28:	f100 040c 	add.w	r4, r0, #12
   b7b2c:	a80a      	add	r0, sp, #40	; 0x28
   b7b2e:	f7fe ffd0 	bl	b6ad2 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b7b32:	4620      	mov	r0, r4
   b7b34:	a90a      	add	r1, sp, #40	; 0x28
   b7b36:	f7ff ff8c 	bl	b7a52 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b7b3a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b7b3c:	a80b      	add	r0, sp, #44	; 0x2c
   b7b3e:	f7fe ffdc 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7b42:	b954      	cbnz	r4, b7b5a <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b7b44:	2320      	movs	r3, #32
   b7b46:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b7b4a:	f8cd 9000 	str.w	r9, [sp]
   b7b4e:	4623      	mov	r3, r4
   b7b50:	aa0a      	add	r2, sp, #40	; 0x28
   b7b52:	4651      	mov	r1, sl
   b7b54:	2032      	movs	r0, #50	; 0x32
   b7b56:	f7fe f903 	bl	b5d60 <log_message>
   b7b5a:	a804      	add	r0, sp, #16
   b7b5c:	f7fe ffcd 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b7b60:	3701      	adds	r7, #1
   b7b62:	e7ad      	b.n	b7ac0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b7b64:	b013      	add	sp, #76	; 0x4c
   b7b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b6a:	bf00      	nop
   b7b6c:	000ba841 	.word	0x000ba841
   b7b70:	000ba743 	.word	0x000ba743

000b7b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7b74:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b78:	4604      	mov	r4, r0
   b7b7a:	460d      	mov	r5, r1
   b7b7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7b7e:	d914      	bls.n	b7baa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7b80:	4290      	cmp	r0, r2
   b7b82:	d213      	bcs.n	b7bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b84:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b88:	1a75      	subs	r5, r6, r1
   b7b8a:	f1a1 0708 	sub.w	r7, r1, #8
   b7b8e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b90:	42b7      	cmp	r7, r6
   b7b92:	d018      	beq.n	b7bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b94:	b11c      	cbz	r4, b7b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b7b96:	4631      	mov	r1, r6
   b7b98:	4620      	mov	r0, r4
   b7b9a:	f7fe ff8c 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7b9e:	1d30      	adds	r0, r6, #4
   b7ba0:	f7fe ffab 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7ba4:	3e08      	subs	r6, #8
   b7ba6:	3c08      	subs	r4, #8
   b7ba8:	e7f2      	b.n	b7b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7baa:	d00c      	beq.n	b7bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7bac:	42b5      	cmp	r5, r6
   b7bae:	d00a      	beq.n	b7bc6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7bb0:	b11c      	cbz	r4, b7bba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7bb2:	4629      	mov	r1, r5
   b7bb4:	4620      	mov	r0, r4
   b7bb6:	f7fe ff7e 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7bba:	1d28      	adds	r0, r5, #4
   b7bbc:	f7fe ff9d 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7bc0:	3508      	adds	r5, #8
   b7bc2:	3408      	adds	r4, #8
   b7bc4:	e7f2      	b.n	b7bac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b7bc8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7bca:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7bcc:	4605      	mov	r5, r0
        if (n > 0) {
   b7bce:	dd11      	ble.n	b7bf4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7bd0:	00f0      	lsls	r0, r6, #3
   b7bd2:	f7fe f961 	bl	b5e98 <malloc>
            if (!d) {
   b7bd6:	4604      	mov	r4, r0
   b7bd8:	b158      	cbz	r0, b7bf2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7bda:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7bde:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7be2:	f7ff ffc7 	bl	b7b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7be6:	6828      	ldr	r0, [r5, #0]
   b7be8:	f7fe f95e 	bl	b5ea8 <free>
        data_ = d;
   b7bec:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7bee:	60ae      	str	r6, [r5, #8]
        return true;
   b7bf0:	2001      	movs	r0, #1
    }
   b7bf2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7bf4:	2400      	movs	r4, #0
   b7bf6:	e7f6      	b.n	b7be6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b7bf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7bfc:	2300      	movs	r3, #0
   b7bfe:	e9c0 3300 	strd	r3, r3, [r0]
   b7c02:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7c04:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7c06:	6849      	ldr	r1, [r1, #4]
   b7c08:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7c0a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7c0c:	dd13      	ble.n	b7c36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b7c0e:	f7ff ffdb 	bl	b7bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c12:	b180      	cbz	r0, b7c36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b7c14:	e9d5 6300 	ldrd	r6, r3, [r5]
   b7c18:	6827      	ldr	r7, [r4, #0]
   b7c1a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b7c1e:	45b0      	cmp	r8, r6
   b7c20:	d007      	beq.n	b7c32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b7c22:	b11f      	cbz	r7, b7c2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b7c24:	4631      	mov	r1, r6
   b7c26:	4638      	mov	r0, r7
   b7c28:	f7fe ff45 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b7c2c:	3608      	adds	r6, #8
   b7c2e:	3708      	adds	r7, #8
   b7c30:	e7f5      	b.n	b7c1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b7c32:	686b      	ldr	r3, [r5, #4]
   b7c34:	6063      	str	r3, [r4, #4]
}
   b7c36:	4620      	mov	r0, r4
   b7c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7c3c <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b7c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7c3e:	460d      	mov	r5, r1
   b7c40:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7c42:	a801      	add	r0, sp, #4
   b7c44:	f7fe fa94 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b7c48:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b7c4a:	4620      	mov	r0, r4
   b7c4c:	3118      	adds	r1, #24
   b7c4e:	f7ff ffd3 	bl	b7bf8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b7c52:	a801      	add	r0, sp, #4
   b7c54:	f7fe fa9a 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7c58:	4620      	mov	r0, r4
   b7c5a:	b003      	add	sp, #12
   b7c5c:	bd30      	pop	{r4, r5, pc}

000b7c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c60:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7c62:	6845      	ldr	r5, [r0, #4]
   b7c64:	4668      	mov	r0, sp
   b7c66:	f7fe ff26 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c6a:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b7c6e:	4299      	cmp	r1, r3
   b7c70:	da10      	bge.n	b7c94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b7c72:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7c74:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7c76:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b7c7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7c7e:	4629      	mov	r1, r5
   b7c80:	f105 0008 	add.w	r0, r5, #8
   b7c84:	f7ff ff76 	bl	b7b74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7c88:	b98d      	cbnz	r5, b7cae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b7c8a:	6863      	ldr	r3, [r4, #4]
   b7c8c:	3301      	adds	r3, #1
   b7c8e:	6063      	str	r3, [r4, #4]
    return true;
   b7c90:	2601      	movs	r6, #1
   b7c92:	e006      	b.n	b7ca2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c94:	3101      	adds	r1, #1
   b7c96:	4620      	mov	r0, r4
   b7c98:	f7ff ff96 	bl	b7bc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b7c9c:	4606      	mov	r6, r0
   b7c9e:	2800      	cmp	r0, #0
   b7ca0:	d1e7      	bne.n	b7c72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b7ca2:	a801      	add	r0, sp, #4
   b7ca4:	f7fe ff29 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7ca8:	4630      	mov	r0, r6
   b7caa:	b002      	add	sp, #8
   b7cac:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b7cae:	4669      	mov	r1, sp
   b7cb0:	4628      	mov	r0, r5
   b7cb2:	f7fe ff00 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7cb6:	e7e8      	b.n	b7c8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b7cb8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b7cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7cba:	b085      	sub	sp, #20
   b7cbc:	4605      	mov	r5, r0
    WiringBleLock lk;
   b7cbe:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b7cc0:	460c      	mov	r4, r1
   b7cc2:	4617      	mov	r7, r2
    WiringBleLock lk;
   b7cc4:	f7fe fa54 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b7cc8:	2300      	movs	r3, #0
   b7cca:	e9c5 3300 	strd	r3, r3, [r5]
   b7cce:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b7cd0:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b7cd2:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b7cd6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b7cda:	42b4      	cmp	r4, r6
   b7cdc:	d011      	beq.n	b7d02 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b7cde:	6838      	ldr	r0, [r7, #0]
   b7ce0:	4621      	mov	r1, r4
   b7ce2:	f7fe fc6f 	bl	b65c4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b7ce6:	b150      	cbz	r0, b7cfe <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b7ce8:	4621      	mov	r1, r4
   b7cea:	a802      	add	r0, sp, #8
   b7cec:	f7fe fee3 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b7cf0:	a902      	add	r1, sp, #8
   b7cf2:	4628      	mov	r0, r5
   b7cf4:	f7ff ffb3 	bl	b7c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b7cf8:	a803      	add	r0, sp, #12
   b7cfa:	f7fe fefe 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b7cfe:	3408      	adds	r4, #8
   b7d00:	e7eb      	b.n	b7cda <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b7d02:	a801      	add	r0, sp, #4
   b7d04:	f7fe fa42 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7d08:	4628      	mov	r0, r5
   b7d0a:	b005      	add	sp, #20
   b7d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7d10 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b7d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b7d14:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7d16:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b7d18:	b091      	sub	sp, #68	; 0x44
   b7d1a:	4606      	mov	r6, r0
   b7d1c:	460f      	mov	r7, r1
   b7d1e:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b7d20:	b933      	cbnz	r3, b7d30 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b7d22:	e9c0 3300 	strd	r3, r3, [r0]
   b7d26:	6083      	str	r3, [r0, #8]
}
   b7d28:	4630      	mov	r0, r6
   b7d2a:	b011      	add	sp, #68	; 0x44
   b7d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b7d30:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b7d32:	7e0d      	ldrb	r5, [r1, #24]
   b7d34:	2d00      	cmp	r5, #0
   b7d36:	d158      	bne.n	b7dea <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b7d38:	2320      	movs	r3, #32
   b7d3a:	462a      	mov	r2, r5
   b7d3c:	a803      	add	r0, sp, #12
   b7d3e:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b7d42:	f7fe fbb2 	bl	b64aa <_ZNK8particle7BleUuid8toStringEb>
   b7d46:	9b03      	ldr	r3, [sp, #12]
   b7d48:	9301      	str	r3, [sp, #4]
   b7d4a:	4b2b      	ldr	r3, [pc, #172]	; (b7df8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b7d4c:	492b      	ldr	r1, [pc, #172]	; (b7dfc <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b7d4e:	9300      	str	r3, [sp, #0]
   b7d50:	aa08      	add	r2, sp, #32
   b7d52:	462b      	mov	r3, r5
   b7d54:	2001      	movs	r0, #1
   b7d56:	f7fe f803 	bl	b5d60 <log_message>
   b7d5a:	a803      	add	r0, sp, #12
   b7d5c:	f000 ff00 	bl	b8b60 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b7d60:	231c      	movs	r3, #28
   b7d62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b7d66:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b7d6a:	8a9a      	ldrh	r2, [r3, #20]
   b7d6c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b7d70:	8adb      	ldrh	r3, [r3, #22]
   b7d72:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b7d76:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b7d78:	4a21      	ldr	r2, [pc, #132]	; (b7e00 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b7d7a:	8818      	ldrh	r0, [r3, #0]
   b7d7c:	9500      	str	r5, [sp, #0]
   b7d7e:	a908      	add	r1, sp, #32
   b7d80:	f7fd fda4 	bl	b58cc <hal_ble_gatt_client_discover_characteristics>
   b7d84:	2800      	cmp	r0, #0
   b7d86:	db30      	blt.n	b7dea <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b7d88:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b7d8a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b7d8e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b7d92:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7d94:	f1a4 0308 	sub.w	r3, r4, #8
   b7d98:	4599      	cmp	r9, r3
   b7d9a:	d022      	beq.n	b7de2 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b7d9c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b7da0:	89db      	ldrh	r3, [r3, #14]
   b7da2:	2b00      	cmp	r3, #0
   b7da4:	d0f5      	beq.n	b7d92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b7da6:	2210      	movs	r2, #16
   b7da8:	2100      	movs	r1, #0
   b7daa:	eb0d 0002 	add.w	r0, sp, r2
   b7dae:	9503      	str	r5, [sp, #12]
   b7db0:	f001 ff86 	bl	b9cc0 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b7db4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b7db8:	89d9      	ldrh	r1, [r3, #14]
   b7dba:	683b      	ldr	r3, [r7, #0]
   b7dbc:	aa03      	add	r2, sp, #12
   b7dbe:	8818      	ldrh	r0, [r3, #0]
   b7dc0:	9500      	str	r5, [sp, #0]
   b7dc2:	2313      	movs	r3, #19
   b7dc4:	f7fd fd8c 	bl	b58e0 <hal_ble_gatt_client_read>
                if (len > 0) {
   b7dc8:	2800      	cmp	r0, #0
   b7dca:	d0e2      	beq.n	b7d92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b7dcc:	ab10      	add	r3, sp, #64	; 0x40
   b7dce:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b7dd0:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b7dd2:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b7dd6:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b7dda:	303c      	adds	r0, #60	; 0x3c
   b7ddc:	f000 ff61 	bl	b8ca2 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b7de0:	e7d7      	b.n	b7d92 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b7de2:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b7de6:	2201      	movs	r2, #1
   b7de8:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b7dea:	4642      	mov	r2, r8
   b7dec:	4639      	mov	r1, r7
   b7dee:	4630      	mov	r0, r6
   b7df0:	f7ff ff62 	bl	b7cb8 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b7df4:	e798      	b.n	b7d28 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b7df6:	bf00      	nop
   b7df8:	000ba866 	.word	0x000ba866
   b7dfc:	000ba743 	.word	0x000ba743
   b7e00:	000b7fa9 	.word	0x000b7fa9

000b7e04 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b7e04:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b7e06:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b7e08:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b7e0a:	b085      	sub	sp, #20
   b7e0c:	4606      	mov	r6, r0
   b7e0e:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b7e10:	b92b      	cbnz	r3, b7e1e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b7e12:	a801      	add	r0, sp, #4
   b7e14:	f7ff fe0a 	bl	b7a2c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b7e18:	a801      	add	r0, sp, #4
   b7e1a:	f7fe fe7d 	bl	b6b18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b7e1e:	682b      	ldr	r3, [r5, #0]
   b7e20:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b7e24:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b7e28:	42bc      	cmp	r4, r7
   b7e2a:	d009      	beq.n	b7e40 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b7e2c:	4622      	mov	r2, r4
   b7e2e:	4629      	mov	r1, r5
   b7e30:	a801      	add	r0, sp, #4
   b7e32:	f7ff ff6d 	bl	b7d10 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b7e36:	a801      	add	r0, sp, #4
   b7e38:	f7fe fe80 	bl	b6b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b7e3c:	3408      	adds	r4, #8
   b7e3e:	e7f3      	b.n	b7e28 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b7e40:	4630      	mov	r0, r6
   b7e42:	4629      	mov	r1, r5
   b7e44:	f7ff fefa 	bl	b7c3c <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b7e48:	4630      	mov	r0, r6
   b7e4a:	b005      	add	sp, #20
   b7e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b7e50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e54:	4605      	mov	r5, r0
   b7e56:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b7e58:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b7e5a:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7e5c:	460f      	mov	r7, r1
    return address_;
   b7e5e:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b7e60:	4698      	mov	r8, r3
    return address_;
   b7e62:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b7e64:	4b41      	ldr	r3, [pc, #260]	; (b7f6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b7e66:	9304      	str	r3, [sp, #16]
    return address_;
   b7e68:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b7e6a:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b7e6c:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b7e70:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b7e74:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b7e78:	f7fe fcf6 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7e7c:	4b3c      	ldr	r3, [pc, #240]	; (b7f70 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b7e7e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b7e80:	f7fe fcf2 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b7e84:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b7e86:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b7e88:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b7e8a:	464a      	mov	r2, r9
   b7e8c:	a804      	add	r0, sp, #16
   b7e8e:	f7fd fd31 	bl	b58f4 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b7e92:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b7e94:	4604      	mov	r4, r0
   b7e96:	b138      	cbz	r0, b7ea8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b7e98:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7e9e:	801a      	strh	r2, [r3, #0]
}
   b7ea0:	4620      	mov	r0, r4
   b7ea2:	b013      	add	sp, #76	; 0x4c
   b7ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b7ea8:	4639      	mov	r1, r7
   b7eaa:	4628      	mov	r0, r5
   b7eac:	f7fe fc60 	bl	b6770 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b7eb0:	a803      	add	r0, sp, #12
   b7eb2:	f7fe f95d 	bl	b6170 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b7eb6:	f7fe fcd7 	bl	b6868 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b7eba:	6807      	ldr	r7, [r0, #0]
   b7ebc:	4629      	mov	r1, r5
   b7ebe:	3718      	adds	r7, #24
   b7ec0:	4630      	mov	r0, r6
   b7ec2:	f7fe fe10 	bl	b6ae6 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b7ec6:	4631      	mov	r1, r6
   b7ec8:	4638      	mov	r0, r7
   b7eca:	f7ff f975 	bl	b71b8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7ece:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b7ed0:	a80b      	add	r0, sp, #44	; 0x2c
   b7ed2:	f7fe fe12 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7ed6:	f04f 0920 	mov.w	r9, #32
   b7eda:	bb1f      	cbnz	r7, b7f24 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b7edc:	4632      	mov	r2, r6
   b7ede:	4b25      	ldr	r3, [pc, #148]	; (b7f74 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
   b7ee0:	4e25      	ldr	r6, [pc, #148]	; (b7f78 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b7ee2:	4926      	ldr	r1, [pc, #152]	; (b7f7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b7ee4:	9300      	str	r3, [sp, #0]
   b7ee6:	2032      	movs	r0, #50	; 0x32
   b7ee8:	4623      	mov	r3, r4
   b7eea:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b7eee:	f7fd ff37 	bl	b5d60 <log_message>
   b7ef2:	6830      	ldr	r0, [r6, #0]
   b7ef4:	f7fd fd2c 	bl	b5950 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7ef8:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b7efa:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7efe:	4621      	mov	r1, r4
   b7f00:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b7f02:	4c1f      	ldr	r4, [pc, #124]	; (b7f80 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b7f04:	f7fd fcce 	bl	b58a4 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b7f08:	6830      	ldr	r0, [r6, #0]
   b7f0a:	f7fd fd19 	bl	b5940 <os_mutex_recursive_lock>
        locked_ = true;
   b7f0e:	2301      	movs	r3, #1
   b7f10:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b7f14:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7f1a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b7f1c:	a803      	add	r0, sp, #12
   b7f1e:	f7fe f935 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
   b7f22:	e7bd      	b.n	b7ea0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b7f24:	a803      	add	r0, sp, #12
   b7f26:	f7fe f931 	bl	b618c <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b7f2a:	4b16      	ldr	r3, [pc, #88]	; (b7f84 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b7f2c:	9300      	str	r3, [sp, #0]
   b7f2e:	4913      	ldr	r1, [pc, #76]	; (b7f7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b7f30:	4623      	mov	r3, r4
   b7f32:	4632      	mov	r2, r6
   b7f34:	2001      	movs	r0, #1
   b7f36:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b7f3a:	f7fd ff11 	bl	b5d60 <log_message>
    if (automatic) {
   b7f3e:	f1b8 0f00 	cmp.w	r8, #0
   b7f42:	d0ad      	beq.n	b7ea0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b7f44:	4629      	mov	r1, r5
   b7f46:	4630      	mov	r0, r6
   b7f48:	f7ff ff5c 	bl	b7e04 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b7f4c:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b7f50:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b7f54:	42bd      	cmp	r5, r7
   b7f56:	d005      	beq.n	b7f64 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b7f58:	4628      	mov	r0, r5
   b7f5a:	2101      	movs	r1, #1
   b7f5c:	f7fe fb7e 	bl	b665c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b7f60:	3508      	adds	r5, #8
   b7f62:	e7f7      	b.n	b7f54 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b7f64:	4630      	mov	r0, r6
   b7f66:	f7fe fde9 	bl	b6b3c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7f6a:	e799      	b.n	b7ea0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b7f6c:	00180003 	.word	0x00180003
   b7f70:	000b7271 	.word	0x000b7271
   b7f74:	000ba898 	.word	0x000ba898
   b7f78:	2003e6c0 	.word	0x2003e6c0
   b7f7c:	000ba743 	.word	0x000ba743
   b7f80:	fffffefc 	.word	0xfffffefc
   b7f84:	000ba8b4 	.word	0x000ba8b4

000b7f88 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b7f88:	b513      	push	{r0, r1, r4, lr}
   b7f8a:	4604      	mov	r4, r0
   b7f8c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b7f90:	f7fe fbba 	bl	b6708 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b7f94:	9b00      	ldr	r3, [sp, #0]
   b7f96:	9901      	ldr	r1, [sp, #4]
   b7f98:	2200      	movs	r2, #0
   b7f9a:	4620      	mov	r0, r4
   b7f9c:	f7ff ff58 	bl	b7e50 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   b7fa0:	4620      	mov	r0, r4
   b7fa2:	b002      	add	sp, #8
   b7fa4:	bd10      	pop	{r4, pc}
	...

000b7fa8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b7fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b7fac:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b7fae:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b7fb0:	2600      	movs	r6, #0
   b7fb2:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b7fb6:	4b66      	ldr	r3, [pc, #408]	; (b8150 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b7fb8:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b7fba:	4605      	mov	r5, r0
   b7fbc:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b7fbe:	4633      	mov	r3, r6
   b7fc0:	4964      	ldr	r1, [pc, #400]	; (b8154 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b7fc2:	f8df 9194 	ldr.w	r9, [pc, #404]	; b8158 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b7fc6:	f8df 818c 	ldr.w	r8, [pc, #396]	; b8154 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b7fca:	f8df a190 	ldr.w	sl, [pc, #400]	; b815c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b7fce:	aa0c      	add	r2, sp, #48	; 0x30
   b7fd0:	2001      	movs	r0, #1
   b7fd2:	f7fd fec5 	bl	b5d60 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b7fd6:	682b      	ldr	r3, [r5, #0]
   b7fd8:	42b3      	cmp	r3, r6
   b7fda:	f240 80b5 	bls.w	b8148 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b7fde:	a803      	add	r0, sp, #12
   b7fe0:	f7fe fb16 	bl	b6610 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b7fe4:	a805      	add	r0, sp, #20
   b7fe6:	f7fe fb73 	bl	b66d0 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b7fea:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b7fee:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b7ff0:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b7ff2:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b7ff6:	445b      	add	r3, fp
        this->size = halHandles.size;
   b7ff8:	8bd9      	ldrh	r1, [r3, #30]
   b7ffa:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b7ffc:	8c19      	ldrh	r1, [r3, #32]
   b7ffe:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b8000:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b8002:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b8004:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b8006:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b8008:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b800a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b800e:	8253      	strh	r3, [r2, #18]
   b8010:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b8014:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b8018:	429a      	cmp	r2, r3
   b801a:	d07d      	beq.n	b8118 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b801c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b801e:	8ac4      	ldrh	r4, [r0, #22]
   b8020:	428c      	cmp	r4, r1
   b8022:	d377      	bcc.n	b8114 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b8024:	8a84      	ldrh	r4, [r0, #20]
   b8026:	428c      	cmp	r4, r1
   b8028:	d874      	bhi.n	b8114 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b802a:	6859      	ldr	r1, [r3, #4]
   b802c:	9005      	str	r0, [sp, #20]
   b802e:	a806      	add	r0, sp, #24
   b8030:	f7fe f878 	bl	b6124 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b8034:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b8038:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b803c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b8040:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b8044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8046:	f8dc 3000 	ldr.w	r3, [ip]
   b804a:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b804c:	892b      	ldrh	r3, [r5, #8]
   b804e:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b8052:	686b      	ldr	r3, [r5, #4]
   b8054:	9c03      	ldr	r4, [sp, #12]
   b8056:	445b      	add	r3, fp
   b8058:	7e5b      	ldrb	r3, [r3, #25]
   b805a:	f013 0f02 	tst.w	r3, #2
   b805e:	d16e      	bne.n	b813e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b8060:	686b      	ldr	r3, [r5, #4]
   b8062:	445b      	add	r3, fp
   b8064:	7e5b      	ldrb	r3, [r3, #25]
   b8066:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b8068:	bf42      	ittt	mi
   b806a:	7923      	ldrbmi	r3, [r4, #4]
   b806c:	f043 0304 	orrmi.w	r3, r3, #4
   b8070:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b8072:	686b      	ldr	r3, [r5, #4]
   b8074:	445b      	add	r3, fp
   b8076:	7e5b      	ldrb	r3, [r3, #25]
   b8078:	0719      	lsls	r1, r3, #28
   b807a:	bf42      	ittt	mi
   b807c:	7923      	ldrbmi	r3, [r4, #4]
   b807e:	f043 0308 	orrmi.w	r3, r3, #8
   b8082:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b8084:	686b      	ldr	r3, [r5, #4]
   b8086:	445b      	add	r3, fp
   b8088:	7e5b      	ldrb	r3, [r3, #25]
   b808a:	06da      	lsls	r2, r3, #27
   b808c:	bf42      	ittt	mi
   b808e:	7923      	ldrbmi	r3, [r4, #4]
   b8090:	f043 0310 	orrmi.w	r3, r3, #16
   b8094:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b8096:	686b      	ldr	r3, [r5, #4]
   b8098:	445b      	add	r3, fp
   b809a:	aa07      	add	r2, sp, #28
   b809c:	7e5b      	ldrb	r3, [r3, #25]
   b809e:	069b      	lsls	r3, r3, #26
   b80a0:	bf42      	ittt	mi
   b80a2:	7923      	ldrbmi	r3, [r4, #4]
   b80a4:	f043 0320 	orrmi.w	r3, r3, #32
   b80a8:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b80aa:	686b      	ldr	r3, [r5, #4]
   b80ac:	449b      	add	fp, r3
   b80ae:	f10b 0304 	add.w	r3, fp, #4
   b80b2:	4696      	mov	lr, r2
   b80b4:	f10b 0b14 	add.w	fp, fp, #20
   b80b8:	6818      	ldr	r0, [r3, #0]
   b80ba:	6859      	ldr	r1, [r3, #4]
   b80bc:	4694      	mov	ip, r2
   b80be:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b80c2:	3308      	adds	r3, #8
   b80c4:	455b      	cmp	r3, fp
   b80c6:	4662      	mov	r2, ip
   b80c8:	d1f6      	bne.n	b80b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b80ca:	6818      	ldr	r0, [r3, #0]
   b80cc:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b80d0:	4671      	mov	r1, lr
   b80d2:	a80c      	add	r0, sp, #48	; 0x30
   b80d4:	f7fe f8a2 	bl	b621c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b80d8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b80dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b80e0:	3414      	adds	r4, #20
   b80e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b80e4:	f8dc 3000 	ldr.w	r3, [ip]
   b80e8:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b80ea:	a903      	add	r1, sp, #12
   b80ec:	a80c      	add	r0, sp, #48	; 0x30
   b80ee:	f7fe fce2 	bl	b6ab6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b80f2:	a90c      	add	r1, sp, #48	; 0x30
   b80f4:	f107 0018 	add.w	r0, r7, #24
   b80f8:	f7ff fdb1 	bl	b7c5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b80fc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b80fe:	a80d      	add	r0, sp, #52	; 0x34
   b8100:	f7fe fcfb 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8104:	b99c      	cbnz	r4, b812e <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8106:	2320      	movs	r3, #32
   b8108:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b810c:	f8cd a000 	str.w	sl, [sp]
   b8110:	4623      	mov	r3, r4
   b8112:	e007      	b.n	b8124 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b8114:	3308      	adds	r3, #8
   b8116:	e77f      	b.n	b8018 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b8118:	2420      	movs	r4, #32
   b811a:	2300      	movs	r3, #0
   b811c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b8120:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b8124:	aa0c      	add	r2, sp, #48	; 0x30
   b8126:	4641      	mov	r1, r8
   b8128:	2032      	movs	r0, #50	; 0x32
   b812a:	f7fd fe19 	bl	b5d60 <log_message>
   b812e:	a806      	add	r0, sp, #24
   b8130:	f7fe fce3 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8134:	a804      	add	r0, sp, #16
   b8136:	f7fe fce0 	bl	b6afa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b813a:	3601      	adds	r6, #1
   b813c:	e74b      	b.n	b7fd6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b813e:	7923      	ldrb	r3, [r4, #4]
   b8140:	f043 0302 	orr.w	r3, r3, #2
   b8144:	7123      	strb	r3, [r4, #4]
   b8146:	e78b      	b.n	b8060 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b8148:	b015      	add	sp, #84	; 0x54
   b814a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b814e:	bf00      	nop
   b8150:	000ba8d1 	.word	0x000ba8d1
   b8154:	000ba743 	.word	0x000ba743
   b8158:	000ba8ec 	.word	0x000ba8ec
   b815c:	000ba91b 	.word	0x000ba91b

000b8160 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8160:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8164:	4604      	mov	r4, r0
   b8166:	460d      	mov	r5, r1
   b8168:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b816a:	d914      	bls.n	b8196 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b816c:	4290      	cmp	r0, r2
   b816e:	d213      	bcs.n	b8198 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8170:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b8174:	1a75      	subs	r5, r6, r1
   b8176:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b817a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b817c:	42b7      	cmp	r7, r6
   b817e:	d018      	beq.n	b81b2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8180:	b11c      	cbz	r4, b818a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b8182:	4631      	mov	r1, r6
   b8184:	4620      	mov	r0, r4
   b8186:	f7fe feff 	bl	b6f88 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b818a:	4630      	mov	r0, r6
   b818c:	f7fe fbd6 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b8190:	3e24      	subs	r6, #36	; 0x24
   b8192:	3c24      	subs	r4, #36	; 0x24
   b8194:	e7f2      	b.n	b817c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b8196:	d00c      	beq.n	b81b2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b8198:	42b5      	cmp	r5, r6
   b819a:	d00a      	beq.n	b81b2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b819c:	b11c      	cbz	r4, b81a6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b819e:	4629      	mov	r1, r5
   b81a0:	4620      	mov	r0, r4
   b81a2:	f7fe fef1 	bl	b6f88 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b81a6:	4628      	mov	r0, r5
   b81a8:	f7fe fbc8 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b81ac:	3524      	adds	r5, #36	; 0x24
   b81ae:	3424      	adds	r4, #36	; 0x24
   b81b0:	e7f2      	b.n	b8198 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b81b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b81b4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b81b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b81b6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b81b8:	4605      	mov	r5, r0
        if (n > 0) {
   b81ba:	dd13      	ble.n	b81e4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b81bc:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b81be:	fb07 f006 	mul.w	r0, r7, r6
   b81c2:	f7fd fe69 	bl	b5e98 <malloc>
            if (!d) {
   b81c6:	4604      	mov	r4, r0
   b81c8:	b158      	cbz	r0, b81e2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b81ca:	e9d5 1200 	ldrd	r1, r2, [r5]
   b81ce:	fb07 1202 	mla	r2, r7, r2, r1
   b81d2:	f7ff ffc5 	bl	b8160 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b81d6:	6828      	ldr	r0, [r5, #0]
   b81d8:	f7fd fe66 	bl	b5ea8 <free>
        data_ = d;
   b81dc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b81de:	60ae      	str	r6, [r5, #8]
        return true;
   b81e0:	2001      	movs	r0, #1
    }
   b81e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b81e4:	2400      	movs	r4, #0
   b81e6:	e7f6      	b.n	b81d6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b81e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b81e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81ec:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b81ee:	ad01      	add	r5, sp, #4
   b81f0:	4606      	mov	r6, r0
   b81f2:	4628      	mov	r0, r5
   b81f4:	460c      	mov	r4, r1
   b81f6:	f7fd fff6 	bl	b61e6 <_ZN8particle10BleAddressC1Ev>
   b81fa:	a803      	add	r0, sp, #12
   b81fc:	f7fe ff9f 	bl	b713e <_ZN8particle18BleAdvertisingDataC1Ev>
   b8200:	a806      	add	r0, sp, #24
   b8202:	f7fe ff9c 	bl	b713e <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b8206:	6930      	ldr	r0, [r6, #16]
   b8208:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b820a:	89f2      	ldrh	r2, [r6, #14]
   b820c:	ab13      	add	r3, sp, #76	; 0x4c
   b820e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b8210:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b8214:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b8216:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b8218:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b821c:	a806      	add	r0, sp, #24
   b821e:	f7fe ff02 	bl	b7026 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b8222:	89b2      	ldrh	r2, [r6, #12]
   b8224:	6871      	ldr	r1, [r6, #4]
   b8226:	a803      	add	r0, sp, #12
   b8228:	f7fe fefd 	bl	b7026 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b822c:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8230:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b8232:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b8234:	d003      	beq.n	b823e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b8236:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b823a:	429a      	cmp	r2, r3
   b823c:	db5c      	blt.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b823e:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b8242:	2b7f      	cmp	r3, #127	; 0x7f
   b8244:	d003      	beq.n	b824e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b8246:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b824a:	429a      	cmp	r2, r3
   b824c:	dc54      	bgt.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b824e:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b8252:	4638      	mov	r0, r7
   b8254:	f7fe fd60 	bl	b6d18 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b8258:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b825a:	2b00      	cmp	r3, #0
   b825c:	dd52      	ble.n	b8304 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b825e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b8260:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b8264:	45b1      	cmp	r9, r6
   b8266:	d050      	beq.n	b830a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b8268:	4630      	mov	r0, r6
   b826a:	4629      	mov	r1, r5
   b826c:	f7fd ffa7 	bl	b61be <_ZNK8particle10BleAddresseqERKS0_>
   b8270:	3608      	adds	r6, #8
   b8272:	4680      	mov	r8, r0
   b8274:	2800      	cmp	r0, #0
   b8276:	d0f5      	beq.n	b8264 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b8278:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b827a:	f7fd fe15 	bl	b5ea8 <free>
        if (!delegator->filterByRssi(result) ||
   b827e:	f1b8 0f00 	cmp.w	r8, #0
   b8282:	d039      	beq.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b8284:	4629      	mov	r1, r5
   b8286:	4620      	mov	r0, r4
   b8288:	f7fe fd09 	bl	b6c9e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b828c:	b3a0      	cbz	r0, b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b828e:	4629      	mov	r1, r5
   b8290:	4620      	mov	r0, r4
   b8292:	f7ff fa68 	bl	b7766 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b8296:	4606      	mov	r6, r0
   b8298:	b370      	cbz	r0, b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b829a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b829e:	4638      	mov	r0, r7
   b82a0:	f7fe fd85 	bl	b6dae <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b82a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b82a6:	2b00      	cmp	r3, #0
   b82a8:	dd12      	ble.n	b82d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b82aa:	a806      	add	r0, sp, #24
   b82ac:	f7fe f95e 	bl	b656c <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b82b0:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b82b2:	a803      	add	r0, sp, #12
   b82b4:	f7fe f95a 	bl	b656c <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b82b8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b82bc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b82c0:	429a      	cmp	r2, r3
   b82c2:	d025      	beq.n	b8310 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b82c4:	f833 1b02 	ldrh.w	r1, [r3], #2
   b82c8:	4588      	cmp	r8, r1
   b82ca:	d001      	beq.n	b82d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b82cc:	4288      	cmp	r0, r1
   b82ce:	d1f7      	bne.n	b82c0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b82d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b82d2:	f7fd fde9 	bl	b5ea8 <free>
              !delegator->filterByServiceUUID(result) ||
   b82d6:	b17e      	cbz	r6, b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b82d8:	4629      	mov	r1, r5
   b82da:	4620      	mov	r0, r4
   b82dc:	f7fe fd9c 	bl	b6e18 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b82e0:	b150      	cbz	r0, b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b82e2:	6a23      	ldr	r3, [r4, #32]
   b82e4:	b1b3      	cbz	r3, b8314 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b82e6:	6963      	ldr	r3, [r4, #20]
   b82e8:	9513      	str	r5, [sp, #76]	; 0x4c
   b82ea:	3301      	adds	r3, #1
   b82ec:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b82ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b82f0:	4639      	mov	r1, r7
   b82f2:	f104 0018 	add.w	r0, r4, #24
   b82f6:	4798      	blx	r3
            return;
   b82f8:	4628      	mov	r0, r5
   b82fa:	f7fe fb1f 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
    }
   b82fe:	b01d      	add	sp, #116	; 0x74
   b8300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b8304:	f04f 0801 	mov.w	r8, #1
   b8308:	e7b6      	b.n	b8278 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b830a:	f04f 0800 	mov.w	r8, #0
   b830e:	e7b3      	b.n	b8278 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b8310:	2600      	movs	r6, #0
   b8312:	e7dd      	b.n	b82d0 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b8314:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b8318:	f1b8 0f00 	cmp.w	r8, #0
   b831c:	d007      	beq.n	b832e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b831e:	6963      	ldr	r3, [r4, #20]
   b8320:	3301      	adds	r3, #1
   b8322:	6163      	str	r3, [r4, #20]
   b8324:	4629      	mov	r1, r5
   b8326:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b8328:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b832c:	e7e3      	b.n	b82f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b832e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b8332:	f1bc 0f00 	cmp.w	ip, #0
   b8336:	d025      	beq.n	b8384 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b8338:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b833a:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b833c:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b833e:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b8340:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b8342:	d8d9      	bhi.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b8344:	2224      	movs	r2, #36	; 0x24
   b8346:	4353      	muls	r3, r2
    address_ = addr.address_;
   b8348:	462a      	mov	r2, r5
   b834a:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b834c:	3b24      	subs	r3, #36	; 0x24
   b834e:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b8352:	f84c 0003 	str.w	r0, [ip, r3]
   b8356:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b8358:	f106 0008 	add.w	r0, r6, #8
   b835c:	a903      	add	r1, sp, #12
   b835e:	f7fe fe2a 	bl	b6fb6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b8362:	a906      	add	r1, sp, #24
   b8364:	f106 0014 	add.w	r0, r6, #20
   b8368:	f7fe fe25 	bl	b6fb6 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b836c:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b8370:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b8374:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b8378:	429a      	cmp	r2, r3
   b837a:	d3bd      	bcc.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b837c:	4640      	mov	r0, r8
   b837e:	f7fd fa87 	bl	b5890 <hal_ble_gap_stop_scan>
   b8382:	e7b9      	b.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b8384:	e895 0003 	ldmia.w	r5, {r0, r1}
   b8388:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b838c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b8390:	a903      	add	r1, sp, #12
   b8392:	a80c      	add	r0, sp, #48	; 0x30
   b8394:	f7fe fddb 	bl	b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b8398:	a906      	add	r1, sp, #24
   b839a:	a80f      	add	r0, sp, #60	; 0x3c
   b839c:	f7fe fdd7 	bl	b6f4e <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b83a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b83a4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b83a8:	4641      	mov	r1, r8
   b83aa:	4638      	mov	r0, r7
   b83ac:	6866      	ldr	r6, [r4, #4]
   b83ae:	f7fe fdeb 	bl	b6f88 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83b2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b83b6:	4299      	cmp	r1, r3
   b83b8:	da10      	bge.n	b83dc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b83ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b83bc:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b83be:	2224      	movs	r2, #36	; 0x24
   b83c0:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b83c4:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b83c8:	fb02 3201 	mla	r2, r2, r1, r3
   b83cc:	4631      	mov	r1, r6
   b83ce:	f7ff fec7 	bl	b8160 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b83d2:	b986      	cbnz	r6, b83f6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b83d4:	6863      	ldr	r3, [r4, #4]
   b83d6:	3301      	adds	r3, #1
   b83d8:	6063      	str	r3, [r4, #4]
    return true;
   b83da:	e005      	b.n	b83e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b83dc:	3101      	adds	r1, #1
   b83de:	4620      	mov	r0, r4
   b83e0:	f7ff fee8 	bl	b81b4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b83e4:	2800      	cmp	r0, #0
   b83e6:	d1e8      	bne.n	b83ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b83e8:	4638      	mov	r0, r7
   b83ea:	f7fe faa7 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b83ee:	4640      	mov	r0, r8
   b83f0:	f7fe faa4 	bl	b693c <_ZN8particle13BleScanResultD1Ev>
   b83f4:	e780      	b.n	b82f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b83f6:	4639      	mov	r1, r7
   b83f8:	4630      	mov	r0, r6
   b83fa:	f7fe fdc5 	bl	b6f88 <_ZN8particle13BleScanResultC1EOS0_>
   b83fe:	e7e9      	b.n	b83d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b8400 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b8400:	4802      	ldr	r0, [pc, #8]	; (b840c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b8402:	2300      	movs	r3, #0
   b8404:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b8406:	f7fd ba93 	b.w	b5930 <os_mutex_recursive_create>
   b840a:	bf00      	nop
   b840c:	2003e6c0 	.word	0x2003e6c0

000b8410 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8410:	2200      	movs	r2, #0
   b8412:	6840      	ldr	r0, [r0, #4]
   b8414:	4611      	mov	r1, r2
   b8416:	f7fd bd17 	b.w	b5e48 <network_listening>

000b841a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b841a:	2200      	movs	r2, #0
   b841c:	6840      	ldr	r0, [r0, #4]
   b841e:	4611      	mov	r1, r2
   b8420:	f7fd bd22 	b.w	b5e68 <network_get_listen_timeout>

000b8424 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8424:	6840      	ldr	r0, [r0, #4]
   b8426:	2200      	movs	r2, #0
   b8428:	f7fd bd16 	b.w	b5e58 <network_set_listen_timeout>

000b842c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b842c:	6840      	ldr	r0, [r0, #4]
   b842e:	2200      	movs	r2, #0
   b8430:	f081 0101 	eor.w	r1, r1, #1
   b8434:	f7fd bd00 	b.w	b5e38 <network_listen>

000b8438 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8438:	2300      	movs	r3, #0
   b843a:	6840      	ldr	r0, [r0, #4]
   b843c:	461a      	mov	r2, r3
   b843e:	4619      	mov	r1, r3
   b8440:	f7fd bcf2 	b.w	b5e28 <network_off>

000b8444 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8444:	2300      	movs	r3, #0
   b8446:	6840      	ldr	r0, [r0, #4]
   b8448:	461a      	mov	r2, r3
   b844a:	4619      	mov	r1, r3
   b844c:	f7fd bce4 	b.w	b5e18 <network_on>

000b8450 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b8450:	2200      	movs	r2, #0
   b8452:	6840      	ldr	r0, [r0, #4]
   b8454:	4611      	mov	r1, r2
   b8456:	f7fd bcd7 	b.w	b5e08 <network_ready>

000b845a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b845a:	2200      	movs	r2, #0
   b845c:	6840      	ldr	r0, [r0, #4]
   b845e:	4611      	mov	r1, r2
   b8460:	f7fd bcc2 	b.w	b5de8 <network_connecting>

000b8464 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8464:	6840      	ldr	r0, [r0, #4]
   b8466:	2200      	movs	r2, #0
   b8468:	2102      	movs	r1, #2
   b846a:	f7fd bcc5 	b.w	b5df8 <network_disconnect>

000b846e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b846e:	2300      	movs	r3, #0
   b8470:	6840      	ldr	r0, [r0, #4]
   b8472:	461a      	mov	r2, r3
   b8474:	f7fd bcb0 	b.w	b5dd8 <network_connect>

000b8478 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b8478:	4b02      	ldr	r3, [pc, #8]	; (b8484 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b847a:	2203      	movs	r2, #3
   b847c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b847e:	4a02      	ldr	r2, [pc, #8]	; (b8488 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b8480:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b8482:	4770      	bx	lr
   b8484:	2003e6c8 	.word	0x2003e6c8
   b8488:	000ba9c4 	.word	0x000ba9c4

000b848c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b848c:	4770      	bx	lr

000b848e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b848e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8490:	4606      	mov	r6, r0
   b8492:	4615      	mov	r5, r2
   b8494:	460c      	mov	r4, r1
   b8496:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b8498:	42bc      	cmp	r4, r7
   b849a:	d006      	beq.n	b84aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b849c:	6833      	ldr	r3, [r6, #0]
   b849e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b84a2:	689b      	ldr	r3, [r3, #8]
   b84a4:	4630      	mov	r0, r6
   b84a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b84a8:	e7f6      	b.n	b8498 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b84aa:	4628      	mov	r0, r5
   b84ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b84ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b84ae:	7c00      	ldrb	r0, [r0, #16]
   b84b0:	2200      	movs	r2, #0
   b84b2:	f7fd bac5 	b.w	b5a40 <hal_i2c_write>

000b84b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b84b6:	7c00      	ldrb	r0, [r0, #16]
   b84b8:	2100      	movs	r1, #0
   b84ba:	f7fd bac9 	b.w	b5a50 <hal_i2c_available>

000b84be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b84be:	7c00      	ldrb	r0, [r0, #16]
   b84c0:	2100      	movs	r1, #0
   b84c2:	f7fd bacd 	b.w	b5a60 <hal_i2c_read>

000b84c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b84c6:	7c00      	ldrb	r0, [r0, #16]
   b84c8:	2100      	movs	r1, #0
   b84ca:	f7fd bad1 	b.w	b5a70 <hal_i2c_peek>

000b84ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b84ce:	7c00      	ldrb	r0, [r0, #16]
   b84d0:	2100      	movs	r1, #0
   b84d2:	f7fd bad5 	b.w	b5a80 <hal_i2c_flush>

000b84d6 <_ZN7TwoWireD0Ev>:
   b84d6:	b510      	push	{r4, lr}
   b84d8:	2114      	movs	r1, #20
   b84da:	4604      	mov	r4, r0
   b84dc:	f7fb fddd 	bl	b409a <_ZdlPvj>
   b84e0:	4620      	mov	r0, r4
   b84e2:	bd10      	pop	{r4, pc}

000b84e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b84e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b84e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b84ea:	4604      	mov	r4, r0
   b84ec:	4608      	mov	r0, r1
   b84ee:	2100      	movs	r1, #0
   b84f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b84f4:	4b03      	ldr	r3, [pc, #12]	; (b8504 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b84f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b84f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b84fa:	4611      	mov	r1, r2
   b84fc:	f7fd fad0 	bl	b5aa0 <hal_i2c_init>
}
   b8500:	4620      	mov	r0, r4
   b8502:	bd10      	pop	{r4, pc}
   b8504:	000baa00 	.word	0x000baa00

000b8508 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b8508:	2300      	movs	r3, #0
   b850a:	7c00      	ldrb	r0, [r0, #16]
   b850c:	461a      	mov	r2, r3
   b850e:	4619      	mov	r1, r3
   b8510:	f7fd ba7e 	b.w	b5a10 <hal_i2c_begin>

000b8514 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b8514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b8516:	2200      	movs	r2, #0
   b8518:	2314      	movs	r3, #20
   b851a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b851e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b8522:	780b      	ldrb	r3, [r1, #0]
   b8524:	f88d 3008 	strb.w	r3, [sp, #8]
   b8528:	684b      	ldr	r3, [r1, #4]
   b852a:	9303      	str	r3, [sp, #12]
   b852c:	68cb      	ldr	r3, [r1, #12]
   b852e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b8530:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b8532:	7a0b      	ldrb	r3, [r1, #8]
   b8534:	9305      	str	r3, [sp, #20]
   b8536:	a901      	add	r1, sp, #4
   b8538:	f7fd faba 	bl	b5ab0 <hal_i2c_request_ex>
}
   b853c:	b007      	add	sp, #28
   b853e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8542 <_ZN7TwoWire11requestFromEhjh>:
{
   b8542:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b8544:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b8546:	f88d 1000 	strb.w	r1, [sp]
   b854a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b854e:	9103      	str	r1, [sp, #12]
   b8550:	bf18      	it	ne
   b8552:	2301      	movne	r3, #1
   b8554:	4669      	mov	r1, sp
    size_ = size;
   b8556:	9201      	str	r2, [sp, #4]
   b8558:	f88d 3008 	strb.w	r3, [sp, #8]
   b855c:	f7ff ffda 	bl	b8514 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b8560:	b005      	add	sp, #20
   b8562:	f85d fb04 	ldr.w	pc, [sp], #4

000b8566 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b8566:	2301      	movs	r3, #1
   b8568:	f7ff bfeb 	b.w	b8542 <_ZN7TwoWire11requestFromEhjh>

000b856c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b856c:	7c00      	ldrb	r0, [r0, #16]
   b856e:	2200      	movs	r2, #0
   b8570:	f7fd ba56 	b.w	b5a20 <hal_i2c_begin_transmission>

000b8574 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b8574:	7c00      	ldrb	r0, [r0, #16]
   b8576:	2200      	movs	r2, #0
   b8578:	f7fd ba5a 	b.w	b5a30 <hal_i2c_end_transmission>

000b857c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b857c:	2101      	movs	r1, #1
   b857e:	f7ff bff9 	b.w	b8574 <_ZN7TwoWire15endTransmissionEh>

000b8582 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8582:	4770      	bx	lr

000b8584 <_ZN9IPAddressD0Ev>:
   b8584:	b510      	push	{r4, lr}
   b8586:	2118      	movs	r1, #24
   b8588:	4604      	mov	r4, r0
   b858a:	f7fb fd86 	bl	b409a <_ZdlPvj>
   b858e:	4620      	mov	r0, r4
   b8590:	bd10      	pop	{r4, pc}

000b8592 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8592:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8594:	7d03      	ldrb	r3, [r0, #20]
   b8596:	2b06      	cmp	r3, #6
{
   b8598:	b08d      	sub	sp, #52	; 0x34
   b859a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b859c:	f100 0704 	add.w	r7, r0, #4
   b85a0:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b85a4:	d012      	beq.n	b85cc <_ZNK9IPAddress7printToER5Print+0x3a>
   b85a6:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b85aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b85ae:	220a      	movs	r2, #10
   b85b0:	4630      	mov	r0, r6
   b85b2:	f000 f980 	bl	b88b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b85b6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b85b8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b85ba:	d019      	beq.n	b85f0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b85bc:	2c00      	cmp	r4, #0
   b85be:	d0f4      	beq.n	b85aa <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b85c0:	212e      	movs	r1, #46	; 0x2e
   b85c2:	4630      	mov	r0, r6
   b85c4:	f000 f95e 	bl	b8884 <_ZN5Print5printEc>
   b85c8:	4404      	add	r4, r0
   b85ca:	e7ee      	b.n	b85aa <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b85cc:	232f      	movs	r3, #47	; 0x2f
   b85ce:	466a      	mov	r2, sp
   b85d0:	4639      	mov	r1, r7
   b85d2:	200a      	movs	r0, #10
		buf[0] = 0;
   b85d4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b85d8:	f7fd fa7a 	bl	b5ad0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b85dc:	4668      	mov	r0, sp
   b85de:	f001 fbb7 	bl	b9d50 <strlen>
   b85e2:	6833      	ldr	r3, [r6, #0]
   b85e4:	4602      	mov	r2, r0
   b85e6:	68db      	ldr	r3, [r3, #12]
   b85e8:	4669      	mov	r1, sp
   b85ea:	4630      	mov	r0, r6
   b85ec:	4798      	blx	r3
   b85ee:	4604      	mov	r4, r0
    }
    return n;
}
   b85f0:	4620      	mov	r0, r4
   b85f2:	b00d      	add	sp, #52	; 0x34
   b85f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b85f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b85f8:	b510      	push	{r4, lr}
   b85fa:	4b05      	ldr	r3, [pc, #20]	; (b8610 <_ZN9IPAddressC1Ev+0x18>)
   b85fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b85fe:	2211      	movs	r2, #17
   b8600:	f840 3b04 	str.w	r3, [r0], #4
   b8604:	2100      	movs	r1, #0
   b8606:	f001 fb5b 	bl	b9cc0 <memset>
}
   b860a:	4620      	mov	r0, r4
   b860c:	bd10      	pop	{r4, pc}
   b860e:	bf00      	nop
   b8610:	000baa28 	.word	0x000baa28

000b8614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8614:	4603      	mov	r3, r0
   b8616:	4a07      	ldr	r2, [pc, #28]	; (b8634 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8618:	b510      	push	{r4, lr}
   b861a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b861e:	f101 0210 	add.w	r2, r1, #16
   b8622:	f851 4b04 	ldr.w	r4, [r1], #4
   b8626:	f843 4b04 	str.w	r4, [r3], #4
   b862a:	4291      	cmp	r1, r2
   b862c:	d1f9      	bne.n	b8622 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b862e:	780a      	ldrb	r2, [r1, #0]
   b8630:	701a      	strb	r2, [r3, #0]
}
   b8632:	bd10      	pop	{r4, pc}
   b8634:	000baa28 	.word	0x000baa28

000b8638 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b8638:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b863a:	2b04      	cmp	r3, #4
   b863c:	d104      	bne.n	b8648 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b863e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8640:	3800      	subs	r0, #0
   b8642:	bf18      	it	ne
   b8644:	2001      	movne	r0, #1
   b8646:	4770      	bx	lr
    } else if (version() == 6) {
   b8648:	2b06      	cmp	r3, #6
   b864a:	d107      	bne.n	b865c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b864c:	6843      	ldr	r3, [r0, #4]
   b864e:	b93b      	cbnz	r3, b8660 <_ZNK9IPAddresscvbEv+0x28>
   b8650:	6883      	ldr	r3, [r0, #8]
   b8652:	b92b      	cbnz	r3, b8660 <_ZNK9IPAddresscvbEv+0x28>
   b8654:	68c3      	ldr	r3, [r0, #12]
   b8656:	b91b      	cbnz	r3, b8660 <_ZNK9IPAddresscvbEv+0x28>
   b8658:	6900      	ldr	r0, [r0, #16]
   b865a:	e7f1      	b.n	b8640 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b865c:	2000      	movs	r0, #0
   b865e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b8660:	2001      	movs	r0, #1
}
   b8662:	4770      	bx	lr

000b8664 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b8664:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b8666:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b866a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b866e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b8672:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b8676:	2304      	movs	r3, #4
   b8678:	6041      	str	r1, [r0, #4]
   b867a:	7503      	strb	r3, [r0, #20]
}
   b867c:	bd10      	pop	{r4, pc}
	...

000b8680 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b8680:	b513      	push	{r0, r1, r4, lr}
   b8682:	4c04      	ldr	r4, [pc, #16]	; (b8694 <_ZN9IPAddressC1Ehhhh+0x14>)
   b8684:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b8686:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b868a:	9400      	str	r4, [sp, #0]
   b868c:	f7ff ffea 	bl	b8664 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8690:	b002      	add	sp, #8
   b8692:	bd10      	pop	{r4, pc}
   b8694:	000baa28 	.word	0x000baa28

000b8698 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8698:	b507      	push	{r0, r1, r2, lr}
   b869a:	4b06      	ldr	r3, [pc, #24]	; (b86b4 <_ZN9IPAddressC1EPKh+0x1c>)
   b869c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b869e:	78cb      	ldrb	r3, [r1, #3]
   b86a0:	9300      	str	r3, [sp, #0]
   b86a2:	788b      	ldrb	r3, [r1, #2]
   b86a4:	784a      	ldrb	r2, [r1, #1]
   b86a6:	7809      	ldrb	r1, [r1, #0]
   b86a8:	f7ff ffdc 	bl	b8664 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b86ac:	b003      	add	sp, #12
   b86ae:	f85d fb04 	ldr.w	pc, [sp], #4
   b86b2:	bf00      	nop
   b86b4:	000baa28 	.word	0x000baa28

000b86b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b86b8:	4b01      	ldr	r3, [pc, #4]	; (b86c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b86ba:	4a02      	ldr	r2, [pc, #8]	; (b86c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b86bc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b86be:	4770      	bx	lr
   b86c0:	2003e6d0 	.word	0x2003e6d0
   b86c4:	000baa34 	.word	0x000baa34

000b86c8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b86c8:	2300      	movs	r3, #0
   b86ca:	6840      	ldr	r0, [r0, #4]
   b86cc:	461a      	mov	r2, r3
   b86ce:	f7fd bb83 	b.w	b5dd8 <network_connect>

000b86d2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b86d2:	6840      	ldr	r0, [r0, #4]
   b86d4:	2200      	movs	r2, #0
   b86d6:	2102      	movs	r1, #2
   b86d8:	f7fd bb8e 	b.w	b5df8 <network_disconnect>

000b86dc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b86dc:	2200      	movs	r2, #0
   b86de:	6840      	ldr	r0, [r0, #4]
   b86e0:	4611      	mov	r1, r2
   b86e2:	f7fd bb81 	b.w	b5de8 <network_connecting>

000b86e6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b86e6:	2200      	movs	r2, #0
   b86e8:	6840      	ldr	r0, [r0, #4]
   b86ea:	4611      	mov	r1, r2
   b86ec:	f7fd bb8c 	b.w	b5e08 <network_ready>

000b86f0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b86f0:	2300      	movs	r3, #0
   b86f2:	6840      	ldr	r0, [r0, #4]
   b86f4:	461a      	mov	r2, r3
   b86f6:	4619      	mov	r1, r3
   b86f8:	f7fd bb8e 	b.w	b5e18 <network_on>

000b86fc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b86fc:	2300      	movs	r3, #0
   b86fe:	6840      	ldr	r0, [r0, #4]
   b8700:	461a      	mov	r2, r3
   b8702:	4619      	mov	r1, r3
   b8704:	f7fd bb90 	b.w	b5e28 <network_off>

000b8708 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8708:	6840      	ldr	r0, [r0, #4]
   b870a:	2100      	movs	r1, #0
   b870c:	f7fd bbb4 	b.w	b5e78 <network_is_on>

000b8710 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b8710:	6840      	ldr	r0, [r0, #4]
   b8712:	2100      	movs	r1, #0
   b8714:	f7fd bbb8 	b.w	b5e88 <network_is_off>

000b8718 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8718:	6840      	ldr	r0, [r0, #4]
   b871a:	2200      	movs	r2, #0
   b871c:	f081 0101 	eor.w	r1, r1, #1
   b8720:	f7fd bb8a 	b.w	b5e38 <network_listen>

000b8724 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b8724:	6840      	ldr	r0, [r0, #4]
   b8726:	2200      	movs	r2, #0
   b8728:	f7fd bb96 	b.w	b5e58 <network_set_listen_timeout>

000b872c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b872c:	2200      	movs	r2, #0
   b872e:	6840      	ldr	r0, [r0, #4]
   b8730:	4611      	mov	r1, r2
   b8732:	f7fd bb99 	b.w	b5e68 <network_get_listen_timeout>

000b8736 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b8736:	2200      	movs	r2, #0
   b8738:	6840      	ldr	r0, [r0, #4]
   b873a:	4611      	mov	r1, r2
   b873c:	f7fd bb84 	b.w	b5e48 <network_listening>

000b8740 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b8740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8744:	b095      	sub	sp, #84	; 0x54
   b8746:	4614      	mov	r4, r2
   b8748:	460d      	mov	r5, r1
   b874a:	4607      	mov	r7, r0
    IPAddress addr;
   b874c:	f7ff ff54 	bl	b85f8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b8750:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b8752:	221c      	movs	r2, #28
   b8754:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b8756:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b8758:	f001 fab2 	bl	b9cc0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b875c:	2340      	movs	r3, #64	; 0x40
   b875e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b8760:	4620      	mov	r0, r4
   b8762:	466b      	mov	r3, sp
   b8764:	aa0c      	add	r2, sp, #48	; 0x30
   b8766:	2100      	movs	r1, #0
   b8768:	f7fd f9d2 	bl	b5b10 <netdb_getaddrinfo>
    if (!r) {
   b876c:	4604      	mov	r4, r0
   b876e:	2800      	cmp	r0, #0
   b8770:	d14b      	bne.n	b880a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b8772:	4602      	mov	r2, r0
   b8774:	2101      	movs	r1, #1
   b8776:	6868      	ldr	r0, [r5, #4]
   b8778:	f7fd fb46 	bl	b5e08 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b877c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b877e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8780:	4622      	mov	r2, r4
   b8782:	6868      	ldr	r0, [r5, #4]
   b8784:	f7fd fb40 	bl	b5e08 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8788:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b878a:	4681      	mov	r9, r0
        bool ok = false;
   b878c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b878e:	2e00      	cmp	r6, #0
   b8790:	d03b      	beq.n	b880a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b8792:	2900      	cmp	r1, #0
   b8794:	d139      	bne.n	b880a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8796:	6873      	ldr	r3, [r6, #4]
   b8798:	2b02      	cmp	r3, #2
   b879a:	d003      	beq.n	b87a4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b879c:	2b0a      	cmp	r3, #10
   b879e:	d011      	beq.n	b87c4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b87a0:	69f6      	ldr	r6, [r6, #28]
   b87a2:	e7f4      	b.n	b878e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b87a4:	f1b8 0f00 	cmp.w	r8, #0
   b87a8:	d0fa      	beq.n	b87a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b87aa:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b87ac:	a806      	add	r0, sp, #24
   b87ae:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b87b0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b87b2:	f7ff ff71 	bl	b8698 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b87b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87b8:	1d3c      	adds	r4, r7, #4
   b87ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b87bc:	682b      	ldr	r3, [r5, #0]
   b87be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b87c0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b87c2:	e7ed      	b.n	b87a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b87c4:	f1b9 0f00 	cmp.w	r9, #0
   b87c8:	d0ea      	beq.n	b87a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b87ca:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b87cc:	2210      	movs	r2, #16
   b87ce:	a801      	add	r0, sp, #4
   b87d0:	f001 fa76 	bl	b9cc0 <memset>
                    a.v = 6;
   b87d4:	2306      	movs	r3, #6
   b87d6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b87da:	ad01      	add	r5, sp, #4
   b87dc:	f104 0308 	add.w	r3, r4, #8
   b87e0:	3418      	adds	r4, #24
   b87e2:	6818      	ldr	r0, [r3, #0]
   b87e4:	6859      	ldr	r1, [r3, #4]
   b87e6:	462a      	mov	r2, r5
   b87e8:	c203      	stmia	r2!, {r0, r1}
   b87ea:	3308      	adds	r3, #8
   b87ec:	42a3      	cmp	r3, r4
   b87ee:	4615      	mov	r5, r2
   b87f0:	d1f7      	bne.n	b87e2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b87f2:	a901      	add	r1, sp, #4
   b87f4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b87f6:	ad07      	add	r5, sp, #28
   b87f8:	f7ff ff0c 	bl	b8614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b87fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b87fe:	1d3c      	adds	r4, r7, #4
   b8800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8802:	682b      	ldr	r3, [r5, #0]
   b8804:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8806:	4649      	mov	r1, r9
   b8808:	e7ca      	b.n	b87a0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b880a:	9800      	ldr	r0, [sp, #0]
   b880c:	f7fd f978 	bl	b5b00 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b8810:	4638      	mov	r0, r7
   b8812:	b015      	add	sp, #84	; 0x54
   b8814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8818 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8818:	4b02      	ldr	r3, [pc, #8]	; (b8824 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b881a:	4a03      	ldr	r2, [pc, #12]	; (b8828 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b881c:	601a      	str	r2, [r3, #0]
   b881e:	2200      	movs	r2, #0
   b8820:	605a      	str	r2, [r3, #4]

} // spark
   b8822:	4770      	bx	lr
   b8824:	2003e6d4 	.word	0x2003e6d4
   b8828:	000baa40 	.word	0x000baa40

000b882c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b882e:	4606      	mov	r6, r0
   b8830:	460d      	mov	r5, r1
  size_t n = 0;
   b8832:	188f      	adds	r7, r1, r2
   b8834:	2400      	movs	r4, #0
  while (size--) {
   b8836:	42bd      	cmp	r5, r7
   b8838:	d00c      	beq.n	b8854 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b883a:	6833      	ldr	r3, [r6, #0]
   b883c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b8840:	689b      	ldr	r3, [r3, #8]
   b8842:	4630      	mov	r0, r6
   b8844:	4798      	blx	r3
     if (chunk>=0)
   b8846:	1e03      	subs	r3, r0, #0
   b8848:	db01      	blt.n	b884e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b884a:	441c      	add	r4, r3
  while (size--) {
   b884c:	e7f3      	b.n	b8836 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b884e:	2c00      	cmp	r4, #0
   b8850:	bf08      	it	eq
   b8852:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b8854:	4620      	mov	r0, r4
   b8856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8858 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b8858:	b513      	push	{r0, r1, r4, lr}
   b885a:	4604      	mov	r4, r0
    }
   b885c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b885e:	b159      	cbz	r1, b8878 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b8860:	9101      	str	r1, [sp, #4]
   b8862:	f001 fa75 	bl	b9d50 <strlen>
   b8866:	6823      	ldr	r3, [r4, #0]
   b8868:	9901      	ldr	r1, [sp, #4]
   b886a:	68db      	ldr	r3, [r3, #12]
   b886c:	4602      	mov	r2, r0
   b886e:	4620      	mov	r0, r4
    }
   b8870:	b002      	add	sp, #8
   b8872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b8876:	4718      	bx	r3
    }
   b8878:	b002      	add	sp, #8
   b887a:	bd10      	pop	{r4, pc}

000b887c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b887c:	b508      	push	{r3, lr}
  return write(str);
   b887e:	f7ff ffeb 	bl	b8858 <_ZN5Print5writeEPKc>
}
   b8882:	bd08      	pop	{r3, pc}

000b8884 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8884:	6803      	ldr	r3, [r0, #0]
   b8886:	689b      	ldr	r3, [r3, #8]
   b8888:	4718      	bx	r3

000b888a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b888a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b888c:	210d      	movs	r1, #13
{
   b888e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b8890:	f7ff fff8 	bl	b8884 <_ZN5Print5printEc>
  n += print('\n');
   b8894:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8896:	4604      	mov	r4, r0
  n += print('\n');
   b8898:	4628      	mov	r0, r5
   b889a:	f7ff fff3 	bl	b8884 <_ZN5Print5printEc>
  return n;
}
   b889e:	4420      	add	r0, r4
   b88a0:	bd38      	pop	{r3, r4, r5, pc}

000b88a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b88a2:	b538      	push	{r3, r4, r5, lr}
   b88a4:	4605      	mov	r5, r0
  return write(str);
   b88a6:	f7ff ffd7 	bl	b8858 <_ZN5Print5writeEPKc>
   b88aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b88ac:	4628      	mov	r0, r5
   b88ae:	f7ff ffec 	bl	b888a <_ZN5Print7printlnEv>
  return n;
}
   b88b2:	4420      	add	r0, r4
   b88b4:	bd38      	pop	{r3, r4, r5, pc}

000b88b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b88b6:	b530      	push	{r4, r5, lr}
   b88b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b88ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b88bc:	2a01      	cmp	r2, #1
  *str = '\0';
   b88be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b88c2:	bf98      	it	ls
   b88c4:	220a      	movls	r2, #10
   b88c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b88c8:	460d      	mov	r5, r1
   b88ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b88ce:	fb01 5312 	mls	r3, r1, r2, r5
   b88d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b88d6:	2b09      	cmp	r3, #9
   b88d8:	bf94      	ite	ls
   b88da:	3330      	addls	r3, #48	; 0x30
   b88dc:	3337      	addhi	r3, #55	; 0x37
   b88de:	b2db      	uxtb	r3, r3
  } while(n);
   b88e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b88e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b88e6:	d9ef      	bls.n	b88c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b88e8:	4621      	mov	r1, r4
   b88ea:	f7ff ffb5 	bl	b8858 <_ZN5Print5writeEPKc>
}
   b88ee:	b00b      	add	sp, #44	; 0x2c
   b88f0:	bd30      	pop	{r4, r5, pc}

000b88f2 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b88f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88f6:	b086      	sub	sp, #24
   b88f8:	af00      	add	r7, sp, #0
   b88fa:	4605      	mov	r5, r0
   b88fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b88fe:	1d38      	adds	r0, r7, #4
   b8900:	2114      	movs	r1, #20
{
   b8902:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8904:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8906:	f7fd fae7 	bl	b5ed8 <vsnprintf>

    if (n<bufsize)
   b890a:	2813      	cmp	r0, #19
   b890c:	d80e      	bhi.n	b892c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b890e:	1d39      	adds	r1, r7, #4
   b8910:	4628      	mov	r0, r5
   b8912:	f7ff ffa1 	bl	b8858 <_ZN5Print5writeEPKc>
   b8916:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8918:	b11e      	cbz	r6, b8922 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b891a:	4628      	mov	r0, r5
   b891c:	f7ff ffb5 	bl	b888a <_ZN5Print7printlnEv>
   b8920:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b8922:	4620      	mov	r0, r4
   b8924:	3718      	adds	r7, #24
   b8926:	46bd      	mov	sp, r7
   b8928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b892c:	f100 0308 	add.w	r3, r0, #8
   b8930:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b8934:	46e8      	mov	r8, sp
        char bigger[n+1];
   b8936:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b893a:	4622      	mov	r2, r4
   b893c:	1c41      	adds	r1, r0, #1
   b893e:	683b      	ldr	r3, [r7, #0]
   b8940:	4668      	mov	r0, sp
   b8942:	f7fd fac9 	bl	b5ed8 <vsnprintf>
  return write(str);
   b8946:	4669      	mov	r1, sp
   b8948:	4628      	mov	r0, r5
   b894a:	f7ff ff85 	bl	b8858 <_ZN5Print5writeEPKc>
   b894e:	4604      	mov	r4, r0
   b8950:	46c5      	mov	sp, r8
   b8952:	e7e1      	b.n	b8918 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b8954 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   b8954:	b510      	push	{r4, lr}
   b8956:	4604      	mov	r4, r0
    return LED_RGB_IsOverRidden();
   b8958:	f7fd f9ea 	bl	b5d30 <LED_RGB_IsOverRidden>
    if (override == controlled()) {
   b895c:	4284      	cmp	r4, r0
   b895e:	d008      	beq.n	b8972 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   b8960:	b11c      	cbz	r4, b896a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   b8962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Start();
   b8966:	f7fd b9d3 	b.w	b5d10 <LED_Signaling_Start>
}
   b896a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LED_Signaling_Stop();
   b896e:	f7fd b9d7 	b.w	b5d20 <LED_Signaling_Stop>
}
   b8972:	bd10      	pop	{r4, pc}

000b8974 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   b8974:	b570      	push	{r4, r5, r6, lr}
   b8976:	4605      	mov	r5, r0
   b8978:	460e      	mov	r6, r1
   b897a:	4614      	mov	r4, r2
    return LED_RGB_IsOverRidden();
   b897c:	f7fd f9d8 	bl	b5d30 <LED_RGB_IsOverRidden>
    if (!controlled()) {
   b8980:	b150      	cbz	r0, b8998 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   b8982:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
   b8986:	ea44 4005 	orr.w	r0, r4, r5, lsl #16
   b898a:	f7fd f9b9 	bl	b5d00 <LED_SetSignalingColor>
    LED_On(PARTICLE_LED_RGB);
}
   b898e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LED_On(PARTICLE_LED_RGB);
   b8992:	20e7      	movs	r0, #231	; 0xe7
   b8994:	f7fd b9d4 	b.w	b5d40 <LED_On>
}
   b8998:	bd70      	pop	{r4, r5, r6, pc}
	...

000b899c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b899c:	4b01      	ldr	r3, [pc, #4]	; (b89a4 <_GLOBAL__sub_I_RGB+0x8>)
   b899e:	2200      	movs	r2, #0
   b89a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b89a2:	4770      	bx	lr
   b89a4:	2003e6dc 	.word	0x2003e6dc

000b89a8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b89a8:	2100      	movs	r1, #0
   b89aa:	f7fd b921 	b.w	b5bf0 <hal_spi_release>

000b89ae <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b89ae:	2100      	movs	r1, #0
   b89b0:	f7fd b916 	b.w	b5be0 <hal_spi_acquire>

000b89b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b89b4:	b510      	push	{r4, lr}
   b89b6:	4604      	mov	r4, r0
   b89b8:	4608      	mov	r0, r1
{
    _spi = spi;
   b89ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b89bc:	f7fd f8f0 	bl	b5ba0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b89c0:	2300      	movs	r3, #0
   b89c2:	6063      	str	r3, [r4, #4]
}
   b89c4:	4620      	mov	r0, r4
   b89c6:	bd10      	pop	{r4, pc}

000b89c8 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   b89c8:	b513      	push	{r0, r1, r4, lr}
   b89ca:	4604      	mov	r4, r0
    if (!lock())
   b89cc:	7800      	ldrb	r0, [r0, #0]
{
   b89ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b89d0:	f7ff ffed 	bl	b89ae <_ZN8SPIClass4lockEv.isra.0>
   b89d4:	9901      	ldr	r1, [sp, #4]
   b89d6:	b948      	cbnz	r0, b89ec <_ZN8SPIClass5beginEt+0x24>
   b89d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b89da:	9001      	str	r0, [sp, #4]
   b89dc:	f7fd f8d0 	bl	b5b80 <hal_spi_begin>
        unlock();
   b89e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b89e2:	b002      	add	sp, #8
   b89e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b89e8:	f7ff bfde 	b.w	b89a8 <_ZN8SPIClass6unlockEv.isra.0>
   b89ec:	b002      	add	sp, #8
   b89ee:	bd10      	pop	{r4, pc}

000b89f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b89f0:	7800      	ldrb	r0, [r0, #0]
   b89f2:	f7ff bfd9 	b.w	b89a8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b89f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b89f8:	0840      	lsrs	r0, r0, #1
{
   b89fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b89fc:	6018      	str	r0, [r3, #0]
   b89fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b8a00:	6818      	ldr	r0, [r3, #0]
   b8a02:	4288      	cmp	r0, r1
   b8a04:	b2e5      	uxtb	r5, r4
   b8a06:	d906      	bls.n	b8a16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8a08:	3401      	adds	r4, #1
   b8a0a:	2c08      	cmp	r4, #8
   b8a0c:	d002      	beq.n	b8a14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b8a0e:	0840      	lsrs	r0, r0, #1
   b8a10:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b8a12:	e7f5      	b.n	b8a00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8a14:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8a16:	4b02      	ldr	r3, [pc, #8]	; (b8a20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8a18:	5d5b      	ldrb	r3, [r3, r5]
   b8a1a:	7013      	strb	r3, [r2, #0]
}
   b8a1c:	bd30      	pop	{r4, r5, pc}
   b8a1e:	bf00      	nop
   b8a20:	000baa74 	.word	0x000baa74

000b8a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8a28:	4606      	mov	r6, r0
   b8a2a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8a2c:	7800      	ldrb	r0, [r0, #0]
{
   b8a2e:	460c      	mov	r4, r1
    CHECK(lock());
   b8a30:	f7ff ffbd 	bl	b89ae <_ZN8SPIClass4lockEv.isra.0>
   b8a34:	2800      	cmp	r0, #0
   b8a36:	db1b      	blt.n	b8a70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8a38:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8a3a:	2214      	movs	r2, #20
   b8a3c:	2100      	movs	r1, #0
   b8a3e:	a809      	add	r0, sp, #36	; 0x24
   b8a40:	f001 f93e 	bl	b9cc0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8a44:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8a46:	2200      	movs	r2, #0
   b8a48:	a909      	add	r1, sp, #36	; 0x24
   b8a4a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8a4c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b8a50:	f7fd f8b6 	bl	b5bc0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8a54:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8a58:	b113      	cbz	r3, b8a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8a5a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b8a5e:	b155      	cbz	r5, b8a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b8a60:	2700      	movs	r7, #0
   b8a62:	46b9      	mov	r9, r7
   b8a64:	46b8      	mov	r8, r7
   b8a66:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8a68:	7923      	ldrb	r3, [r4, #4]
   b8a6a:	b15d      	cbz	r5, b8a84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8a6c:	b1c3      	cbz	r3, b8aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b8a6e:	2000      	movs	r0, #0
}
   b8a70:	b00f      	add	sp, #60	; 0x3c
   b8a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b8a76:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b8a7a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b8a7e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b8a82:	e7f1      	b.n	b8a68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b8a84:	2b00      	cmp	r3, #0
   b8a86:	d135      	bne.n	b8af4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b8a88:	68a3      	ldr	r3, [r4, #8]
   b8a8a:	4543      	cmp	r3, r8
   b8a8c:	d108      	bne.n	b8aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b8a8e:	f88d 9020 	strb.w	r9, [sp, #32]
   b8a92:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8a96:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8a9a:	89a3      	ldrh	r3, [r4, #12]
   b8a9c:	429a      	cmp	r2, r3
   b8a9e:	d0e6      	beq.n	b8a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b8aa0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8aa2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b8aa4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b8aa8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b8aaa:	ab04      	add	r3, sp, #16
   b8aac:	f10d 020f 	add.w	r2, sp, #15
   b8ab0:	f7ff ffa2 	bl	b89f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b8ab4:	7921      	ldrb	r1, [r4, #4]
   b8ab6:	b985      	cbnz	r5, b8ada <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b8ab8:	b989      	cbnz	r1, b8ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8aba:	68a3      	ldr	r3, [r4, #8]
   b8abc:	4543      	cmp	r3, r8
   b8abe:	d30e      	bcc.n	b8ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b8ac0:	f88d 9020 	strb.w	r9, [sp, #32]
   b8ac4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b8ac8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b8acc:	89a3      	ldrh	r3, [r4, #12]
   b8ace:	429a      	cmp	r2, r3
   b8ad0:	d105      	bne.n	b8ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b8ad2:	9b04      	ldr	r3, [sp, #16]
   b8ad4:	4543      	cmp	r3, r8
   b8ad6:	d102      	bne.n	b8ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8ad8:	e7c9      	b.n	b8a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8ada:	2900      	cmp	r1, #0
   b8adc:	d1f9      	bne.n	b8ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b8ade:	2300      	movs	r3, #0
   b8ae0:	9301      	str	r3, [sp, #4]
   b8ae2:	7b63      	ldrb	r3, [r4, #13]
   b8ae4:	9300      	str	r3, [sp, #0]
   b8ae6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8aea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8aec:	7830      	ldrb	r0, [r6, #0]
   b8aee:	f7fd f86f 	bl	b5bd0 <hal_spi_set_settings>
   b8af2:	e7bc      	b.n	b8a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8af4:	e9cd 5500 	strd	r5, r5, [sp]
   b8af8:	462b      	mov	r3, r5
   b8afa:	462a      	mov	r2, r5
   b8afc:	2101      	movs	r1, #1
   b8afe:	e7f5      	b.n	b8aec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b8b00 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b8b00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b8b02:	7800      	ldrb	r0, [r0, #0]
   b8b04:	f7fd f844 	bl	b5b90 <hal_spi_transfer>
}
   b8b08:	b2c0      	uxtb	r0, r0
   b8b0a:	bd08      	pop	{r3, pc}

000b8b0c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b8b0c:	b510      	push	{r4, lr}
   b8b0e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b8b10:	f7fc ff36 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b8b14:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b8b16:	6823      	ldr	r3, [r4, #0]
   b8b18:	4620      	mov	r0, r4
   b8b1a:	695b      	ldr	r3, [r3, #20]
   b8b1c:	4798      	blx	r3
    if (c >= 0) return c;
   b8b1e:	2800      	cmp	r0, #0
   b8b20:	da08      	bge.n	b8b34 <_ZN6Stream9timedReadEv+0x28>
   b8b22:	f7fc ff2d 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b8b26:	68e3      	ldr	r3, [r4, #12]
   b8b28:	1ac0      	subs	r0, r0, r3
   b8b2a:	68a3      	ldr	r3, [r4, #8]
   b8b2c:	4298      	cmp	r0, r3
   b8b2e:	d3f2      	bcc.n	b8b16 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b8b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b8b34:	bd10      	pop	{r4, pc}

000b8b36 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b8b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8b3a:	4607      	mov	r7, r0
   b8b3c:	460c      	mov	r4, r1
   b8b3e:	188e      	adds	r6, r1, r2
   b8b40:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b8b42:	42b5      	cmp	r5, r6
   b8b44:	eba5 0804 	sub.w	r8, r5, r4
   b8b48:	d007      	beq.n	b8b5a <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b8b4a:	4638      	mov	r0, r7
   b8b4c:	f7ff ffde 	bl	b8b0c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b8b50:	1e03      	subs	r3, r0, #0
   b8b52:	db02      	blt.n	b8b5a <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b8b54:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b8b58:	e7f3      	b.n	b8b42 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b8b5a:	4640      	mov	r0, r8
   b8b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8b60 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8b60:	b510      	push	{r4, lr}
   b8b62:	4604      	mov	r4, r0
{
	free(buffer);
   b8b64:	6800      	ldr	r0, [r0, #0]
   b8b66:	f7fd f99f 	bl	b5ea8 <free>
}
   b8b6a:	4620      	mov	r0, r4
   b8b6c:	bd10      	pop	{r4, pc}

000b8b6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8b6e:	b510      	push	{r4, lr}
   b8b70:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b8b72:	6800      	ldr	r0, [r0, #0]
   b8b74:	b108      	cbz	r0, b8b7a <_ZN6String10invalidateEv+0xc>
   b8b76:	f7fd f997 	bl	b5ea8 <free>
	buffer = NULL;
   b8b7a:	2300      	movs	r3, #0
	capacity = len = 0;
   b8b7c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8b80:	6023      	str	r3, [r4, #0]
}
   b8b82:	bd10      	pop	{r4, pc}

000b8b84 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b8b84:	b538      	push	{r3, r4, r5, lr}
   b8b86:	4604      	mov	r4, r0
   b8b88:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8b8a:	6800      	ldr	r0, [r0, #0]
   b8b8c:	3101      	adds	r1, #1
   b8b8e:	f7fd f993 	bl	b5eb8 <realloc>
	if (newbuffer) {
   b8b92:	b110      	cbz	r0, b8b9a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b8b94:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8b98:	2001      	movs	r0, #1
	}
	return 0;
}
   b8b9a:	bd38      	pop	{r3, r4, r5, pc}

000b8b9c <_ZN6String7reserveEj>:
{
   b8b9c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8b9e:	6803      	ldr	r3, [r0, #0]
{
   b8ba0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b8ba2:	b123      	cbz	r3, b8bae <_ZN6String7reserveEj+0x12>
   b8ba4:	6843      	ldr	r3, [r0, #4]
   b8ba6:	428b      	cmp	r3, r1
   b8ba8:	d301      	bcc.n	b8bae <_ZN6String7reserveEj+0x12>
   b8baa:	2001      	movs	r0, #1
}
   b8bac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8bae:	4620      	mov	r0, r4
   b8bb0:	f7ff ffe8 	bl	b8b84 <_ZN6String12changeBufferEj>
   b8bb4:	2800      	cmp	r0, #0
   b8bb6:	d0f9      	beq.n	b8bac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8bb8:	68a3      	ldr	r3, [r4, #8]
   b8bba:	2b00      	cmp	r3, #0
   b8bbc:	d1f5      	bne.n	b8baa <_ZN6String7reserveEj+0xe>
   b8bbe:	6822      	ldr	r2, [r4, #0]
   b8bc0:	7013      	strb	r3, [r2, #0]
   b8bc2:	e7f2      	b.n	b8baa <_ZN6String7reserveEj+0xe>

000b8bc4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b8bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8bc6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b8bc8:	4611      	mov	r1, r2
   b8bca:	9201      	str	r2, [sp, #4]
{
   b8bcc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b8bce:	f7ff ffe5 	bl	b8b9c <_ZN6String7reserveEj>
   b8bd2:	9a01      	ldr	r2, [sp, #4]
   b8bd4:	b928      	cbnz	r0, b8be2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b8bd6:	4620      	mov	r0, r4
   b8bd8:	f7ff ffc9 	bl	b8b6e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b8bdc:	4620      	mov	r0, r4
   b8bde:	b003      	add	sp, #12
   b8be0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b8be2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b8be4:	4629      	mov	r1, r5
   b8be6:	6820      	ldr	r0, [r4, #0]
   b8be8:	f001 f842 	bl	b9c70 <memcpy>
	buffer[len] = 0;
   b8bec:	6822      	ldr	r2, [r4, #0]
   b8bee:	68a3      	ldr	r3, [r4, #8]
   b8bf0:	2100      	movs	r1, #0
   b8bf2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b8bf4:	e7f2      	b.n	b8bdc <_ZN6String4copyEPKcj+0x18>

000b8bf6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b8bf6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b8bf8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b8bfa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b8bfe:	4604      	mov	r4, r0
	len = 0;
   b8c00:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8c02:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b8c04:	b141      	cbz	r1, b8c18 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b8c06:	4608      	mov	r0, r1
   b8c08:	9101      	str	r1, [sp, #4]
   b8c0a:	f001 f8a1 	bl	b9d50 <strlen>
   b8c0e:	9901      	ldr	r1, [sp, #4]
   b8c10:	4602      	mov	r2, r0
   b8c12:	4620      	mov	r0, r4
   b8c14:	f7ff ffd6 	bl	b8bc4 <_ZN6String4copyEPKcj>
}
   b8c18:	4620      	mov	r0, r4
   b8c1a:	b002      	add	sp, #8
   b8c1c:	bd10      	pop	{r4, pc}

000b8c1e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b8c1e:	b538      	push	{r3, r4, r5, lr}
   b8c20:	4605      	mov	r5, r0
	if (buffer) {
   b8c22:	6800      	ldr	r0, [r0, #0]
{
   b8c24:	460c      	mov	r4, r1
	if (buffer) {
   b8c26:	b168      	cbz	r0, b8c44 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b8c28:	686a      	ldr	r2, [r5, #4]
   b8c2a:	688b      	ldr	r3, [r1, #8]
   b8c2c:	429a      	cmp	r2, r3
   b8c2e:	d307      	bcc.n	b8c40 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b8c30:	6809      	ldr	r1, [r1, #0]
   b8c32:	f001 f885 	bl	b9d40 <strcpy>
			len = rhs.len;
   b8c36:	68a3      	ldr	r3, [r4, #8]
   b8c38:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8c3a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8c3c:	60a3      	str	r3, [r4, #8]
}
   b8c3e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b8c40:	f7fd f932 	bl	b5ea8 <free>
	buffer = rhs.buffer;
   b8c44:	6823      	ldr	r3, [r4, #0]
   b8c46:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8c48:	6863      	ldr	r3, [r4, #4]
   b8c4a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8c4c:	68a3      	ldr	r3, [r4, #8]
   b8c4e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b8c50:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b8c52:	e9c4 3300 	strd	r3, r3, [r4]
   b8c56:	e7f1      	b.n	b8c3c <_ZN6String4moveERS_+0x1e>

000b8c58 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8c58:	b510      	push	{r4, lr}
	buffer = NULL;
   b8c5a:	2300      	movs	r3, #0
	capacity = 0;
   b8c5c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b8c60:	4604      	mov	r4, r0
	len = 0;
   b8c62:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8c64:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8c66:	f7ff ffda 	bl	b8c1e <_ZN6String4moveERS_>
}
   b8c6a:	4620      	mov	r0, r4
   b8c6c:	bd10      	pop	{r4, pc}

000b8c6e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8c6e:	4288      	cmp	r0, r1
{
   b8c70:	b510      	push	{r4, lr}
   b8c72:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b8c74:	d005      	beq.n	b8c82 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8c76:	680b      	ldr	r3, [r1, #0]
   b8c78:	b12b      	cbz	r3, b8c86 <_ZN6StringaSERKS_+0x18>
   b8c7a:	688a      	ldr	r2, [r1, #8]
   b8c7c:	4619      	mov	r1, r3
   b8c7e:	f7ff ffa1 	bl	b8bc4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8c82:	4620      	mov	r0, r4
   b8c84:	bd10      	pop	{r4, pc}
	else invalidate();
   b8c86:	f7ff ff72 	bl	b8b6e <_ZN6String10invalidateEv>
   b8c8a:	e7fa      	b.n	b8c82 <_ZN6StringaSERKS_+0x14>

000b8c8c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8c8c:	b510      	push	{r4, lr}
	buffer = NULL;
   b8c8e:	2300      	movs	r3, #0
String::String(const String &value)
   b8c90:	4604      	mov	r4, r0
	capacity = 0;
   b8c92:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8c96:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8c98:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8c9a:	f7ff ffe8 	bl	b8c6e <_ZN6StringaSERKS_>
}
   b8c9e:	4620      	mov	r0, r4
   b8ca0:	bd10      	pop	{r4, pc}

000b8ca2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b8ca2:	b513      	push	{r0, r1, r4, lr}
   b8ca4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8ca6:	b159      	cbz	r1, b8cc0 <_ZN6StringaSEPKc+0x1e>
   b8ca8:	4608      	mov	r0, r1
   b8caa:	9101      	str	r1, [sp, #4]
   b8cac:	f001 f850 	bl	b9d50 <strlen>
   b8cb0:	9901      	ldr	r1, [sp, #4]
   b8cb2:	4602      	mov	r2, r0
   b8cb4:	4620      	mov	r0, r4
   b8cb6:	f7ff ff85 	bl	b8bc4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8cba:	4620      	mov	r0, r4
   b8cbc:	b002      	add	sp, #8
   b8cbe:	bd10      	pop	{r4, pc}
	else invalidate();
   b8cc0:	f7ff ff55 	bl	b8b6e <_ZN6String10invalidateEv>
   b8cc4:	e7f9      	b.n	b8cba <_ZN6StringaSEPKc+0x18>

000b8cc6 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b8cc6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8cc8:	4604      	mov	r4, r0
	buffer = NULL;
   b8cca:	2300      	movs	r3, #0
	capacity = 0;
   b8ccc:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b8cd0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b8cd2:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b8cd4:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b8cd6:	a901      	add	r1, sp, #4
   b8cd8:	f000 fcbe 	bl	b9658 <utoa>
	*this = buf;
   b8cdc:	a901      	add	r1, sp, #4
   b8cde:	4620      	mov	r0, r4
   b8ce0:	f7ff ffdf 	bl	b8ca2 <_ZN6StringaSEPKc>
}
   b8ce4:	4620      	mov	r0, r4
   b8ce6:	b004      	add	sp, #16
   b8ce8:	bd10      	pop	{r4, pc}

000b8cea <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b8cea:	b570      	push	{r4, r5, r6, lr}
   b8cec:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b8cee:	460e      	mov	r6, r1
   b8cf0:	b909      	cbnz	r1, b8cf6 <_ZN6String6concatEPKcj+0xc>
   b8cf2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b8cf4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b8cf6:	b16a      	cbz	r2, b8d14 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b8cf8:	6884      	ldr	r4, [r0, #8]
   b8cfa:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b8cfc:	4621      	mov	r1, r4
   b8cfe:	f7ff ff4d 	bl	b8b9c <_ZN6String7reserveEj>
   b8d02:	2800      	cmp	r0, #0
   b8d04:	d0f5      	beq.n	b8cf2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b8d06:	6828      	ldr	r0, [r5, #0]
   b8d08:	68ab      	ldr	r3, [r5, #8]
   b8d0a:	4631      	mov	r1, r6
   b8d0c:	4418      	add	r0, r3
   b8d0e:	f001 f817 	bl	b9d40 <strcpy>
	len = newlen;
   b8d12:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b8d14:	2001      	movs	r0, #1
   b8d16:	e7ed      	b.n	b8cf4 <_ZN6String6concatEPKcj+0xa>

000b8d18 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b8d18:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b8d1a:	2300      	movs	r3, #0
	buf[0] = c;
   b8d1c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b8d20:	2201      	movs	r2, #1
   b8d22:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b8d24:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b8d28:	f7ff ffdf 	bl	b8cea <_ZN6String6concatEPKcj>
}
   b8d2c:	b003      	add	sp, #12
   b8d2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b8d32 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b8d32:	6802      	ldr	r2, [r0, #0]
{
   b8d34:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b8d36:	6809      	ldr	r1, [r1, #0]
   b8d38:	b162      	cbz	r2, b8d54 <_ZNK6String9compareToERKS_+0x22>
   b8d3a:	b941      	cbnz	r1, b8d4e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b8d3c:	6880      	ldr	r0, [r0, #8]
   b8d3e:	b160      	cbz	r0, b8d5a <_ZNK6String9compareToERKS_+0x28>
   b8d40:	7810      	ldrb	r0, [r2, #0]
   b8d42:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8d44:	6898      	ldr	r0, [r3, #8]
   b8d46:	b140      	cbz	r0, b8d5a <_ZNK6String9compareToERKS_+0x28>
   b8d48:	7809      	ldrb	r1, [r1, #0]
   b8d4a:	4248      	negs	r0, r1
   b8d4c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b8d4e:	4610      	mov	r0, r2
   b8d50:	f000 bfec 	b.w	b9d2c <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b8d54:	2900      	cmp	r1, #0
   b8d56:	d1f5      	bne.n	b8d44 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b8d58:	4608      	mov	r0, r1
}
   b8d5a:	4770      	bx	lr

000b8d5c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b8d5c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b8d5e:	6882      	ldr	r2, [r0, #8]
   b8d60:	688b      	ldr	r3, [r1, #8]
   b8d62:	429a      	cmp	r2, r3
   b8d64:	d105      	bne.n	b8d72 <_ZNK6String6equalsERKS_+0x16>
   b8d66:	f7ff ffe4 	bl	b8d32 <_ZNK6String9compareToERKS_>
   b8d6a:	fab0 f080 	clz	r0, r0
   b8d6e:	0940      	lsrs	r0, r0, #5
}
   b8d70:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b8d72:	2000      	movs	r0, #0
   b8d74:	e7fc      	b.n	b8d70 <_ZNK6String6equalsERKS_+0x14>

000b8d76 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b8d76:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8d78:	6882      	ldr	r2, [r0, #8]
   b8d7a:	b93a      	cbnz	r2, b8d8c <_ZNK6String6equalsEPKc+0x16>
   b8d7c:	b121      	cbz	r1, b8d88 <_ZNK6String6equalsEPKc+0x12>
   b8d7e:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b8d80:	fab0 f080 	clz	r0, r0
   b8d84:	0940      	lsrs	r0, r0, #5
   b8d86:	e000      	b.n	b8d8a <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b8d88:	2001      	movs	r0, #1
}
   b8d8a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b8d8c:	6800      	ldr	r0, [r0, #0]
   b8d8e:	b909      	cbnz	r1, b8d94 <_ZNK6String6equalsEPKc+0x1e>
   b8d90:	7800      	ldrb	r0, [r0, #0]
   b8d92:	e7f5      	b.n	b8d80 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b8d94:	f000 ffca 	bl	b9d2c <strcmp>
   b8d98:	e7f2      	b.n	b8d80 <_ZNK6String6equalsEPKc+0xa>
	...

000b8d9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8d9c:	4b05      	ldr	r3, [pc, #20]	; (b8db4 <_GLOBAL__sub_I_System+0x18>)
   b8d9e:	2202      	movs	r2, #2
   b8da0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8da2:	4b05      	ldr	r3, [pc, #20]	; (b8db8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8da4:	4a05      	ldr	r2, [pc, #20]	; (b8dbc <_GLOBAL__sub_I_System+0x20>)
   b8da6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b8da8:	2000      	movs	r0, #0
   b8daa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8dae:	f7fc bfdf 	b.w	b5d70 <set_system_mode>
   b8db2:	bf00      	nop
   b8db4:	2003e6f8 	.word	0x2003e6f8
   b8db8:	2003e6ec 	.word	0x2003e6ec
   b8dbc:	ffff0000 	.word	0xffff0000

000b8dc0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b8dc0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8dc2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b8dc4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b8dc8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8dca:	2201      	movs	r2, #1
   b8dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8dd0:	f10d 0107 	add.w	r1, sp, #7
   b8dd4:	47a0      	blx	r4
}
   b8dd6:	b002      	add	sp, #8
   b8dd8:	bd10      	pop	{r4, pc}

000b8dda <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b8dda:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8ddc:	6803      	ldr	r3, [r0, #0]
   b8dde:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b8de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b8de4:	46a4      	mov	ip, r4
}
   b8de6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b8dea:	4760      	bx	ip

000b8dec <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8dec:	b513      	push	{r0, r1, r4, lr}
   b8dee:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b8df0:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b8df2:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b8df6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8df8:	f10d 0107 	add.w	r1, sp, #7
   b8dfc:	2201      	movs	r2, #1
   b8dfe:	47a0      	blx	r4
}
   b8e00:	b002      	add	sp, #8
   b8e02:	bd10      	pop	{r4, pc}

000b8e04 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b8e04:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b8e06:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8e0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b8e10:	429a      	cmp	r2, r3
int TCPClient::read() {
   b8e12:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e14:	d008      	beq.n	b8e28 <_ZN9TCPClient4readEv+0x24>
   b8e16:	6963      	ldr	r3, [r4, #20]
   b8e18:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b8e1c:	1c51      	adds	r1, r2, #1
   b8e1e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b8e22:	4413      	add	r3, r2
   b8e24:	7918      	ldrb	r0, [r3, #4]
}
   b8e26:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b8e28:	6803      	ldr	r3, [r0, #0]
   b8e2a:	691b      	ldr	r3, [r3, #16]
   b8e2c:	4798      	blx	r3
   b8e2e:	2800      	cmp	r0, #0
   b8e30:	d1f1      	bne.n	b8e16 <_ZN9TCPClient4readEv+0x12>
   b8e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8e36:	e7f6      	b.n	b8e26 <_ZN9TCPClient4readEv+0x22>

000b8e38 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b8e38:	4770      	bx	lr

000b8e3a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b8e3a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b8e3c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b8e3e:	43c0      	mvns	r0, r0
   b8e40:	0fc0      	lsrs	r0, r0, #31
   b8e42:	4770      	bx	lr

000b8e44 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e44:	4770      	bx	lr
	...

000b8e48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b8e48:	4b06      	ldr	r3, [pc, #24]	; (b8e64 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b8e4a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b8e4c:	b510      	push	{r4, lr}
   b8e4e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b8e52:	d005      	beq.n	b8e60 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b8e54:	4608      	mov	r0, r1
   b8e56:	f000 fddb 	bl	b9a10 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b8e5a:	2800      	cmp	r0, #0
   b8e5c:	bf08      	it	eq
   b8e5e:	2400      	moveq	r4, #0
      }
   b8e60:	4620      	mov	r0, r4
   b8e62:	bd10      	pop	{r4, pc}
   b8e64:	000ba99c 	.word	0x000ba99c

000b8e68 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b8e68:	b510      	push	{r4, lr}
   b8e6a:	21ac      	movs	r1, #172	; 0xac
   b8e6c:	4604      	mov	r4, r0
   b8e6e:	f7fb f914 	bl	b409a <_ZdlPvj>
   b8e72:	4620      	mov	r0, r4
   b8e74:	bd10      	pop	{r4, pc}

000b8e76 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b8e76:	21ac      	movs	r1, #172	; 0xac
   b8e78:	f7fb b90f 	b.w	b409a <_ZdlPvj>

000b8e7c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b8e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b8e80:	f04f 0800 	mov.w	r8, #0
   b8e84:	b086      	sub	sp, #24
   b8e86:	461c      	mov	r4, r3
   b8e88:	f8c0 8004 	str.w	r8, [r0, #4]
   b8e8c:	4605      	mov	r5, r0
   b8e8e:	460e      	mov	r6, r1
   b8e90:	4617      	mov	r7, r2
    struct timeval tv = {};
   b8e92:	4641      	mov	r1, r8
   b8e94:	2210      	movs	r2, #16
   b8e96:	a802      	add	r0, sp, #8
   b8e98:	f000 ff12 	bl	b9cc0 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b8e9c:	1c63      	adds	r3, r4, #1
   b8e9e:	d009      	beq.n	b8eb4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b8ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8ea4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b8ea8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b8eac:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b8eb0:	435c      	muls	r4, r3
   b8eb2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b8eb4:	6968      	ldr	r0, [r5, #20]
   b8eb6:	2310      	movs	r3, #16
   b8eb8:	9300      	str	r3, [sp, #0]
   b8eba:	6800      	ldr	r0, [r0, #0]
   b8ebc:	ab02      	add	r3, sp, #8
   b8ebe:	f241 0205 	movw	r2, #4101	; 0x1005
   b8ec2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8ec6:	f7fc fe2b 	bl	b5b20 <sock_setsockopt>
    if (ret < 0) {
   b8eca:	2800      	cmp	r0, #0
   b8ecc:	da07      	bge.n	b8ede <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b8ece:	f7fd f813 	bl	b5ef8 <__errno>
   b8ed2:	6803      	ldr	r3, [r0, #0]
   b8ed4:	606b      	str	r3, [r5, #4]
        return 0;
   b8ed6:	2000      	movs	r0, #0
}
   b8ed8:	b006      	add	sp, #24
   b8eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b8ede:	6968      	ldr	r0, [r5, #20]
   b8ee0:	2300      	movs	r3, #0
   b8ee2:	6800      	ldr	r0, [r0, #0]
   b8ee4:	463a      	mov	r2, r7
   b8ee6:	4631      	mov	r1, r6
   b8ee8:	f7fc fe3a 	bl	b5b60 <sock_send>
    if (ret < 0) {
   b8eec:	1e03      	subs	r3, r0, #0
   b8eee:	dbee      	blt.n	b8ece <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b8ef0:	4618      	mov	r0, r3
   b8ef2:	e7f1      	b.n	b8ed8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b8ef4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b8ef4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b8ef6:	6984      	ldr	r4, [r0, #24]
   b8ef8:	4b0a      	ldr	r3, [pc, #40]	; (b8f24 <_ZN9TCPClientD1Ev+0x30>)
   b8efa:	6003      	str	r3, [r0, #0]
   b8efc:	4605      	mov	r5, r0
   b8efe:	b17c      	cbz	r4, b8f20 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b8f00:	6863      	ldr	r3, [r4, #4]
   b8f02:	3b01      	subs	r3, #1
   b8f04:	6063      	str	r3, [r4, #4]
   b8f06:	b95b      	cbnz	r3, b8f20 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b8f08:	6823      	ldr	r3, [r4, #0]
   b8f0a:	4620      	mov	r0, r4
   b8f0c:	689b      	ldr	r3, [r3, #8]
   b8f0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b8f10:	68a3      	ldr	r3, [r4, #8]
   b8f12:	3b01      	subs	r3, #1
   b8f14:	60a3      	str	r3, [r4, #8]
   b8f16:	b91b      	cbnz	r3, b8f20 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b8f18:	6823      	ldr	r3, [r4, #0]
   b8f1a:	4620      	mov	r0, r4
   b8f1c:	68db      	ldr	r3, [r3, #12]
   b8f1e:	4798      	blx	r3
   b8f20:	4628      	mov	r0, r5
   b8f22:	bd38      	pop	{r3, r4, r5, pc}
   b8f24:	000baab8 	.word	0x000baab8

000b8f28 <_ZN9TCPClientD0Ev>:
   b8f28:	b510      	push	{r4, lr}
   b8f2a:	4604      	mov	r4, r0
   b8f2c:	f7ff ffe2 	bl	b8ef4 <_ZN9TCPClientD1Ev>
   b8f30:	4620      	mov	r0, r4
   b8f32:	211c      	movs	r1, #28
   b8f34:	f7fb f8b1 	bl	b409a <_ZdlPvj>
   b8f38:	4620      	mov	r0, r4
   b8f3a:	bd10      	pop	{r4, pc}

000b8f3c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b8f3c:	b530      	push	{r4, r5, lr}
   b8f3e:	b087      	sub	sp, #28
   b8f40:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b8f42:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b8f44:	4668      	mov	r0, sp
   b8f46:	f7ff fba7 	bl	b8698 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f4c:	3404      	adds	r4, #4
   b8f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f50:	682b      	ldr	r3, [r5, #0]
   b8f52:	7023      	strb	r3, [r4, #0]
    }
   b8f54:	b007      	add	sp, #28
   b8f56:	bd30      	pop	{r4, r5, pc}

000b8f58 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b8f58:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b8f5a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b8f5c:	4b05      	ldr	r3, [pc, #20]	; (b8f74 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b8f5e:	4604      	mov	r4, r0
   b8f60:	358c      	adds	r5, #140	; 0x8c
   b8f62:	f844 3b04 	str.w	r3, [r4], #4
   b8f66:	4606      	mov	r6, r0
   b8f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8f6c:	682b      	ldr	r3, [r5, #0]
   b8f6e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b8f70:	4630      	mov	r0, r6
   b8f72:	bd70      	pop	{r4, r5, r6, pc}
   b8f74:	000baa28 	.word	0x000baa28

000b8f78 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8f7c:	4698      	mov	r8, r3
    stop();
   b8f7e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f80:	b093      	sub	sp, #76	; 0x4c
   b8f82:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b8f84:	2400      	movs	r4, #0
    stop();
   b8f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b8f88:	4606      	mov	r6, r0
   b8f8a:	4617      	mov	r7, r2
    stop();
   b8f8c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f8e:	4628      	mov	r0, r5
   b8f90:	466b      	mov	r3, sp
   b8f92:	4622      	mov	r2, r4
   b8f94:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b8f96:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b8f98:	f7fc fdba 	bl	b5b10 <netdb_getaddrinfo>
   b8f9c:	4605      	mov	r5, r0
   b8f9e:	2800      	cmp	r0, #0
   b8fa0:	d163      	bne.n	b906a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b8fa2:	9b00      	ldr	r3, [sp, #0]
   b8fa4:	2b00      	cmp	r3, #0
   b8fa6:	d04b      	beq.n	b9040 <_ZN9TCPClient7connectEPKctm+0xc8>
   b8fa8:	695b      	ldr	r3, [r3, #20]
   b8faa:	2b00      	cmp	r3, #0
   b8fac:	d048      	beq.n	b9040 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b8fae:	a806      	add	r0, sp, #24
   b8fb0:	f7ff fb22 	bl	b85f8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b8fb4:	9b00      	ldr	r3, [sp, #0]
   b8fb6:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b8fb8:	7863      	ldrb	r3, [r4, #1]
   b8fba:	2b02      	cmp	r3, #2
   b8fbc:	d104      	bne.n	b8fc8 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b8fbe:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b8fc0:	a806      	add	r0, sp, #24
   b8fc2:	f7ff ffbb 	bl	b8f3c <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b8fc6:	e026      	b.n	b9016 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b8fc8:	2b0a      	cmp	r3, #10
   b8fca:	d124      	bne.n	b9016 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b8fcc:	2211      	movs	r2, #17
   b8fce:	4629      	mov	r1, r5
   b8fd0:	a801      	add	r0, sp, #4
   b8fd2:	f000 fe75 	bl	b9cc0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b8fd6:	68a3      	ldr	r3, [r4, #8]
   b8fd8:	2b00      	cmp	r3, #0
   b8fda:	d038      	beq.n	b904e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8fdc:	f104 0308 	add.w	r3, r4, #8
   b8fe0:	f10d 0c04 	add.w	ip, sp, #4
   b8fe4:	3418      	adds	r4, #24
   b8fe6:	6818      	ldr	r0, [r3, #0]
   b8fe8:	6859      	ldr	r1, [r3, #4]
   b8fea:	4662      	mov	r2, ip
   b8fec:	c203      	stmia	r2!, {r0, r1}
   b8fee:	3308      	adds	r3, #8
   b8ff0:	42a3      	cmp	r3, r4
   b8ff2:	4694      	mov	ip, r2
   b8ff4:	d1f7      	bne.n	b8fe6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b8ff6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b8ff8:	a901      	add	r1, sp, #4
   b8ffa:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b8ffc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9000:	f7ff fb08 	bl	b8614 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9004:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9008:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b900c:	ac07      	add	r4, sp, #28
   b900e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9010:	f8dc 3000 	ldr.w	r3, [ip]
   b9014:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9016:	a806      	add	r0, sp, #24
   b9018:	f7ff fb0e 	bl	b8638 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b901c:	b180      	cbz	r0, b9040 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b901e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9020:	ad07      	add	r5, sp, #28
   b9022:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9026:	4b12      	ldr	r3, [pc, #72]	; (b9070 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9028:	930c      	str	r3, [sp, #48]	; 0x30
   b902a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b902c:	ac0d      	add	r4, sp, #52	; 0x34
   b902e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9030:	682b      	ldr	r3, [r5, #0]
   b9032:	7023      	strb	r3, [r4, #0]
   b9034:	463a      	mov	r2, r7
   b9036:	4643      	mov	r3, r8
   b9038:	a90c      	add	r1, sp, #48	; 0x30
   b903a:	4630      	mov	r0, r6
   b903c:	47c8      	blx	r9
   b903e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9040:	9800      	ldr	r0, [sp, #0]
   b9042:	f7fc fd5d 	bl	b5b00 <netdb_freeaddrinfo>
}
   b9046:	4628      	mov	r0, r5
   b9048:	b013      	add	sp, #76	; 0x4c
   b904a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b904e:	68e3      	ldr	r3, [r4, #12]
   b9050:	2b00      	cmp	r3, #0
   b9052:	d1c3      	bne.n	b8fdc <_ZN9TCPClient7connectEPKctm+0x64>
   b9054:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9058:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b905c:	f7fc fd40 	bl	b5ae0 <inet_htonl>
   b9060:	4581      	cmp	r9, r0
   b9062:	d1bb      	bne.n	b8fdc <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9064:	f104 0114 	add.w	r1, r4, #20
   b9068:	e7aa      	b.n	b8fc0 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b906a:	4625      	mov	r5, r4
   b906c:	e7e8      	b.n	b9040 <_ZN9TCPClient7connectEPKctm+0xc8>
   b906e:	bf00      	nop
   b9070:	000baa28 	.word	0x000baa28

000b9074 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9074:	b538      	push	{r3, r4, r5, lr}
   b9076:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9078:	681a      	ldr	r2, [r3, #0]
   b907a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b907c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b907e:	da10      	bge.n	b90a2 <_ZN9TCPClient9connectedEv+0x2e>
   b9080:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9084:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9088:	429a      	cmp	r2, r3
   b908a:	d10a      	bne.n	b90a2 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b908c:	6803      	ldr	r3, [r0, #0]
   b908e:	691b      	ldr	r3, [r3, #16]
   b9090:	4798      	blx	r3
        if (!rv) {
   b9092:	4604      	mov	r4, r0
   b9094:	b928      	cbnz	r0, b90a2 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9096:	682b      	ldr	r3, [r5, #0]
   b9098:	4628      	mov	r0, r5
   b909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b909c:	4798      	blx	r3
        rv = available();
   b909e:	4620      	mov	r0, r4
}
   b90a0:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b90a2:	2001      	movs	r0, #1
   b90a4:	e7fc      	b.n	b90a0 <_ZN9TCPClient9connectedEv+0x2c>

000b90a6 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b90a6:	b510      	push	{r4, lr}
   b90a8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90ae:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90b2:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b90b4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90b6:	d005      	beq.n	b90c4 <_ZN9TCPClient4peekEv+0x1e>
   b90b8:	6963      	ldr	r3, [r4, #20]
   b90ba:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b90be:	4413      	add	r3, r2
   b90c0:	7918      	ldrb	r0, [r3, #4]
}
   b90c2:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b90c4:	6803      	ldr	r3, [r0, #0]
   b90c6:	691b      	ldr	r3, [r3, #16]
   b90c8:	4798      	blx	r3
   b90ca:	2800      	cmp	r0, #0
   b90cc:	d1f4      	bne.n	b90b8 <_ZN9TCPClient4peekEv+0x12>
   b90ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b90d2:	e7f6      	b.n	b90c2 <_ZN9TCPClient4peekEv+0x1c>

000b90d4 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b90d6:	6943      	ldr	r3, [r0, #20]
   b90d8:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b90da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b90de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b90e2:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b90e4:	4605      	mov	r5, r0
   b90e6:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b90e8:	d016      	beq.n	b9118 <_ZN9TCPClient4readEPhj+0x44>
   b90ea:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b90ec:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b90f0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b90f4:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b90f6:	42bc      	cmp	r4, r7
   b90f8:	bf28      	it	cs
   b90fa:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b90fc:	3304      	adds	r3, #4
   b90fe:	4622      	mov	r2, r4
   b9100:	4419      	add	r1, r3
   b9102:	4630      	mov	r0, r6
   b9104:	f000 fdb4 	bl	b9c70 <memcpy>
   b9108:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b910a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b910e:	4423      	add	r3, r4
   b9110:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9114:	4620      	mov	r0, r4
   b9116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9118:	6803      	ldr	r3, [r0, #0]
   b911a:	691b      	ldr	r3, [r3, #16]
   b911c:	4798      	blx	r3
   b911e:	2800      	cmp	r0, #0
   b9120:	d1e3      	bne.n	b90ea <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9122:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9126:	e7f5      	b.n	b9114 <_ZN9TCPClient4readEPhj+0x40>

000b9128 <_ZN9TCPClient12flush_bufferEv>:
   b9128:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b912a:	2300      	movs	r3, #0
   b912c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9130:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9132:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9136:	4770      	bx	lr

000b9138 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b913c:	461f      	mov	r7, r3
    stop();
   b913e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9140:	460c      	mov	r4, r1
    stop();
   b9142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9144:	b08a      	sub	sp, #40	; 0x28
   b9146:	4605      	mov	r5, r0
   b9148:	4616      	mov	r6, r2
    stop();
   b914a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b914c:	7d23      	ldrb	r3, [r4, #20]
   b914e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9152:	2b04      	cmp	r3, #4
   b9154:	bf0c      	ite	eq
   b9156:	2002      	moveq	r0, #2
   b9158:	200a      	movne	r0, #10
   b915a:	2206      	movs	r2, #6
   b915c:	2101      	movs	r1, #1
   b915e:	f7fc fd07 	bl	b5b70 <sock_socket>
   b9162:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9166:	696b      	ldr	r3, [r5, #20]
   b9168:	681b      	ldr	r3, [r3, #0]
   b916a:	2b00      	cmp	r3, #0
   b916c:	da08      	bge.n	b9180 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b916e:	682b      	ldr	r3, [r5, #0]
   b9170:	4628      	mov	r0, r5
   b9172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9174:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9176:	4798      	blx	r3
}
   b9178:	4620      	mov	r0, r4
   b917a:	b00a      	add	sp, #40	; 0x28
   b917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9180:	4628      	mov	r0, r5
   b9182:	f7ff ffd1 	bl	b9128 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9186:	b1b7      	cbz	r7, b91b6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9188:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b918a:	a903      	add	r1, sp, #12
   b918c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b918e:	9303      	str	r3, [sp, #12]
   b9190:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9194:	f7fc fc94 	bl	b5ac0 <if_index_to_name>
   b9198:	2800      	cmp	r0, #0
   b919a:	d1e8      	bne.n	b916e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b919c:	6968      	ldr	r0, [r5, #20]
   b919e:	2306      	movs	r3, #6
   b91a0:	9300      	str	r3, [sp, #0]
   b91a2:	6800      	ldr	r0, [r0, #0]
   b91a4:	ab03      	add	r3, sp, #12
   b91a6:	f241 020b 	movw	r2, #4107	; 0x100b
   b91aa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b91ae:	f7fc fcb7 	bl	b5b20 <sock_setsockopt>
   b91b2:	2800      	cmp	r0, #0
   b91b4:	d1db      	bne.n	b916e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b91b6:	221c      	movs	r2, #28
   b91b8:	2100      	movs	r1, #0
   b91ba:	a803      	add	r0, sp, #12
   b91bc:	f000 fd80 	bl	b9cc0 <memset>
    if (ip.version() == 4) {
   b91c0:	7d23      	ldrb	r3, [r4, #20]
   b91c2:	2b04      	cmp	r3, #4
   b91c4:	d11d      	bne.n	b9202 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b91c6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b91ca:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b91cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b91d0:	f7fc fc8e 	bl	b5af0 <inet_htons>
   b91d4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b91d8:	6860      	ldr	r0, [r4, #4]
   b91da:	f7fc fc81 	bl	b5ae0 <inet_htonl>
   b91de:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b91e0:	696b      	ldr	r3, [r5, #20]
   b91e2:	221c      	movs	r2, #28
   b91e4:	6818      	ldr	r0, [r3, #0]
   b91e6:	a903      	add	r1, sp, #12
   b91e8:	f7fc fcaa 	bl	b5b40 <sock_connect>
   b91ec:	2800      	cmp	r0, #0
   b91ee:	d1be      	bne.n	b916e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b91f0:	3404      	adds	r4, #4
   b91f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b91f4:	696d      	ldr	r5, [r5, #20]
   b91f6:	358c      	adds	r5, #140	; 0x8c
   b91f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b91fa:	6823      	ldr	r3, [r4, #0]
   b91fc:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b91fe:	2401      	movs	r4, #1
   b9200:	e7ba      	b.n	b9178 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9202:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9206:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9208:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b920c:	f7fc fc70 	bl	b5af0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9210:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9212:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9216:	1d23      	adds	r3, r4, #4
   b9218:	f104 0714 	add.w	r7, r4, #20
   b921c:	6818      	ldr	r0, [r3, #0]
   b921e:	6859      	ldr	r1, [r3, #4]
   b9220:	4632      	mov	r2, r6
   b9222:	c203      	stmia	r2!, {r0, r1}
   b9224:	3308      	adds	r3, #8
   b9226:	42bb      	cmp	r3, r7
   b9228:	4616      	mov	r6, r2
   b922a:	d1f7      	bne.n	b921c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b922c:	e7d8      	b.n	b91e0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9230 <_ZN9TCPClient9availableEv>:
{
   b9230:	b530      	push	{r4, r5, lr}
   b9232:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9234:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9238:	b08b      	sub	sp, #44	; 0x2c
   b923a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b923c:	b12b      	cbz	r3, b924a <_ZN9TCPClient9availableEv+0x1a>
   b923e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9242:	429a      	cmp	r2, r3
   b9244:	d101      	bne.n	b924a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9246:	f7ff ff6f 	bl	b9128 <_ZN9TCPClient12flush_bufferEv>
   b924a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b924c:	6808      	ldr	r0, [r1, #0]
   b924e:	2800      	cmp	r0, #0
   b9250:	db18      	blt.n	b9284 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9252:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9256:	2d7f      	cmp	r5, #127	; 0x7f
   b9258:	d814      	bhi.n	b9284 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b925a:	3104      	adds	r1, #4
   b925c:	2308      	movs	r3, #8
   b925e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9262:	4429      	add	r1, r5
   b9264:	f7fc fc74 	bl	b5b50 <sock_recv>
            if (ret > 0) {
   b9268:	2800      	cmp	r0, #0
   b926a:	dd13      	ble.n	b9294 <_ZN9TCPClient9availableEv+0x64>
   b926c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b926e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9272:	b90a      	cbnz	r2, b9278 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9274:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9278:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b927a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b927e:	4410      	add	r0, r2
   b9280:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9284:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9286:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b928a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b928e:	1ac0      	subs	r0, r0, r3
   b9290:	b00b      	add	sp, #44	; 0x2c
   b9292:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9294:	f7fc fe30 	bl	b5ef8 <__errno>
   b9298:	6803      	ldr	r3, [r0, #0]
   b929a:	2b0b      	cmp	r3, #11
   b929c:	d0f2      	beq.n	b9284 <_ZN9TCPClient9availableEv+0x54>
   b929e:	f7fc fe2b 	bl	b5ef8 <__errno>
   b92a2:	6803      	ldr	r3, [r0, #0]
   b92a4:	2b0b      	cmp	r3, #11
   b92a6:	d0ed      	beq.n	b9284 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b92a8:	2320      	movs	r3, #32
   b92aa:	2500      	movs	r5, #0
   b92ac:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b92b0:	f7fc fe22 	bl	b5ef8 <__errno>
   b92b4:	6803      	ldr	r3, [r0, #0]
   b92b6:	9301      	str	r3, [sp, #4]
   b92b8:	4b08      	ldr	r3, [pc, #32]	; (b92dc <_ZN9TCPClient9availableEv+0xac>)
   b92ba:	4909      	ldr	r1, [pc, #36]	; (b92e0 <_ZN9TCPClient9availableEv+0xb0>)
   b92bc:	9300      	str	r3, [sp, #0]
   b92be:	aa02      	add	r2, sp, #8
   b92c0:	462b      	mov	r3, r5
   b92c2:	2032      	movs	r0, #50	; 0x32
   b92c4:	f7fc fd4c 	bl	b5d60 <log_message>
                    sock_close(d_->sock);
   b92c8:	6963      	ldr	r3, [r4, #20]
   b92ca:	6818      	ldr	r0, [r3, #0]
   b92cc:	f7fc fc30 	bl	b5b30 <sock_close>
   b92d0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b92d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92d6:	601a      	str	r2, [r3, #0]
   b92d8:	e7d4      	b.n	b9284 <_ZN9TCPClient9availableEv+0x54>
   b92da:	bf00      	nop
   b92dc:	000baa83 	.word	0x000baa83
   b92e0:	000baa7c 	.word	0x000baa7c

000b92e4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b92e4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b92e6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b92e8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b92ea:	6818      	ldr	r0, [r3, #0]
   b92ec:	2800      	cmp	r0, #0
   b92ee:	db01      	blt.n	b92f4 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b92f0:	f7fc fc1e 	bl	b5b30 <sock_close>
   b92f4:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b92f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b92fa:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b92fc:	6960      	ldr	r0, [r4, #20]
   b92fe:	2211      	movs	r2, #17
   b9300:	2100      	movs	r1, #0
   b9302:	308c      	adds	r0, #140	; 0x8c
   b9304:	f000 fcdc 	bl	b9cc0 <memset>
    flush_buffer();
   b9308:	4620      	mov	r0, r4
}
   b930a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b930e:	f7ff bf0b 	b.w	b9128 <_ZN9TCPClient12flush_bufferEv>

000b9312 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9312:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9314:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9316:	4604      	mov	r4, r0
          total(0) {
   b9318:	6001      	str	r1, [r0, #0]
   b931a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b931e:	3088      	adds	r0, #136	; 0x88
   b9320:	f7ff f96a 	bl	b85f8 <_ZN9IPAddressC1Ev>
}
   b9324:	4620      	mov	r0, r4
   b9326:	bd10      	pop	{r4, pc}

000b9328 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9328:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b932a:	2300      	movs	r3, #0
   b932c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9330:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9334:	4a0e      	ldr	r2, [pc, #56]	; (b9370 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9336:	6103      	str	r3, [r0, #16]
   b9338:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b933a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b933c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b933e:	20ac      	movs	r0, #172	; 0xac
   b9340:	9101      	str	r1, [sp, #4]
   b9342:	f7fa fea6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b9346:	1e05      	subs	r5, r0, #0
   b9348:	f105 060c 	add.w	r6, r5, #12
   b934c:	d008      	beq.n	b9360 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b934e:	2301      	movs	r3, #1
   b9350:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9354:	4b07      	ldr	r3, [pc, #28]	; (b9374 <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9356:	9901      	ldr	r1, [sp, #4]
   b9358:	602b      	str	r3, [r5, #0]
   b935a:	4630      	mov	r0, r6
   b935c:	f7ff ffd9 	bl	b9312 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9360:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9362:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9366:	f7ff fedf 	bl	b9128 <_ZN9TCPClient12flush_bufferEv>
}
   b936a:	b002      	add	sp, #8
   b936c:	bd70      	pop	{r4, r5, r6, pc}
   b936e:	bf00      	nop
   b9370:	000baab8 	.word	0x000baab8
   b9374:	000baa9c 	.word	0x000baa9c

000b9378 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9378:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b937a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b937e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b9380:	f7ff ffd2 	bl	b9328 <_ZN9TCPClientC1Ei>
}
   b9384:	4620      	mov	r0, r4
   b9386:	bd10      	pop	{r4, pc}

000b9388 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b9388:	b510      	push	{r4, lr}
   b938a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b938c:	6800      	ldr	r0, [r0, #0]
   b938e:	2800      	cmp	r0, #0
   b9390:	db01      	blt.n	b9396 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b9392:	f7fc fbcd 	bl	b5b30 <sock_close>
    }
}
   b9396:	4620      	mov	r0, r4
   b9398:	bd10      	pop	{r4, pc}

000b939a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b939a:	300c      	adds	r0, #12
   b939c:	f7ff bff4 	b.w	b9388 <_ZN9TCPClient4DataD1Ev>

000b93a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b93a0:	4b02      	ldr	r3, [pc, #8]	; (b93ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b93a2:	681a      	ldr	r2, [r3, #0]
   b93a4:	4b02      	ldr	r3, [pc, #8]	; (b93b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b93a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b93a8:	4770      	bx	lr
   b93aa:	bf00      	nop
   b93ac:	2003e278 	.word	0x2003e278
   b93b0:	2003e6fc 	.word	0x2003e6fc

000b93b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b93b4:	4770      	bx	lr

000b93b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b93b6:	7441      	strb	r1, [r0, #17]
}
   b93b8:	4770      	bx	lr

000b93ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b93ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b93bc:	7c00      	ldrb	r0, [r0, #16]
   b93be:	f7fc fc4f 	bl	b5c60 <hal_usart_available_data_for_write>
}
   b93c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93c6:	bd08      	pop	{r3, pc}

000b93c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b93c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b93ca:	7c00      	ldrb	r0, [r0, #16]
   b93cc:	f7fc fc20 	bl	b5c10 <hal_usart_available>
}
   b93d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b93d4:	bd08      	pop	{r3, pc}

000b93d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b93d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b93d8:	7c00      	ldrb	r0, [r0, #16]
   b93da:	f7fc fc29 	bl	b5c30 <hal_usart_peek>
}
   b93de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93e2:	bd08      	pop	{r3, pc}

000b93e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b93e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b93e6:	7c00      	ldrb	r0, [r0, #16]
   b93e8:	f7fc fc1a 	bl	b5c20 <hal_usart_read>
}
   b93ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b93f0:	bd08      	pop	{r3, pc}

000b93f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b93f2:	7c00      	ldrb	r0, [r0, #16]
   b93f4:	f7fc bc24 	b.w	b5c40 <hal_usart_flush>

000b93f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b93f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93fa:	7c45      	ldrb	r5, [r0, #17]
{
   b93fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b93fe:	b12d      	cbz	r5, b940c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b9400:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b9402:	b003      	add	sp, #12
   b9404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b9408:	f7fc bbfa 	b.w	b5c00 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b940c:	7c00      	ldrb	r0, [r0, #16]
   b940e:	9101      	str	r1, [sp, #4]
   b9410:	f7fc fc26 	bl	b5c60 <hal_usart_available_data_for_write>
   b9414:	2800      	cmp	r0, #0
   b9416:	9901      	ldr	r1, [sp, #4]
   b9418:	dcf2      	bgt.n	b9400 <_ZN11USARTSerial5writeEh+0x8>
}
   b941a:	4628      	mov	r0, r5
   b941c:	b003      	add	sp, #12
   b941e:	bd30      	pop	{r4, r5, pc}

000b9420 <_ZN11USARTSerialD0Ev>:
   b9420:	b510      	push	{r4, lr}
   b9422:	2114      	movs	r1, #20
   b9424:	4604      	mov	r4, r0
   b9426:	f7fa fe38 	bl	b409a <_ZdlPvj>
   b942a:	4620      	mov	r0, r4
   b942c:	bd10      	pop	{r4, pc}
	...

000b9430 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b9430:	b510      	push	{r4, lr}
   b9432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9436:	4604      	mov	r4, r0
   b9438:	4608      	mov	r0, r1
   b943a:	4611      	mov	r1, r2
   b943c:	2200      	movs	r2, #0
   b943e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b9442:	4b04      	ldr	r3, [pc, #16]	; (b9454 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b9444:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b9446:	2301      	movs	r3, #1
  _serial = serial;
   b9448:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b944a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b944c:	f7fc fc18 	bl	b5c80 <hal_usart_init_ex>
}
   b9450:	4620      	mov	r0, r4
   b9452:	bd10      	pop	{r4, pc}
   b9454:	000bab20 	.word	0x000bab20

000b9458 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b9458:	7c00      	ldrb	r0, [r0, #16]
   b945a:	2300      	movs	r3, #0
   b945c:	f7fc bc08 	b.w	b5c70 <hal_usart_begin_config>

000b9460 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b9460:	2200      	movs	r2, #0
   b9462:	f7ff bff9 	b.w	b9458 <_ZN11USARTSerial5beginEmm>

000b9466 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b9466:	7441      	strb	r1, [r0, #17]
}
   b9468:	4770      	bx	lr

000b946a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b946a:	4770      	bx	lr

000b946c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b946c:	4770      	bx	lr

000b946e <_ZN9USBSerial4readEv>:
{
   b946e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b9470:	2100      	movs	r1, #0
   b9472:	7c00      	ldrb	r0, [r0, #16]
   b9474:	f7fc fc2c 	bl	b5cd0 <HAL_USB_USART_Receive_Data>
}
   b9478:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b947c:	bd08      	pop	{r3, pc}

000b947e <_ZN9USBSerial4peekEv>:
{
   b947e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b9480:	2101      	movs	r1, #1
   b9482:	7c00      	ldrb	r0, [r0, #16]
   b9484:	f7fc fc24 	bl	b5cd0 <HAL_USB_USART_Receive_Data>
}
   b9488:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b948c:	bd08      	pop	{r3, pc}

000b948e <_ZN9USBSerial17availableForWriteEv>:
{
   b948e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b9490:	7c00      	ldrb	r0, [r0, #16]
   b9492:	f7fc fc15 	bl	b5cc0 <HAL_USB_USART_Available_Data_For_Write>
}
   b9496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b949a:	bd08      	pop	{r3, pc}

000b949c <_ZN9USBSerial9availableEv>:
{
   b949c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b949e:	7c00      	ldrb	r0, [r0, #16]
   b94a0:	f7fc fc06 	bl	b5cb0 <HAL_USB_USART_Available_Data>
}
   b94a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b94a8:	bd08      	pop	{r3, pc}

000b94aa <_ZN9USBSerial5writeEh>:
{
   b94aa:	b513      	push	{r0, r1, r4, lr}
   b94ac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b94ae:	7c00      	ldrb	r0, [r0, #16]
{
   b94b0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b94b2:	f7fc fc05 	bl	b5cc0 <HAL_USB_USART_Available_Data_For_Write>
   b94b6:	2800      	cmp	r0, #0
   b94b8:	9901      	ldr	r1, [sp, #4]
   b94ba:	dc01      	bgt.n	b94c0 <_ZN9USBSerial5writeEh+0x16>
   b94bc:	7c60      	ldrb	r0, [r4, #17]
   b94be:	b120      	cbz	r0, b94ca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b94c0:	7c20      	ldrb	r0, [r4, #16]
   b94c2:	f7fc fc0d 	bl	b5ce0 <HAL_USB_USART_Send_Data>
   b94c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b94ca:	b002      	add	sp, #8
   b94cc:	bd10      	pop	{r4, pc}

000b94ce <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b94ce:	7c00      	ldrb	r0, [r0, #16]
   b94d0:	f7fc bc0e 	b.w	b5cf0 <HAL_USB_USART_Flush_Data>

000b94d4 <_ZN9USBSerialD0Ev>:
   b94d4:	b510      	push	{r4, lr}
   b94d6:	2114      	movs	r1, #20
   b94d8:	4604      	mov	r4, r0
   b94da:	f7fa fdde 	bl	b409a <_ZdlPvj>
   b94de:	4620      	mov	r0, r4
   b94e0:	bd10      	pop	{r4, pc}
	...

000b94e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b94e4:	b510      	push	{r4, lr}
   b94e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b94ea:	4604      	mov	r4, r0
   b94ec:	4608      	mov	r0, r1
   b94ee:	2100      	movs	r1, #0
   b94f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b94f4:	4b04      	ldr	r3, [pc, #16]	; (b9508 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b94f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b94f8:	2301      	movs	r3, #1
  _serial = serial;
   b94fa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b94fc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b94fe:	4611      	mov	r1, r2
   b9500:	f7fc fbc6 	bl	b5c90 <HAL_USB_USART_Init>
}
   b9504:	4620      	mov	r0, r4
   b9506:	bd10      	pop	{r4, pc}
   b9508:	000bab50 	.word	0x000bab50

000b950c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b950c:	7c00      	ldrb	r0, [r0, #16]
   b950e:	2200      	movs	r2, #0
   b9510:	f7fc bbc6 	b.w	b5ca0 <HAL_USB_USART_Begin>

000b9514 <_Z19acquireSerialBufferv>:
{
   b9514:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b9516:	2214      	movs	r2, #20
{
   b9518:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b951a:	2100      	movs	r1, #0
   b951c:	f000 fbd0 	bl	b9cc0 <memset>
}
   b9520:	4620      	mov	r0, r4
   b9522:	bd10      	pop	{r4, pc}

000b9524 <_Z16_fetch_usbserialv>:
{
   b9524:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9526:	4c0f      	ldr	r4, [pc, #60]	; (b9564 <_Z16_fetch_usbserialv+0x40>)
{
   b9528:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b952a:	a803      	add	r0, sp, #12
   b952c:	f7ff fff2 	bl	b9514 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b9530:	7821      	ldrb	r1, [r4, #0]
   b9532:	f3bf 8f5b 	dmb	ish
   b9536:	f011 0101 	ands.w	r1, r1, #1
   b953a:	d10f      	bne.n	b955c <_Z16_fetch_usbserialv+0x38>
   b953c:	4620      	mov	r0, r4
   b953e:	9101      	str	r1, [sp, #4]
   b9540:	f7fa fdba 	bl	b40b8 <__cxa_guard_acquire>
   b9544:	9901      	ldr	r1, [sp, #4]
   b9546:	b148      	cbz	r0, b955c <_Z16_fetch_usbserialv+0x38>
   b9548:	aa03      	add	r2, sp, #12
   b954a:	4807      	ldr	r0, [pc, #28]	; (b9568 <_Z16_fetch_usbserialv+0x44>)
   b954c:	f7ff ffca 	bl	b94e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b9550:	4620      	mov	r0, r4
   b9552:	f7fa fdb6 	bl	b40c2 <__cxa_guard_release>
   b9556:	4805      	ldr	r0, [pc, #20]	; (b956c <_Z16_fetch_usbserialv+0x48>)
   b9558:	f000 fb6c 	bl	b9c34 <atexit>
	return _usbserial;
}
   b955c:	4802      	ldr	r0, [pc, #8]	; (b9568 <_Z16_fetch_usbserialv+0x44>)
   b955e:	b008      	add	sp, #32
   b9560:	bd10      	pop	{r4, pc}
   b9562:	bf00      	nop
   b9564:	2003e700 	.word	0x2003e700
   b9568:	2003e704 	.word	0x2003e704
   b956c:	000b946b 	.word	0x000b946b

000b9570 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b9570:	2200      	movs	r2, #0
   b9572:	6840      	ldr	r0, [r0, #4]
   b9574:	4611      	mov	r1, r2
   b9576:	f7fc bc47 	b.w	b5e08 <network_ready>

000b957a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b957a:	2200      	movs	r2, #0
   b957c:	6840      	ldr	r0, [r0, #4]
   b957e:	4611      	mov	r1, r2
   b9580:	f7fc bc62 	b.w	b5e48 <network_listening>

000b9584 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9584:	2200      	movs	r2, #0
   b9586:	6840      	ldr	r0, [r0, #4]
   b9588:	4611      	mov	r1, r2
   b958a:	f7fc bc6d 	b.w	b5e68 <network_get_listen_timeout>

000b958e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b958e:	6840      	ldr	r0, [r0, #4]
   b9590:	2200      	movs	r2, #0
   b9592:	f7fc bc61 	b.w	b5e58 <network_set_listen_timeout>

000b9596 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9596:	6840      	ldr	r0, [r0, #4]
   b9598:	2200      	movs	r2, #0
   b959a:	f081 0101 	eor.w	r1, r1, #1
   b959e:	f7fc bc4b 	b.w	b5e38 <network_listen>

000b95a2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b95a2:	2300      	movs	r3, #0
   b95a4:	6840      	ldr	r0, [r0, #4]
   b95a6:	461a      	mov	r2, r3
   b95a8:	4619      	mov	r1, r3
   b95aa:	f7fc bc3d 	b.w	b5e28 <network_off>

000b95ae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b95ae:	2300      	movs	r3, #0
   b95b0:	6840      	ldr	r0, [r0, #4]
   b95b2:	461a      	mov	r2, r3
   b95b4:	4619      	mov	r1, r3
   b95b6:	f7fc bc2f 	b.w	b5e18 <network_on>

000b95ba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b95ba:	2200      	movs	r2, #0
   b95bc:	6840      	ldr	r0, [r0, #4]
   b95be:	4611      	mov	r1, r2
   b95c0:	f7fc bc12 	b.w	b5de8 <network_connecting>

000b95c4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b95c4:	6840      	ldr	r0, [r0, #4]
   b95c6:	2200      	movs	r2, #0
   b95c8:	2102      	movs	r1, #2
   b95ca:	f7fc bc15 	b.w	b5df8 <network_disconnect>

000b95ce <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b95ce:	2300      	movs	r3, #0
   b95d0:	6840      	ldr	r0, [r0, #4]
   b95d2:	461a      	mov	r2, r3
   b95d4:	f7fc bc00 	b.w	b5dd8 <network_connect>

000b95d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b95d8:	4b02      	ldr	r3, [pc, #8]	; (b95e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b95da:	2204      	movs	r2, #4
   b95dc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b95de:	4a02      	ldr	r2, [pc, #8]	; (b95e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b95e0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b95e2:	4770      	bx	lr
   b95e4:	2003e718 	.word	0x2003e718
   b95e8:	000bab80 	.word	0x000bab80

000b95ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b95ec:	b510      	push	{r4, lr}
   b95ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b95f0:	f000 fbae 	bl	b9d50 <strlen>
   b95f4:	3801      	subs	r0, #1
   b95f6:	1823      	adds	r3, r4, r0
   b95f8:	4620      	mov	r0, r4
	while(i<j){
   b95fa:	4283      	cmp	r3, r0
   b95fc:	d906      	bls.n	b960c <_Z11str_reversePc+0x20>
		c = *i;
   b95fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b9600:	7819      	ldrb	r1, [r3, #0]
   b9602:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b9606:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b960a:	e7f6      	b.n	b95fa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b960c:	bd10      	pop	{r4, pc}

000b960e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b960e:	b570      	push	{r4, r5, r6, lr}
   b9610:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b9612:	1e91      	subs	r1, r2, #2
   b9614:	2922      	cmp	r1, #34	; 0x22
   b9616:	d81d      	bhi.n	b9654 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b9618:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b961a:	b930      	cbnz	r0, b962a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b961c:	4423      	add	r3, r4
            *ptr++ = '0';
   b961e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b9620:	429d      	cmp	r5, r3
   b9622:	d210      	bcs.n	b9646 <ultoa+0x38>
            *ptr++ = '0';
   b9624:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b9628:	e7fa      	b.n	b9620 <ultoa+0x12>
            result.quot = a/radix;
   b962a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b962e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b9632:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b9634:	2809      	cmp	r0, #9
                *ptr += '0';
   b9636:	bf94      	ite	ls
   b9638:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b963a:	3157      	addhi	r1, #87	; 0x57
   b963c:	b2c9      	uxtb	r1, r1
   b963e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b9642:	4630      	mov	r0, r6
	while(a){
   b9644:	e7e9      	b.n	b961a <ultoa+0xc>

	*ptr = '\0';
   b9646:	2300      	movs	r3, #0
	str_reverse(buffer);
   b9648:	4620      	mov	r0, r4
	*ptr = '\0';
   b964a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b964c:	f7ff ffce 	bl	b95ec <_Z11str_reversePc>
	return buffer;
   b9650:	4620      	mov	r0, r4
}
   b9652:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b9654:	2000      	movs	r0, #0
   b9656:	e7fc      	b.n	b9652 <ultoa+0x44>

000b9658 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b9658:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b965a:	2301      	movs	r3, #1
   b965c:	f7ff ffd7 	bl	b960e <ultoa>
}
   b9660:	bd08      	pop	{r3, pc}
	...

000b9664 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b9664:	4b01      	ldr	r3, [pc, #4]	; (b966c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b9666:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b9668:	4770      	bx	lr
   b966a:	bf00      	nop
   b966c:	2003e27c 	.word	0x2003e27c

000b9670 <serialEventRun>:
{
   b9670:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b9672:	4b0b      	ldr	r3, [pc, #44]	; (b96a0 <serialEventRun+0x30>)
   b9674:	b143      	cbz	r3, b9688 <serialEventRun+0x18>
   b9676:	f7ff ff55 	bl	b9524 <_Z16_fetch_usbserialv>
   b967a:	6803      	ldr	r3, [r0, #0]
   b967c:	691b      	ldr	r3, [r3, #16]
   b967e:	4798      	blx	r3
   b9680:	2800      	cmp	r0, #0
   b9682:	dd01      	ble.n	b9688 <serialEventRun+0x18>
        serialEvent();
   b9684:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b9688:	4b06      	ldr	r3, [pc, #24]	; (b96a4 <serialEventRun+0x34>)
   b968a:	b143      	cbz	r3, b969e <serialEventRun+0x2e>
   b968c:	f000 f996 	bl	b99bc <_Z22__fetch_global_Serial1v>
   b9690:	6803      	ldr	r3, [r0, #0]
   b9692:	691b      	ldr	r3, [r3, #16]
   b9694:	4798      	blx	r3
   b9696:	2800      	cmp	r0, #0
   b9698:	dd01      	ble.n	b969e <serialEventRun+0x2e>
        serialEvent1();
   b969a:	f3af 8000 	nop.w
}
   b969e:	bd08      	pop	{r3, pc}
	...

000b96a8 <_post_loop>:
{
   b96a8:	b508      	push	{r3, lr}
	serialEventRun();
   b96aa:	f7ff ffe1 	bl	b9670 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b96ae:	f7fc f967 	bl	b5980 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b96b2:	4b01      	ldr	r3, [pc, #4]	; (b96b8 <_post_loop+0x10>)
   b96b4:	6018      	str	r0, [r3, #0]
}
   b96b6:	bd08      	pop	{r3, pc}
   b96b8:	2003e728 	.word	0x2003e728

000b96bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b96bc:	4805      	ldr	r0, [pc, #20]	; (b96d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b96be:	4a06      	ldr	r2, [pc, #24]	; (b96d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b96c0:	4906      	ldr	r1, [pc, #24]	; (b96dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b96c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b96c4:	1a12      	subs	r2, r2, r0
   b96c6:	f000 fad3 	bl	b9c70 <memcpy>
    __backup_sram_signature = signature;
   b96ca:	4b05      	ldr	r3, [pc, #20]	; (b96e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b96cc:	4a05      	ldr	r2, [pc, #20]	; (b96e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b96ce:	601a      	str	r2, [r3, #0]
}
   b96d0:	bd08      	pop	{r3, pc}
   b96d2:	bf00      	nop
   b96d4:	2003f400 	.word	0x2003f400
   b96d8:	2003f404 	.word	0x2003f404
   b96dc:	000bae64 	.word	0x000bae64
   b96e0:	2003f400 	.word	0x2003f400
   b96e4:	9a271c1e 	.word	0x9a271c1e

000b96e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b96e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b96ea:	2300      	movs	r3, #0
   b96ec:	9300      	str	r3, [sp, #0]
   b96ee:	461a      	mov	r2, r3
   b96f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b96f4:	f7fc fb56 	bl	b5da4 <system_ctrl_set_result>
}
   b96f8:	b003      	add	sp, #12
   b96fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9700 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b9700:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b9702:	8843      	ldrh	r3, [r0, #2]
   b9704:	2b0a      	cmp	r3, #10
   b9706:	d008      	beq.n	b971a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b9708:	2b50      	cmp	r3, #80	; 0x50
   b970a:	d10b      	bne.n	b9724 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b970c:	4b09      	ldr	r3, [pc, #36]	; (b9734 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b970e:	681b      	ldr	r3, [r3, #0]
   b9710:	b14b      	cbz	r3, b9726 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b9712:	b003      	add	sp, #12
   b9714:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b9718:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b971a:	f7ff ffe5 	bl	b96e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b971e:	b003      	add	sp, #12
   b9720:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b9724:	2300      	movs	r3, #0
   b9726:	9300      	str	r3, [sp, #0]
   b9728:	461a      	mov	r2, r3
   b972a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b972e:	f7fc fb39 	bl	b5da4 <system_ctrl_set_result>
}
   b9732:	e7f4      	b.n	b971e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b9734:	2003e724 	.word	0x2003e724

000b9738 <module_user_init_hook>:
{
   b9738:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b973a:	4812      	ldr	r0, [pc, #72]	; (b9784 <module_user_init_hook+0x4c>)
   b973c:	2100      	movs	r1, #0
   b973e:	f7fc fbeb 	bl	b5f18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b9742:	4b11      	ldr	r3, [pc, #68]	; (b9788 <module_user_init_hook+0x50>)
   b9744:	681a      	ldr	r2, [r3, #0]
   b9746:	4b11      	ldr	r3, [pc, #68]	; (b978c <module_user_init_hook+0x54>)
   b9748:	429a      	cmp	r2, r3
   b974a:	4b11      	ldr	r3, [pc, #68]	; (b9790 <module_user_init_hook+0x58>)
   b974c:	bf0c      	ite	eq
   b974e:	2201      	moveq	r2, #1
   b9750:	2200      	movne	r2, #0
   b9752:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b9754:	d001      	beq.n	b975a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b9756:	f7ff ffb1 	bl	b96bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b975a:	f7fc f901 	bl	b5960 <HAL_RNG_GetRandomNumber>
   b975e:	4604      	mov	r4, r0
    srand(seed);
   b9760:	f000 fab6 	bl	b9cd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b9764:	4b0b      	ldr	r3, [pc, #44]	; (b9794 <module_user_init_hook+0x5c>)
   b9766:	b113      	cbz	r3, b976e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b9768:	4620      	mov	r0, r4
   b976a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b976e:	2100      	movs	r1, #0
   b9770:	4808      	ldr	r0, [pc, #32]	; (b9794 <module_user_init_hook+0x5c>)
   b9772:	f7fc fb29 	bl	b5dc8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b9776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b977a:	4807      	ldr	r0, [pc, #28]	; (b9798 <module_user_init_hook+0x60>)
   b977c:	2100      	movs	r1, #0
   b977e:	f7fc bb07 	b.w	b5d90 <system_ctrl_set_app_request_handler>
   b9782:	bf00      	nop
   b9784:	000b9665 	.word	0x000b9665
   b9788:	2003f400 	.word	0x2003f400
   b978c:	9a271c1e 	.word	0x9a271c1e
   b9790:	2003e720 	.word	0x2003e720
   b9794:	00000000 	.word	0x00000000
   b9798:	000b9701 	.word	0x000b9701

000b979c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b979c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b979e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b97a0:	d902      	bls.n	b97a8 <pinAvailable+0xc>
    return false;
   b97a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b97a4:	b002      	add	sp, #8
   b97a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b97a8:	f1a0 030b 	sub.w	r3, r0, #11
   b97ac:	2b02      	cmp	r3, #2
   b97ae:	d81a      	bhi.n	b97e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b97b0:	4c17      	ldr	r4, [pc, #92]	; (b9810 <pinAvailable+0x74>)
   b97b2:	7821      	ldrb	r1, [r4, #0]
   b97b4:	f3bf 8f5b 	dmb	ish
   b97b8:	f011 0101 	ands.w	r1, r1, #1
   b97bc:	d10b      	bne.n	b97d6 <pinAvailable+0x3a>
   b97be:	4620      	mov	r0, r4
   b97c0:	9101      	str	r1, [sp, #4]
   b97c2:	f7fa fc79 	bl	b40b8 <__cxa_guard_acquire>
   b97c6:	9901      	ldr	r1, [sp, #4]
   b97c8:	b128      	cbz	r0, b97d6 <pinAvailable+0x3a>
   b97ca:	4812      	ldr	r0, [pc, #72]	; (b9814 <pinAvailable+0x78>)
   b97cc:	f7ff f8f2 	bl	b89b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b97d0:	4620      	mov	r0, r4
   b97d2:	f7fa fc76 	bl	b40c2 <__cxa_guard_release>
   b97d6:	4b0f      	ldr	r3, [pc, #60]	; (b9814 <pinAvailable+0x78>)
   b97d8:	7818      	ldrb	r0, [r3, #0]
   b97da:	f7fc f9e9 	bl	b5bb0 <hal_spi_is_enabled>
   b97de:	2800      	cmp	r0, #0
   b97e0:	d1df      	bne.n	b97a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b97e2:	2001      	movs	r0, #1
   b97e4:	e7de      	b.n	b97a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b97e6:	2801      	cmp	r0, #1
   b97e8:	d809      	bhi.n	b97fe <pinAvailable+0x62>
   b97ea:	f000 f8a7 	bl	b993c <_Z19__fetch_global_Wirev>
   b97ee:	2100      	movs	r1, #0
   b97f0:	7c00      	ldrb	r0, [r0, #16]
   b97f2:	f7fc f94d 	bl	b5a90 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b97f6:	f080 0001 	eor.w	r0, r0, #1
   b97fa:	b2c0      	uxtb	r0, r0
   b97fc:	e7d2      	b.n	b97a4 <pinAvailable+0x8>
   b97fe:	3809      	subs	r0, #9
   b9800:	2801      	cmp	r0, #1
   b9802:	d8ee      	bhi.n	b97e2 <pinAvailable+0x46>
   b9804:	f000 f8da 	bl	b99bc <_Z22__fetch_global_Serial1v>
   b9808:	7c00      	ldrb	r0, [r0, #16]
   b980a:	f7fc fa21 	bl	b5c50 <hal_usart_is_enabled>
   b980e:	e7f2      	b.n	b97f6 <pinAvailable+0x5a>
   b9810:	2003e2e4 	.word	0x2003e2e4
   b9814:	2003e2e8 	.word	0x2003e2e8

000b9818 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9818:	2823      	cmp	r0, #35	; 0x23
{
   b981a:	b538      	push	{r3, r4, r5, lr}
   b981c:	4604      	mov	r4, r0
   b981e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b9820:	d80a      	bhi.n	b9838 <pinMode+0x20>
   b9822:	29ff      	cmp	r1, #255	; 0xff
   b9824:	d008      	beq.n	b9838 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b9826:	f7ff ffb9 	bl	b979c <pinAvailable>
   b982a:	b128      	cbz	r0, b9838 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b982c:	4629      	mov	r1, r5
   b982e:	4620      	mov	r0, r4
}
   b9830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b9834:	f7fc b8b4 	b.w	b59a0 <HAL_Pin_Mode>
}
   b9838:	bd38      	pop	{r3, r4, r5, pc}

000b983a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b983a:	b538      	push	{r3, r4, r5, lr}
   b983c:	4604      	mov	r4, r0
   b983e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9840:	f7fc f8b6 	bl	b59b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b9844:	28ff      	cmp	r0, #255	; 0xff
   b9846:	d010      	beq.n	b986a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b9848:	2806      	cmp	r0, #6
   b984a:	d804      	bhi.n	b9856 <digitalWrite+0x1c>
   b984c:	234d      	movs	r3, #77	; 0x4d
   b984e:	fa23 f000 	lsr.w	r0, r3, r0
   b9852:	07c3      	lsls	r3, r0, #31
   b9854:	d409      	bmi.n	b986a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b9856:	4620      	mov	r0, r4
   b9858:	f7ff ffa0 	bl	b979c <pinAvailable>
   b985c:	b128      	cbz	r0, b986a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b985e:	4629      	mov	r1, r5
   b9860:	4620      	mov	r0, r4
}
   b9862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b9866:	f7fc b8ab 	b.w	b59c0 <HAL_GPIO_Write>
}
   b986a:	bd38      	pop	{r3, r4, r5, pc}

000b986c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b986c:	b510      	push	{r4, lr}
   b986e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b9870:	f7fc f89e 	bl	b59b0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b9874:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b9876:	b2db      	uxtb	r3, r3
   b9878:	2b01      	cmp	r3, #1
   b987a:	d908      	bls.n	b988e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b987c:	4620      	mov	r0, r4
   b987e:	f7ff ff8d 	bl	b979c <pinAvailable>
   b9882:	b120      	cbz	r0, b988e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b9884:	4620      	mov	r0, r4
}
   b9886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b988a:	f7fc b8a1 	b.w	b59d0 <HAL_GPIO_Read>
}
   b988e:	2000      	movs	r0, #0
   b9890:	bd10      	pop	{r4, pc}

000b9892 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b9892:	280d      	cmp	r0, #13
{
   b9894:	b510      	push	{r4, lr}
   b9896:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b9898:	bf9c      	itt	ls
   b989a:	340e      	addls	r4, #14
   b989c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b989e:	4620      	mov	r0, r4
   b98a0:	f7ff ff7c 	bl	b979c <pinAvailable>
   b98a4:	b150      	cbz	r0, b98bc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b98a6:	2103      	movs	r1, #3
   b98a8:	4620      	mov	r0, r4
   b98aa:	f7fc f871 	bl	b5990 <HAL_Validate_Pin_Function>
   b98ae:	2803      	cmp	r0, #3
   b98b0:	d104      	bne.n	b98bc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b98b2:	4620      	mov	r0, r4
}
   b98b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b98b8:	f7fc b89a 	b.w	b59f0 <hal_adc_read>
}
   b98bc:	2000      	movs	r0, #0
   b98be:	bd10      	pop	{r4, pc}

000b98c0 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b98c0:	b538      	push	{r3, r4, r5, lr}
   b98c2:	4604      	mov	r4, r0
   b98c4:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b98c6:	f7ff ff69 	bl	b979c <pinAvailable>
   b98ca:	b1f0      	cbz	r0, b990a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b98cc:	2104      	movs	r1, #4
   b98ce:	4620      	mov	r0, r4
   b98d0:	f7fc f85e 	bl	b5990 <HAL_Validate_Pin_Function>
   b98d4:	2804      	cmp	r0, #4
   b98d6:	d105      	bne.n	b98e4 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b98d8:	b2a9      	uxth	r1, r5
   b98da:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b98dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b98e0:	f7fc b87e 	b.w	b59e0 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b98e4:	2102      	movs	r1, #2
   b98e6:	4620      	mov	r0, r4
   b98e8:	f7fc f852 	bl	b5990 <HAL_Validate_Pin_Function>
   b98ec:	2802      	cmp	r0, #2
   b98ee:	d10c      	bne.n	b990a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b98f0:	4620      	mov	r0, r4
   b98f2:	f7fc f85d 	bl	b59b0 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b98f6:	2801      	cmp	r0, #1
   b98f8:	d001      	beq.n	b98fe <_Z11analogWritetm+0x3e>
   b98fa:	2804      	cmp	r0, #4
   b98fc:	d105      	bne.n	b990a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b98fe:	4629      	mov	r1, r5
   b9900:	4620      	mov	r0, r4
}
   b9902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b9906:	f7fc b87b 	b.w	b5a00 <hal_pwm_write_ext>
}
   b990a:	bd38      	pop	{r3, r4, r5, pc}

000b990c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b990c:	4770      	bx	lr
	...

000b9910 <_Z17acquireWireBufferv>:
{
   b9910:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b9912:	2520      	movs	r5, #32
   b9914:	2314      	movs	r3, #20
{
   b9916:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b9918:	6003      	str	r3, [r0, #0]
   b991a:	6085      	str	r5, [r0, #8]
   b991c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b991e:	4906      	ldr	r1, [pc, #24]	; (b9938 <_Z17acquireWireBufferv+0x28>)
   b9920:	4628      	mov	r0, r5
   b9922:	f000 f86f 	bl	b9a04 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b9926:	4904      	ldr	r1, [pc, #16]	; (b9938 <_Z17acquireWireBufferv+0x28>)
	};
   b9928:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b992a:	4628      	mov	r0, r5
   b992c:	f000 f86a 	bl	b9a04 <_ZnajRKSt9nothrow_t>
	};
   b9930:	60e0      	str	r0, [r4, #12]
}
   b9932:	4620      	mov	r0, r4
   b9934:	bd38      	pop	{r3, r4, r5, pc}
   b9936:	bf00      	nop
   b9938:	000babb4 	.word	0x000babb4

000b993c <_Z19__fetch_global_Wirev>:
{
   b993c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b993e:	4d0e      	ldr	r5, [pc, #56]	; (b9978 <_Z19__fetch_global_Wirev+0x3c>)
   b9940:	7829      	ldrb	r1, [r5, #0]
   b9942:	f3bf 8f5b 	dmb	ish
   b9946:	f011 0401 	ands.w	r4, r1, #1
{
   b994a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b994c:	d111      	bne.n	b9972 <_Z19__fetch_global_Wirev+0x36>
   b994e:	4628      	mov	r0, r5
   b9950:	f7fa fbb2 	bl	b40b8 <__cxa_guard_acquire>
   b9954:	b168      	cbz	r0, b9972 <_Z19__fetch_global_Wirev+0x36>
   b9956:	a801      	add	r0, sp, #4
   b9958:	f7ff ffda 	bl	b9910 <_Z17acquireWireBufferv>
   b995c:	aa01      	add	r2, sp, #4
   b995e:	4621      	mov	r1, r4
   b9960:	4806      	ldr	r0, [pc, #24]	; (b997c <_Z19__fetch_global_Wirev+0x40>)
   b9962:	f7fe fdbf 	bl	b84e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b9966:	4628      	mov	r0, r5
   b9968:	f7fa fbab 	bl	b40c2 <__cxa_guard_release>
   b996c:	4804      	ldr	r0, [pc, #16]	; (b9980 <_Z19__fetch_global_Wirev+0x44>)
   b996e:	f000 f961 	bl	b9c34 <atexit>
	return wire;
}
   b9972:	4802      	ldr	r0, [pc, #8]	; (b997c <_Z19__fetch_global_Wirev+0x40>)
   b9974:	b007      	add	sp, #28
   b9976:	bd30      	pop	{r4, r5, pc}
   b9978:	2003e72c 	.word	0x2003e72c
   b997c:	2003e730 	.word	0x2003e730
   b9980:	000b990d 	.word	0x000b990d

000b9984 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b9984:	4770      	bx	lr
	...

000b9988 <_Z20acquireSerial1Bufferv>:
{
   b9988:	b538      	push	{r3, r4, r5, lr}
   b998a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b998c:	2514      	movs	r5, #20
   b998e:	462a      	mov	r2, r5
   b9990:	2100      	movs	r1, #0
   b9992:	f000 f995 	bl	b9cc0 <memset>
   b9996:	8025      	strh	r5, [r4, #0]
   b9998:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b999a:	4907      	ldr	r1, [pc, #28]	; (b99b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b999c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b999e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b99a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b99a2:	f000 f82f 	bl	b9a04 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b99a6:	4904      	ldr	r1, [pc, #16]	; (b99b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b99a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b99aa:	4628      	mov	r0, r5
   b99ac:	f000 f82a 	bl	b9a04 <_ZnajRKSt9nothrow_t>
    };
   b99b0:	60e0      	str	r0, [r4, #12]
}
   b99b2:	4620      	mov	r0, r4
   b99b4:	bd38      	pop	{r3, r4, r5, pc}
   b99b6:	bf00      	nop
   b99b8:	000babb4 	.word	0x000babb4

000b99bc <_Z22__fetch_global_Serial1v>:
{
   b99bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b99be:	4d0e      	ldr	r5, [pc, #56]	; (b99f8 <_Z22__fetch_global_Serial1v+0x3c>)
   b99c0:	7829      	ldrb	r1, [r5, #0]
   b99c2:	f3bf 8f5b 	dmb	ish
   b99c6:	f011 0401 	ands.w	r4, r1, #1
{
   b99ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b99cc:	d111      	bne.n	b99f2 <_Z22__fetch_global_Serial1v+0x36>
   b99ce:	4628      	mov	r0, r5
   b99d0:	f7fa fb72 	bl	b40b8 <__cxa_guard_acquire>
   b99d4:	b168      	cbz	r0, b99f2 <_Z22__fetch_global_Serial1v+0x36>
   b99d6:	a801      	add	r0, sp, #4
   b99d8:	f7ff ffd6 	bl	b9988 <_Z20acquireSerial1Bufferv>
   b99dc:	aa01      	add	r2, sp, #4
   b99de:	4621      	mov	r1, r4
   b99e0:	4806      	ldr	r0, [pc, #24]	; (b99fc <_Z22__fetch_global_Serial1v+0x40>)
   b99e2:	f7ff fd25 	bl	b9430 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b99e6:	4628      	mov	r0, r5
   b99e8:	f7fa fb6b 	bl	b40c2 <__cxa_guard_release>
   b99ec:	4804      	ldr	r0, [pc, #16]	; (b9a00 <_Z22__fetch_global_Serial1v+0x44>)
   b99ee:	f000 f921 	bl	b9c34 <atexit>
    return serial1;
}
   b99f2:	4802      	ldr	r0, [pc, #8]	; (b99fc <_Z22__fetch_global_Serial1v+0x40>)
   b99f4:	b007      	add	sp, #28
   b99f6:	bd30      	pop	{r4, r5, pc}
   b99f8:	2003e744 	.word	0x2003e744
   b99fc:	2003e748 	.word	0x2003e748
   b9a00:	000b9985 	.word	0x000b9985

000b9a04 <_ZnajRKSt9nothrow_t>:
   b9a04:	f7fa bb47 	b.w	b4096 <_Znaj>

000b9a08 <_ZSt25__throw_bad_function_callv>:
   b9a08:	b508      	push	{r3, lr}
   b9a0a:	f7fc fa6d 	bl	b5ee8 <abort>
	...

000b9a10 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b9a10:	4901      	ldr	r1, [pc, #4]	; (b9a18 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b9a12:	f000 b8f9 	b.w	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9a16:	bf00      	nop
   b9a18:	000babd0 	.word	0x000babd0

000b9a1c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b9a1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9a1e:	2400      	movs	r4, #0
   b9a20:	2310      	movs	r3, #16
   b9a22:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b9a26:	6803      	ldr	r3, [r0, #0]
   b9a28:	4615      	mov	r5, r2
   b9a2a:	699e      	ldr	r6, [r3, #24]
   b9a2c:	6812      	ldr	r2, [r2, #0]
   b9a2e:	466b      	mov	r3, sp
   b9a30:	e9cd 4400 	strd	r4, r4, [sp]
   b9a34:	47b0      	blx	r6
   b9a36:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b9a3a:	f003 0306 	and.w	r3, r3, #6
   b9a3e:	2b06      	cmp	r3, #6
   b9a40:	bf03      	ittte	eq
   b9a42:	9b00      	ldreq	r3, [sp, #0]
   b9a44:	602b      	streq	r3, [r5, #0]
   b9a46:	2001      	moveq	r0, #1
   b9a48:	4620      	movne	r0, r4
   b9a4a:	b004      	add	sp, #16
   b9a4c:	bd70      	pop	{r4, r5, r6, pc}

000b9a4e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b9a4e:	9800      	ldr	r0, [sp, #0]
   b9a50:	4290      	cmp	r0, r2
   b9a52:	bf14      	ite	ne
   b9a54:	2001      	movne	r0, #1
   b9a56:	2006      	moveq	r0, #6
   b9a58:	4770      	bx	lr
	...

000b9a5c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b9a5c:	b510      	push	{r4, lr}
   b9a5e:	4b03      	ldr	r3, [pc, #12]	; (b9a6c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b9a60:	6003      	str	r3, [r0, #0]
   b9a62:	4604      	mov	r4, r0
   b9a64:	f000 f8cd 	bl	b9c02 <_ZNSt9type_infoD1Ev>
   b9a68:	4620      	mov	r0, r4
   b9a6a:	bd10      	pop	{r4, pc}
   b9a6c:	000bac10 	.word	0x000bac10

000b9a70 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b9a70:	b510      	push	{r4, lr}
   b9a72:	4604      	mov	r4, r0
   b9a74:	f7ff fff2 	bl	b9a5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9a78:	4620      	mov	r0, r4
   b9a7a:	2108      	movs	r1, #8
   b9a7c:	f7fa fb0d 	bl	b409a <_ZdlPvj>
   b9a80:	4620      	mov	r0, r4
   b9a82:	bd10      	pop	{r4, pc}

000b9a84 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b9a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9a88:	461f      	mov	r7, r3
   b9a8a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b9a8e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b9a92:	4598      	cmp	r8, r3
   b9a94:	4606      	mov	r6, r0
   b9a96:	4615      	mov	r5, r2
   b9a98:	d107      	bne.n	b9aaa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9a9a:	9907      	ldr	r1, [sp, #28]
   b9a9c:	f000 f8b4 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9aa0:	b118      	cbz	r0, b9aaa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b9aa2:	7165      	strb	r5, [r4, #5]
   b9aa4:	2000      	movs	r0, #0
   b9aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9aaa:	4639      	mov	r1, r7
   b9aac:	4630      	mov	r0, r6
   b9aae:	f000 f8ab 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9ab2:	2800      	cmp	r0, #0
   b9ab4:	d0f6      	beq.n	b9aa4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b9ab6:	2301      	movs	r3, #1
   b9ab8:	f8c4 8000 	str.w	r8, [r4]
   b9abc:	7125      	strb	r5, [r4, #4]
   b9abe:	71a3      	strb	r3, [r4, #6]
   b9ac0:	e7f0      	b.n	b9aa4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b9ac2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b9ac2:	b538      	push	{r3, r4, r5, lr}
   b9ac4:	4615      	mov	r5, r2
   b9ac6:	461c      	mov	r4, r3
   b9ac8:	f000 f89e 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9acc:	b120      	cbz	r0, b9ad8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b9ace:	2308      	movs	r3, #8
   b9ad0:	60e3      	str	r3, [r4, #12]
   b9ad2:	2306      	movs	r3, #6
   b9ad4:	6025      	str	r5, [r4, #0]
   b9ad6:	7123      	strb	r3, [r4, #4]
   b9ad8:	bd38      	pop	{r3, r4, r5, pc}

000b9ada <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b9ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9adc:	4605      	mov	r5, r0
   b9ade:	460c      	mov	r4, r1
   b9ae0:	9201      	str	r2, [sp, #4]
   b9ae2:	461e      	mov	r6, r3
   b9ae4:	f000 f890 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9ae8:	b950      	cbnz	r0, b9b00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9aea:	2e03      	cmp	r6, #3
   b9aec:	d808      	bhi.n	b9b00 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b9aee:	6823      	ldr	r3, [r4, #0]
   b9af0:	9a01      	ldr	r2, [sp, #4]
   b9af2:	695b      	ldr	r3, [r3, #20]
   b9af4:	4629      	mov	r1, r5
   b9af6:	4620      	mov	r0, r4
   b9af8:	b002      	add	sp, #8
   b9afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9afe:	4718      	bx	r3
   b9b00:	b002      	add	sp, #8
   b9b02:	bd70      	pop	{r4, r5, r6, pc}

000b9b04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b9b04:	b510      	push	{r4, lr}
   b9b06:	4b03      	ldr	r3, [pc, #12]	; (b9b14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b9b08:	6003      	str	r3, [r0, #0]
   b9b0a:	4604      	mov	r4, r0
   b9b0c:	f7ff ffa6 	bl	b9a5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b9b10:	4620      	mov	r0, r4
   b9b12:	bd10      	pop	{r4, pc}
   b9b14:	000bac70 	.word	0x000bac70

000b9b18 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b9b18:	b510      	push	{r4, lr}
   b9b1a:	4604      	mov	r4, r0
   b9b1c:	f7ff fff2 	bl	b9b04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b9b20:	4620      	mov	r0, r4
   b9b22:	210c      	movs	r1, #12
   b9b24:	f7fa fab9 	bl	b409a <_ZdlPvj>
   b9b28:	4620      	mov	r0, r4
   b9b2a:	bd10      	pop	{r4, pc}

000b9b2c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b9b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b9b2e:	9f08      	ldr	r7, [sp, #32]
   b9b30:	4297      	cmp	r7, r2
   b9b32:	4605      	mov	r5, r0
   b9b34:	460e      	mov	r6, r1
   b9b36:	4614      	mov	r4, r2
   b9b38:	d00a      	beq.n	b9b50 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b9b3a:	68a8      	ldr	r0, [r5, #8]
   b9b3c:	6802      	ldr	r2, [r0, #0]
   b9b3e:	9708      	str	r7, [sp, #32]
   b9b40:	6a15      	ldr	r5, [r2, #32]
   b9b42:	4631      	mov	r1, r6
   b9b44:	4622      	mov	r2, r4
   b9b46:	46ac      	mov	ip, r5
   b9b48:	b003      	add	sp, #12
   b9b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b9b4e:	4760      	bx	ip
   b9b50:	4619      	mov	r1, r3
   b9b52:	9301      	str	r3, [sp, #4]
   b9b54:	f000 f858 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9b58:	9b01      	ldr	r3, [sp, #4]
   b9b5a:	2800      	cmp	r0, #0
   b9b5c:	d0ed      	beq.n	b9b3a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b9b5e:	2006      	movs	r0, #6
   b9b60:	b003      	add	sp, #12
   b9b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b9b64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b9b64:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9b68:	460d      	mov	r5, r1
   b9b6a:	4619      	mov	r1, r3
   b9b6c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b9b70:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b9b74:	4681      	mov	r9, r0
   b9b76:	4617      	mov	r7, r2
   b9b78:	4698      	mov	r8, r3
   b9b7a:	f000 f845 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9b7e:	b190      	cbz	r0, b9ba6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b9b80:	2d00      	cmp	r5, #0
   b9b82:	6034      	str	r4, [r6, #0]
   b9b84:	7137      	strb	r7, [r6, #4]
   b9b86:	db09      	blt.n	b9b9c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b9b88:	1961      	adds	r1, r4, r5
   b9b8a:	458a      	cmp	sl, r1
   b9b8c:	bf0c      	ite	eq
   b9b8e:	2106      	moveq	r1, #6
   b9b90:	2101      	movne	r1, #1
   b9b92:	71b1      	strb	r1, [r6, #6]
   b9b94:	2000      	movs	r0, #0
   b9b96:	b001      	add	sp, #4
   b9b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9b9c:	3502      	adds	r5, #2
   b9b9e:	d1f9      	bne.n	b9b94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9ba0:	2301      	movs	r3, #1
   b9ba2:	71b3      	strb	r3, [r6, #6]
   b9ba4:	e7f6      	b.n	b9b94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9ba6:	4554      	cmp	r4, sl
   b9ba8:	d106      	bne.n	b9bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9baa:	4659      	mov	r1, fp
   b9bac:	4648      	mov	r0, r9
   b9bae:	f000 f82b 	bl	b9c08 <_ZNKSt9type_infoeqERKS_>
   b9bb2:	b108      	cbz	r0, b9bb8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b9bb4:	7177      	strb	r7, [r6, #5]
   b9bb6:	e7ed      	b.n	b9b94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b9bb8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b9bbc:	6803      	ldr	r3, [r0, #0]
   b9bbe:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b9bc2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b9bc6:	69dc      	ldr	r4, [r3, #28]
   b9bc8:	463a      	mov	r2, r7
   b9bca:	4643      	mov	r3, r8
   b9bcc:	4629      	mov	r1, r5
   b9bce:	46a4      	mov	ip, r4
   b9bd0:	b001      	add	sp, #4
   b9bd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9bd6:	4760      	bx	ip

000b9bd8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b9bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9bdc:	4607      	mov	r7, r0
   b9bde:	460c      	mov	r4, r1
   b9be0:	4615      	mov	r5, r2
   b9be2:	461e      	mov	r6, r3
   b9be4:	f7ff ff6d 	bl	b9ac2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b9be8:	b948      	cbnz	r0, b9bfe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b9bea:	68b8      	ldr	r0, [r7, #8]
   b9bec:	6803      	ldr	r3, [r0, #0]
   b9bee:	699f      	ldr	r7, [r3, #24]
   b9bf0:	462a      	mov	r2, r5
   b9bf2:	4633      	mov	r3, r6
   b9bf4:	4621      	mov	r1, r4
   b9bf6:	46bc      	mov	ip, r7
   b9bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b9bfc:	4760      	bx	ip
   b9bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9c02 <_ZNSt9type_infoD1Ev>:
   b9c02:	4770      	bx	lr

000b9c04 <_ZNKSt9type_info14__is_pointer_pEv>:
   b9c04:	2000      	movs	r0, #0
   b9c06:	4770      	bx	lr

000b9c08 <_ZNKSt9type_infoeqERKS_>:
   b9c08:	4281      	cmp	r1, r0
   b9c0a:	b508      	push	{r3, lr}
   b9c0c:	d00e      	beq.n	b9c2c <_ZNKSt9type_infoeqERKS_+0x24>
   b9c0e:	6840      	ldr	r0, [r0, #4]
   b9c10:	7803      	ldrb	r3, [r0, #0]
   b9c12:	2b2a      	cmp	r3, #42	; 0x2a
   b9c14:	d00c      	beq.n	b9c30 <_ZNKSt9type_infoeqERKS_+0x28>
   b9c16:	6849      	ldr	r1, [r1, #4]
   b9c18:	780b      	ldrb	r3, [r1, #0]
   b9c1a:	2b2a      	cmp	r3, #42	; 0x2a
   b9c1c:	bf08      	it	eq
   b9c1e:	3101      	addeq	r1, #1
   b9c20:	f000 f884 	bl	b9d2c <strcmp>
   b9c24:	fab0 f080 	clz	r0, r0
   b9c28:	0940      	lsrs	r0, r0, #5
   b9c2a:	bd08      	pop	{r3, pc}
   b9c2c:	2001      	movs	r0, #1
   b9c2e:	e7fc      	b.n	b9c2a <_ZNKSt9type_infoeqERKS_+0x22>
   b9c30:	2000      	movs	r0, #0
   b9c32:	e7fa      	b.n	b9c2a <_ZNKSt9type_infoeqERKS_+0x22>

000b9c34 <atexit>:
   b9c34:	2300      	movs	r3, #0
   b9c36:	4601      	mov	r1, r0
   b9c38:	461a      	mov	r2, r3
   b9c3a:	4618      	mov	r0, r3
   b9c3c:	f000 b93c 	b.w	b9eb8 <__register_exitproc>

000b9c40 <atoi>:
   b9c40:	220a      	movs	r2, #10
   b9c42:	2100      	movs	r1, #0
   b9c44:	f000 b92e 	b.w	b9ea4 <strtol>

000b9c48 <atol>:
   b9c48:	220a      	movs	r2, #10
   b9c4a:	2100      	movs	r1, #0
   b9c4c:	f000 b92a 	b.w	b9ea4 <strtol>

000b9c50 <memcmp>:
   b9c50:	b510      	push	{r4, lr}
   b9c52:	3901      	subs	r1, #1
   b9c54:	4402      	add	r2, r0
   b9c56:	4290      	cmp	r0, r2
   b9c58:	d101      	bne.n	b9c5e <memcmp+0xe>
   b9c5a:	2000      	movs	r0, #0
   b9c5c:	e005      	b.n	b9c6a <memcmp+0x1a>
   b9c5e:	7803      	ldrb	r3, [r0, #0]
   b9c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9c64:	42a3      	cmp	r3, r4
   b9c66:	d001      	beq.n	b9c6c <memcmp+0x1c>
   b9c68:	1b18      	subs	r0, r3, r4
   b9c6a:	bd10      	pop	{r4, pc}
   b9c6c:	3001      	adds	r0, #1
   b9c6e:	e7f2      	b.n	b9c56 <memcmp+0x6>

000b9c70 <memcpy>:
   b9c70:	440a      	add	r2, r1
   b9c72:	4291      	cmp	r1, r2
   b9c74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b9c78:	d100      	bne.n	b9c7c <memcpy+0xc>
   b9c7a:	4770      	bx	lr
   b9c7c:	b510      	push	{r4, lr}
   b9c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b9c82:	f803 4f01 	strb.w	r4, [r3, #1]!
   b9c86:	4291      	cmp	r1, r2
   b9c88:	d1f9      	bne.n	b9c7e <memcpy+0xe>
   b9c8a:	bd10      	pop	{r4, pc}

000b9c8c <memmove>:
   b9c8c:	4288      	cmp	r0, r1
   b9c8e:	b510      	push	{r4, lr}
   b9c90:	eb01 0402 	add.w	r4, r1, r2
   b9c94:	d902      	bls.n	b9c9c <memmove+0x10>
   b9c96:	4284      	cmp	r4, r0
   b9c98:	4623      	mov	r3, r4
   b9c9a:	d807      	bhi.n	b9cac <memmove+0x20>
   b9c9c:	1e43      	subs	r3, r0, #1
   b9c9e:	42a1      	cmp	r1, r4
   b9ca0:	d008      	beq.n	b9cb4 <memmove+0x28>
   b9ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b9caa:	e7f8      	b.n	b9c9e <memmove+0x12>
   b9cac:	4402      	add	r2, r0
   b9cae:	4601      	mov	r1, r0
   b9cb0:	428a      	cmp	r2, r1
   b9cb2:	d100      	bne.n	b9cb6 <memmove+0x2a>
   b9cb4:	bd10      	pop	{r4, pc}
   b9cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b9cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b9cbe:	e7f7      	b.n	b9cb0 <memmove+0x24>

000b9cc0 <memset>:
   b9cc0:	4402      	add	r2, r0
   b9cc2:	4603      	mov	r3, r0
   b9cc4:	4293      	cmp	r3, r2
   b9cc6:	d100      	bne.n	b9cca <memset+0xa>
   b9cc8:	4770      	bx	lr
   b9cca:	f803 1b01 	strb.w	r1, [r3], #1
   b9cce:	e7f9      	b.n	b9cc4 <memset+0x4>

000b9cd0 <srand>:
   b9cd0:	b538      	push	{r3, r4, r5, lr}
   b9cd2:	4b10      	ldr	r3, [pc, #64]	; (b9d14 <srand+0x44>)
   b9cd4:	681d      	ldr	r5, [r3, #0]
   b9cd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9cd8:	4604      	mov	r4, r0
   b9cda:	b9b3      	cbnz	r3, b9d0a <srand+0x3a>
   b9cdc:	2018      	movs	r0, #24
   b9cde:	f7fc f8db 	bl	b5e98 <malloc>
   b9ce2:	4602      	mov	r2, r0
   b9ce4:	63a8      	str	r0, [r5, #56]	; 0x38
   b9ce6:	b920      	cbnz	r0, b9cf2 <srand+0x22>
   b9ce8:	4b0b      	ldr	r3, [pc, #44]	; (b9d18 <srand+0x48>)
   b9cea:	480c      	ldr	r0, [pc, #48]	; (b9d1c <srand+0x4c>)
   b9cec:	2142      	movs	r1, #66	; 0x42
   b9cee:	f7fc f90b 	bl	b5f08 <__assert_func>
   b9cf2:	490b      	ldr	r1, [pc, #44]	; (b9d20 <srand+0x50>)
   b9cf4:	4b0b      	ldr	r3, [pc, #44]	; (b9d24 <srand+0x54>)
   b9cf6:	e9c0 1300 	strd	r1, r3, [r0]
   b9cfa:	4b0b      	ldr	r3, [pc, #44]	; (b9d28 <srand+0x58>)
   b9cfc:	6083      	str	r3, [r0, #8]
   b9cfe:	230b      	movs	r3, #11
   b9d00:	8183      	strh	r3, [r0, #12]
   b9d02:	2100      	movs	r1, #0
   b9d04:	2001      	movs	r0, #1
   b9d06:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b9d0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b9d0c:	2200      	movs	r2, #0
   b9d0e:	611c      	str	r4, [r3, #16]
   b9d10:	615a      	str	r2, [r3, #20]
   b9d12:	bd38      	pop	{r3, r4, r5, pc}
   b9d14:	2003e27c 	.word	0x2003e27c
   b9d18:	000baca9 	.word	0x000baca9
   b9d1c:	000bacc0 	.word	0x000bacc0
   b9d20:	abcd330e 	.word	0xabcd330e
   b9d24:	e66d1234 	.word	0xe66d1234
   b9d28:	0005deec 	.word	0x0005deec

000b9d2c <strcmp>:
   b9d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b9d30:	f811 3b01 	ldrb.w	r3, [r1], #1
   b9d34:	2a01      	cmp	r2, #1
   b9d36:	bf28      	it	cs
   b9d38:	429a      	cmpcs	r2, r3
   b9d3a:	d0f7      	beq.n	b9d2c <strcmp>
   b9d3c:	1ad0      	subs	r0, r2, r3
   b9d3e:	4770      	bx	lr

000b9d40 <strcpy>:
   b9d40:	4603      	mov	r3, r0
   b9d42:	f811 2b01 	ldrb.w	r2, [r1], #1
   b9d46:	f803 2b01 	strb.w	r2, [r3], #1
   b9d4a:	2a00      	cmp	r2, #0
   b9d4c:	d1f9      	bne.n	b9d42 <strcpy+0x2>
   b9d4e:	4770      	bx	lr

000b9d50 <strlen>:
   b9d50:	4603      	mov	r3, r0
   b9d52:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9d56:	2a00      	cmp	r2, #0
   b9d58:	d1fb      	bne.n	b9d52 <strlen+0x2>
   b9d5a:	1a18      	subs	r0, r3, r0
   b9d5c:	3801      	subs	r0, #1
   b9d5e:	4770      	bx	lr

000b9d60 <strncpy>:
   b9d60:	b510      	push	{r4, lr}
   b9d62:	3901      	subs	r1, #1
   b9d64:	4603      	mov	r3, r0
   b9d66:	b132      	cbz	r2, b9d76 <strncpy+0x16>
   b9d68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b9d6c:	f803 4b01 	strb.w	r4, [r3], #1
   b9d70:	3a01      	subs	r2, #1
   b9d72:	2c00      	cmp	r4, #0
   b9d74:	d1f7      	bne.n	b9d66 <strncpy+0x6>
   b9d76:	441a      	add	r2, r3
   b9d78:	2100      	movs	r1, #0
   b9d7a:	4293      	cmp	r3, r2
   b9d7c:	d100      	bne.n	b9d80 <strncpy+0x20>
   b9d7e:	bd10      	pop	{r4, pc}
   b9d80:	f803 1b01 	strb.w	r1, [r3], #1
   b9d84:	e7f9      	b.n	b9d7a <strncpy+0x1a>

000b9d86 <strnlen>:
   b9d86:	b510      	push	{r4, lr}
   b9d88:	4602      	mov	r2, r0
   b9d8a:	4401      	add	r1, r0
   b9d8c:	428a      	cmp	r2, r1
   b9d8e:	4613      	mov	r3, r2
   b9d90:	d003      	beq.n	b9d9a <strnlen+0x14>
   b9d92:	781c      	ldrb	r4, [r3, #0]
   b9d94:	3201      	adds	r2, #1
   b9d96:	2c00      	cmp	r4, #0
   b9d98:	d1f8      	bne.n	b9d8c <strnlen+0x6>
   b9d9a:	1a18      	subs	r0, r3, r0
   b9d9c:	bd10      	pop	{r4, pc}
	...

000b9da0 <_strtol_l.constprop.0>:
   b9da0:	2b01      	cmp	r3, #1
   b9da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9da6:	d001      	beq.n	b9dac <_strtol_l.constprop.0+0xc>
   b9da8:	2b24      	cmp	r3, #36	; 0x24
   b9daa:	d906      	bls.n	b9dba <_strtol_l.constprop.0+0x1a>
   b9dac:	f7fc f8a4 	bl	b5ef8 <__errno>
   b9db0:	2316      	movs	r3, #22
   b9db2:	6003      	str	r3, [r0, #0]
   b9db4:	2000      	movs	r0, #0
   b9db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b9dba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b9ea0 <_strtol_l.constprop.0+0x100>
   b9dbe:	460d      	mov	r5, r1
   b9dc0:	462e      	mov	r6, r5
   b9dc2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9dc6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b9dca:	f017 0708 	ands.w	r7, r7, #8
   b9dce:	d1f7      	bne.n	b9dc0 <_strtol_l.constprop.0+0x20>
   b9dd0:	2c2d      	cmp	r4, #45	; 0x2d
   b9dd2:	d132      	bne.n	b9e3a <_strtol_l.constprop.0+0x9a>
   b9dd4:	782c      	ldrb	r4, [r5, #0]
   b9dd6:	2701      	movs	r7, #1
   b9dd8:	1cb5      	adds	r5, r6, #2
   b9dda:	2b00      	cmp	r3, #0
   b9ddc:	d05b      	beq.n	b9e96 <_strtol_l.constprop.0+0xf6>
   b9dde:	2b10      	cmp	r3, #16
   b9de0:	d109      	bne.n	b9df6 <_strtol_l.constprop.0+0x56>
   b9de2:	2c30      	cmp	r4, #48	; 0x30
   b9de4:	d107      	bne.n	b9df6 <_strtol_l.constprop.0+0x56>
   b9de6:	782c      	ldrb	r4, [r5, #0]
   b9de8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b9dec:	2c58      	cmp	r4, #88	; 0x58
   b9dee:	d14d      	bne.n	b9e8c <_strtol_l.constprop.0+0xec>
   b9df0:	786c      	ldrb	r4, [r5, #1]
   b9df2:	2310      	movs	r3, #16
   b9df4:	3502      	adds	r5, #2
   b9df6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b9dfa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9dfe:	f04f 0c00 	mov.w	ip, #0
   b9e02:	fbb8 f9f3 	udiv	r9, r8, r3
   b9e06:	4666      	mov	r6, ip
   b9e08:	fb03 8a19 	mls	sl, r3, r9, r8
   b9e0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9e10:	f1be 0f09 	cmp.w	lr, #9
   b9e14:	d816      	bhi.n	b9e44 <_strtol_l.constprop.0+0xa4>
   b9e16:	4674      	mov	r4, lr
   b9e18:	42a3      	cmp	r3, r4
   b9e1a:	dd24      	ble.n	b9e66 <_strtol_l.constprop.0+0xc6>
   b9e1c:	f1bc 0f00 	cmp.w	ip, #0
   b9e20:	db1e      	blt.n	b9e60 <_strtol_l.constprop.0+0xc0>
   b9e22:	45b1      	cmp	r9, r6
   b9e24:	d31c      	bcc.n	b9e60 <_strtol_l.constprop.0+0xc0>
   b9e26:	d101      	bne.n	b9e2c <_strtol_l.constprop.0+0x8c>
   b9e28:	45a2      	cmp	sl, r4
   b9e2a:	db19      	blt.n	b9e60 <_strtol_l.constprop.0+0xc0>
   b9e2c:	fb06 4603 	mla	r6, r6, r3, r4
   b9e30:	f04f 0c01 	mov.w	ip, #1
   b9e34:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9e38:	e7e8      	b.n	b9e0c <_strtol_l.constprop.0+0x6c>
   b9e3a:	2c2b      	cmp	r4, #43	; 0x2b
   b9e3c:	bf04      	itt	eq
   b9e3e:	782c      	ldrbeq	r4, [r5, #0]
   b9e40:	1cb5      	addeq	r5, r6, #2
   b9e42:	e7ca      	b.n	b9dda <_strtol_l.constprop.0+0x3a>
   b9e44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9e48:	f1be 0f19 	cmp.w	lr, #25
   b9e4c:	d801      	bhi.n	b9e52 <_strtol_l.constprop.0+0xb2>
   b9e4e:	3c37      	subs	r4, #55	; 0x37
   b9e50:	e7e2      	b.n	b9e18 <_strtol_l.constprop.0+0x78>
   b9e52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9e56:	f1be 0f19 	cmp.w	lr, #25
   b9e5a:	d804      	bhi.n	b9e66 <_strtol_l.constprop.0+0xc6>
   b9e5c:	3c57      	subs	r4, #87	; 0x57
   b9e5e:	e7db      	b.n	b9e18 <_strtol_l.constprop.0+0x78>
   b9e60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b9e64:	e7e6      	b.n	b9e34 <_strtol_l.constprop.0+0x94>
   b9e66:	f1bc 0f00 	cmp.w	ip, #0
   b9e6a:	da05      	bge.n	b9e78 <_strtol_l.constprop.0+0xd8>
   b9e6c:	2322      	movs	r3, #34	; 0x22
   b9e6e:	6003      	str	r3, [r0, #0]
   b9e70:	4646      	mov	r6, r8
   b9e72:	b942      	cbnz	r2, b9e86 <_strtol_l.constprop.0+0xe6>
   b9e74:	4630      	mov	r0, r6
   b9e76:	e79e      	b.n	b9db6 <_strtol_l.constprop.0+0x16>
   b9e78:	b107      	cbz	r7, b9e7c <_strtol_l.constprop.0+0xdc>
   b9e7a:	4276      	negs	r6, r6
   b9e7c:	2a00      	cmp	r2, #0
   b9e7e:	d0f9      	beq.n	b9e74 <_strtol_l.constprop.0+0xd4>
   b9e80:	f1bc 0f00 	cmp.w	ip, #0
   b9e84:	d000      	beq.n	b9e88 <_strtol_l.constprop.0+0xe8>
   b9e86:	1e69      	subs	r1, r5, #1
   b9e88:	6011      	str	r1, [r2, #0]
   b9e8a:	e7f3      	b.n	b9e74 <_strtol_l.constprop.0+0xd4>
   b9e8c:	2430      	movs	r4, #48	; 0x30
   b9e8e:	2b00      	cmp	r3, #0
   b9e90:	d1b1      	bne.n	b9df6 <_strtol_l.constprop.0+0x56>
   b9e92:	2308      	movs	r3, #8
   b9e94:	e7af      	b.n	b9df6 <_strtol_l.constprop.0+0x56>
   b9e96:	2c30      	cmp	r4, #48	; 0x30
   b9e98:	d0a5      	beq.n	b9de6 <_strtol_l.constprop.0+0x46>
   b9e9a:	230a      	movs	r3, #10
   b9e9c:	e7ab      	b.n	b9df6 <_strtol_l.constprop.0+0x56>
   b9e9e:	bf00      	nop
   b9ea0:	000bad1a 	.word	0x000bad1a

000b9ea4 <strtol>:
   b9ea4:	4613      	mov	r3, r2
   b9ea6:	460a      	mov	r2, r1
   b9ea8:	4601      	mov	r1, r0
   b9eaa:	4802      	ldr	r0, [pc, #8]	; (b9eb4 <strtol+0x10>)
   b9eac:	6800      	ldr	r0, [r0, #0]
   b9eae:	f7ff bf77 	b.w	b9da0 <_strtol_l.constprop.0>
   b9eb2:	bf00      	nop
   b9eb4:	2003e27c 	.word	0x2003e27c

000b9eb8 <__register_exitproc>:
   b9eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9ebc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b9f78 <__register_exitproc+0xc0>
   b9ec0:	4606      	mov	r6, r0
   b9ec2:	f8d8 0000 	ldr.w	r0, [r8]
   b9ec6:	461f      	mov	r7, r3
   b9ec8:	460d      	mov	r5, r1
   b9eca:	4691      	mov	r9, r2
   b9ecc:	f000 f856 	bl	b9f7c <__retarget_lock_acquire_recursive>
   b9ed0:	4b25      	ldr	r3, [pc, #148]	; (b9f68 <__register_exitproc+0xb0>)
   b9ed2:	681c      	ldr	r4, [r3, #0]
   b9ed4:	b934      	cbnz	r4, b9ee4 <__register_exitproc+0x2c>
   b9ed6:	4c25      	ldr	r4, [pc, #148]	; (b9f6c <__register_exitproc+0xb4>)
   b9ed8:	601c      	str	r4, [r3, #0]
   b9eda:	4b25      	ldr	r3, [pc, #148]	; (b9f70 <__register_exitproc+0xb8>)
   b9edc:	b113      	cbz	r3, b9ee4 <__register_exitproc+0x2c>
   b9ede:	681b      	ldr	r3, [r3, #0]
   b9ee0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9ee4:	6863      	ldr	r3, [r4, #4]
   b9ee6:	2b1f      	cmp	r3, #31
   b9ee8:	dd07      	ble.n	b9efa <__register_exitproc+0x42>
   b9eea:	f8d8 0000 	ldr.w	r0, [r8]
   b9eee:	f000 f847 	bl	b9f80 <__retarget_lock_release_recursive>
   b9ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9efa:	b34e      	cbz	r6, b9f50 <__register_exitproc+0x98>
   b9efc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9f00:	b988      	cbnz	r0, b9f26 <__register_exitproc+0x6e>
   b9f02:	4b1c      	ldr	r3, [pc, #112]	; (b9f74 <__register_exitproc+0xbc>)
   b9f04:	b923      	cbnz	r3, b9f10 <__register_exitproc+0x58>
   b9f06:	f8d8 0000 	ldr.w	r0, [r8]
   b9f0a:	f000 f838 	bl	b9f7e <__retarget_lock_release>
   b9f0e:	e7f0      	b.n	b9ef2 <__register_exitproc+0x3a>
   b9f10:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9f14:	f7fb ffc0 	bl	b5e98 <malloc>
   b9f18:	2800      	cmp	r0, #0
   b9f1a:	d0f4      	beq.n	b9f06 <__register_exitproc+0x4e>
   b9f1c:	2300      	movs	r3, #0
   b9f1e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9f22:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9f26:	6863      	ldr	r3, [r4, #4]
   b9f28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b9f2c:	2201      	movs	r2, #1
   b9f2e:	409a      	lsls	r2, r3
   b9f30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9f34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9f38:	4313      	orrs	r3, r2
   b9f3a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b9f3e:	2e02      	cmp	r6, #2
   b9f40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9f44:	bf02      	ittt	eq
   b9f46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b9f4a:	4313      	orreq	r3, r2
   b9f4c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9f50:	6863      	ldr	r3, [r4, #4]
   b9f52:	f8d8 0000 	ldr.w	r0, [r8]
   b9f56:	1c5a      	adds	r2, r3, #1
   b9f58:	3302      	adds	r3, #2
   b9f5a:	6062      	str	r2, [r4, #4]
   b9f5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b9f60:	f000 f80e 	bl	b9f80 <__retarget_lock_release_recursive>
   b9f64:	2000      	movs	r0, #0
   b9f66:	e7c6      	b.n	b9ef6 <__register_exitproc+0x3e>
   b9f68:	2003e7e8 	.word	0x2003e7e8
   b9f6c:	2003e75c 	.word	0x2003e75c
   b9f70:	00000000 	.word	0x00000000
   b9f74:	000b5e99 	.word	0x000b5e99
   b9f78:	2003e2e0 	.word	0x2003e2e0

000b9f7c <__retarget_lock_acquire_recursive>:
   b9f7c:	4770      	bx	lr

000b9f7e <__retarget_lock_release>:
   b9f7e:	4770      	bx	lr

000b9f80 <__retarget_lock_release_recursive>:
   b9f80:	4770      	bx	lr

000b9f82 <link_code_end>:
	...

000b9f84 <dynalib_user>:
   b9f84:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b9f94:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9fa4:	7620 7269 7574 6c61 3400 0039 2031 6572      virtual.49.1 re
   b9fb4:	6563 7669 6465 6400 6665 7561 746c 0020     ceived.default .
   b9fc4:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
   b9fd4:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
   b9fe4:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
   b9ff4:	7325 4d20 444f 2545 3e75 2500 0069 6c25     %s MODE%u>.%i.%l
   ba004:	0069 6d49 6761 2065 6174 656b 006e 6f4e     i.Image taken.No
   ba014:	6620 6e69 6567 2072 6564 6574 7463 6465      finger detected
   ba024:	4300 6d6f 756d 696e 6163 6974 6e6f 6520     .Communication e
   ba034:	7272 726f 4900 616d 6967 676e 6520 7272     rror.Imaging err
   ba044:	726f 5500 6b6e 6f6e 6e77 6520 7272 726f     or.Unknown error
   ba054:	4900 616d 6567 6320 6e6f 6576 7472 6465     .Image converted
   ba064:	4900 616d 6567 7420 6f6f 6d20 7365 7973     .Image too messy
   ba074:	4300 756f 646c 6e20 746f 6620 6e69 2064     .Could not find 
   ba084:	6966 676e 7265 7270 6e69 2074 6566 7461     fingerprint feat
   ba094:	7275 7365 4600 756f 646e 6120 7020 6972     ures.Found a pri
   ba0a4:	746e 6d20 7461 6863 0021 6f46 6e75 2064     nt match!.Found 
   ba0b4:	4449 2320 2000 6977 6874 6320 6e6f 6966     ID #. with confi
   ba0c4:	6564 636e 2065 666f 0020 6944 2064 6f6e     dence of .Did no
   ba0d4:	2074 6966 646e 6120 6d20 7461 6863 6900     t find a match.i
   ba0e4:	006e 756f 0074 7770 006d 7764 6100 0077     n.out.pwm.dw.aw.
   ba0f4:	6f6e 7320 6d61 6c70 0065 694d 6867 2074     no sample.Might 
   ba104:	6168 6576 7320 6d6f 6f65 656e 7720 6f68     have someone who
   ba114:	6220 6f72 656b 6920 746e 206f 6f79 7275      broke into your
   ba124:	6820 756f 6573 4700 6d61 6e69 0067 6544      house.Gaming.De
   ba134:	6976 6563 4620 756f 646e 0021 6544 6976     vice Found!.Devi
   ba144:	6563 6e20 746f 6620 756f 646e 4300 5362     ce not found.CbS
   ba154:	4568 4b4f 7048 5851 6637 7078 3041 3779     hEOKHpQX7fxpA0y7
   ba164:	4955 2d31 6c69 3649 7033 4973 0072 6f46     UI1-ilI63psIr.Fo
   ba174:	6e75 2064 6966 676e 7265 7270 6e69 2074     und fingerprint 
   ba184:	6573 736e 726f 0021 6157 7469 6e69 2067     sensor!.Waiting 
   ba194:	6f66 2072 6176 696c 2064 6966 676e 7265     for valid finger
   ba1a4:	2e2e 002e 6944 2064 6f6e 2074 6966 646e     ....Did not find
   ba1b4:	6620 6e69 6567 7072 6972 746e 7320 6e65      fingerprint sen
   ba1c4:	6f73 2072 283a 4400 7665 6369 2065 6f6e     sor :(.Device no
   ba1d4:	2074 6f66 6e75 2e64 5020 656c 7361 2065     t found. Please 
   ba1e4:	6863 6365 206b 6977 6972 676e 002e 4536     check wiring..6E
   ba1f4:	3034 3030 3130 422d 4135 2d33 3346 3339     400001-B5A3-F393
   ba204:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   ba214:	4539 3600 3445 3030 3030 2d32 3542 3341     9E.6E400002-B5A3
   ba224:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   ba234:	4434 4343 3941 0045 4536 3034 3030 3330     4DCCA9E.6E400003
   ba244:	422d 4135 2d33 3346 3339 452d 4130 2d39     -B5A3-F393-E0A9-
   ba254:	3545 4530 3432 4344 4143 4539 0000 0000     E50E24DCCA9E....

000ba264 <_ZTVN8particle11SPISettingsE>:
	...
   ba26c:	4145 000b 40c9 000b 4119 000b               EA...@...A..

000ba278 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   ba278:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   ba288:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   ba298:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   ba2a8:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   ba2b8:	0064 754a 206c 3431 3220 3230 2032 3130     d.Jul 14 2022 01
   ba2c8:	303a 3a32 3030 0000 6400 7665 6369 2065     :02:00...device 
   ba2d8:	6f6e 2074 6f66 6e75 0064 0000               not found...

000ba2e4 <_ZTV6LIS3DH>:
	...
   ba2f4:	51b1 000b 40a1 000b 40a1 000b               .Q...@...@..

000ba300 <_ZTV9LIS3DHSPI>:
	...
   ba308:	509d 000b 509f 000b 51d3 000b 50dd 000b     .P...P...Q...P..
   ba318:	511f 000b 50ad 000b 50c7 000b 011b 0000     .Q...P...P......
   ba328:	a300 0000                                   ....

000ba32c <_ZL22BlynkReadHandlerVector>:
   ba32c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba33c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba34c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba35c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba36c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba37c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba38c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba39c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3ac:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3bc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3cc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3dc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3ec:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba3fc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba40c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba41c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba42c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba43c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba44c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba45c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba46c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba47c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba48c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba49c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4ac:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4bc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4cc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4dc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4ec:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba4fc:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba50c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..
   ba51c:	582d 000b 582d 000b 582d 000b 582d 000b     -X..-X..-X..-X..

000ba52c <_ZL23BlynkWriteHandlerVector>:
   ba52c:	428d 000b 582f 000b 582f 000b 582f 000b     .B../X../X../X..
   ba53c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba54c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba55c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba56c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba57c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba58c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba59c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5ac:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5bc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5cc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5dc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5ec:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba5fc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba60c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba61c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba62c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba63c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba64c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba65c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba66c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba67c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba68c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba69c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6ac:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6bc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6cc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6dc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6ec:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba6fc:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba70c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba71c:	582f 000b 582f 000b 582f 000b 582f 000b     /X../X../X../X..
   ba72c:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   ba73c:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   ba74c:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   ba75c:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   ba76c:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   ba77c:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   ba78c:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   ba79c:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   ba7ac:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   ba7bc:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   ba7cc:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   ba7dc:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   ba7ec:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   ba7fc:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   ba80c:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   ba81c:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   ba82c:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   ba83c:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   ba84c:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   ba85c:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   ba86c:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   ba87c:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   ba88c:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   ba89c:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   ba8ac:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   ba8bc:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   ba8cc:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   ba8dc:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   ba8ec:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   ba8fc:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   ba90c:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   ba91c:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   ba92c:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   ba93c:	7463 7265 7369 6974 2e63 0000               cteristic...

000ba948 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba950:	5f35 000b 5f99 000b 610f 000b 5fc3 000b     5_..._...a..._..
   ba960:	5f39 000b                                   9_..

000ba964 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba96c:	5f31 000b 5fa7 000b 5f33 000b 5fc9 000b     1_..._..3_..._..
   ba97c:	5f59 000b                                   Y_..

000ba980 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   ba988:	5f2f 000b 5fb5 000b 6b61 000b 5fcf 000b     /_..._..ak..._..
   ba998:	5f79 000b                                   y_..

000ba99c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   ba9a8:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   ba9b8:	0000 0000                                   ....

000ba9bc <_ZTVN5spark13EthernetClassE>:
	...
   ba9c4:	846f 000b 8465 000b 845b 000b 8451 000b     o...e...[...Q...
   ba9d4:	8445 000b 8439 000b 8709 000b 8711 000b     E...9...........
   ba9e4:	842d 000b 8425 000b 841b 000b 8411 000b     -...%...........
   ba9f4:	8741 000b                                   A...

000ba9f8 <_ZTV7TwoWire>:
	...
   baa00:	848d 000b 84d7 000b 84af 000b 848f 000b     ................
   baa10:	84b7 000b 84bf 000b 84c7 000b 84cf 000b     ................

000baa20 <_ZTV9IPAddress>:
	...
   baa28:	8593 000b 8583 000b 8585 000b 7061 0070     ............app.

000baa38 <_ZTVN5spark12NetworkClassE>:
	...
   baa40:	86c9 000b 86d3 000b 86dd 000b 86e7 000b     ................
   baa50:	86f1 000b 86fd 000b 8709 000b 8711 000b     ................
   baa60:	8719 000b 8725 000b 872d 000b 8737 000b     ....%...-...7...
   baa70:	8741 000b                                   A...

000baa74 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   baa74:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   baa84:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000baa94 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   baa9c:	8e45 000b 8e69 000b 939b 000b 8e77 000b     E...i.......w...
   baaac:	8e49 000b                                   I...

000baab0 <_ZTV9TCPClient>:
	...
   baab8:	8ef5 000b 8f29 000b 8dc1 000b 8ddb 000b     ....)...........
   baac8:	9231 000b 8e05 000b 90a7 000b 8e39 000b     1...........9...
   baad8:	9139 000b 8f79 000b 90d5 000b 92e5 000b     9...y...........
   baae8:	9075 000b 8e3b 000b 8ded 000b 8e7d 000b     u...;.......}...
   baaf8:	8f59 000b 5925 252d 2d6d 6425 2554 3a48     Y...%Y-%m-%dT%H:
   bab08:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000bab18 <_ZTV11USARTSerial>:
	...
   bab20:	93b5 000b 9421 000b 93f9 000b 882d 000b     ....!.......-...
   bab30:	93c9 000b 93e5 000b 93d7 000b 93f3 000b     ................
   bab40:	93b7 000b 93bb 000b                         ........

000bab48 <_ZTV9USBSerial>:
	...
   bab50:	946d 000b 94d5 000b 94ab 000b 882d 000b     m...........-...
   bab60:	949d 000b 946f 000b 947f 000b 94cf 000b     ....o...........
   bab70:	948f 000b 9467 000b                         ....g...

000bab78 <_ZTVN5spark9WiFiClassE>:
	...
   bab80:	95cf 000b 95c5 000b 95bb 000b 9571 000b     ............q...
   bab90:	95af 000b 95a3 000b 8709 000b 8711 000b     ................
   baba0:	9597 000b 958f 000b 9585 000b 957b 000b     ............{...
   babb0:	8741 000b                                   A...

000babb4 <_ZSt7nothrow>:
	...

000babb5 <_ZTSSt19_Sp_make_shared_tag>:
   babb5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   babc5:	6572 5f64 6174 0067 0000                     red_tag....

000babd0 <_ZTISt19_Sp_make_shared_tag>:
   babd0:	ac10 000b abb5 000b                         ........

000babd8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   babd8:	ac70 000b abe4 000b ac94 000b               p...........

000babe4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   babe4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   babf4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   bac04:	0045 0000                                   E...

000bac08 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bac08:	0000 0000 abd8 000b 9a5d 000b 9a71 000b     ........]...q...
   bac18:	9c05 000b 9c05 000b 9adb 000b 9a1d 000b     ................
   bac28:	9ac3 000b 9a85 000b 9a4f 000b               ........O...

000bac34 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bac34:	ac70 000b ac40 000b abd8 000b               p...@.......

000bac40 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bac40:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   bac50:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   bac60:	666e 456f 0000 0000                         nfoE....

000bac68 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bac68:	0000 0000 ac34 000b 9b05 000b 9b19 000b     ....4...........
   bac78:	9c05 000b 9c05 000b 9adb 000b 9a1d 000b     ................
   bac88:	9bd9 000b 9b65 000b 9b2d 000b               ....e...-...

000bac94 <_ZTISt9type_info>:
   bac94:	ac10 000b ac9c 000b                         ........

000bac9c <_ZTSSt9type_info>:
   bac9c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   bacac:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   bacbc:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   baccc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   bacdc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   bacec:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   bacfc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   bad0c:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000bad19 <_ctype_>:
   bad19:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bad29:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bad39:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bad49:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bad59:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bad69:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bad79:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bad89:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bad99:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bae1a <link_const_variable_data_end>:
	...

000bae1c <link_constructors_location>:
   bae1c:	000b4f71 	.word	0x000b4f71
   bae20:	000b8401 	.word	0x000b8401
   bae24:	000b8479 	.word	0x000b8479
   bae28:	000b86b9 	.word	0x000b86b9
   bae2c:	000b8819 	.word	0x000b8819
   bae30:	000b899d 	.word	0x000b899d
   bae34:	000b8d9d 	.word	0x000b8d9d
   bae38:	000b93a1 	.word	0x000b93a1
   bae3c:	000b95d9 	.word	0x000b95d9
